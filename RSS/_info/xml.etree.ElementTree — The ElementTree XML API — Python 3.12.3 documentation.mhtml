From: <Saved by Blink>
Snapshot-Content-Location: https://docs.python.org/3/library/xml.etree.elementtree.html
Subject: =?utf-8?Q?xml.etree.ElementTree=20=E2=80=94=20The=20ElementTree=20XML=20A?=
 =?utf-8?Q?PI=20=E2=80=94=20Python=203.12.3=20documentation?=
Date: Tue, 28 May 2024 15:35:55 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--2oRdm3qoMV0IuZlLWYQbNx1ZYg7nx2vL5gv1H2XWYp----"


------MultipartBoundary--2oRdm3qoMV0IuZlLWYQbNx1ZYg7nx2vL5gv1H2XWYp----
Content-Type: text/html
Content-ID: <frame-BF097F2EDDA2559F6C435E845040F485@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/library/xml.etree.elementtree.html

<!DOCTYPE html><html lang=3D"en" data-content_root=3D"../"><head><meta http=
-equiv=3D"Content-Type" content=3D"text/html; charset=3DUTF-8"><link rel=3D=
"stylesheet" type=3D"text/css" href=3D"cid:css-9fb2dc98-b20a-49ed-b54d-a96d=
09861490@mhtml.blink" />
   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0"><meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-sc=
ale=3D1">
<meta property=3D"og:title" content=3D"xml.etree.ElementTree =E2=80=94 The =
ElementTree XML API">
<meta property=3D"og:type" content=3D"website">
<meta property=3D"og:url" content=3D"https://docs.python.org/3/library/xml.=
etree.elementtree.html">
<meta property=3D"og:site_name" content=3D"Python documentation">
<meta property=3D"og:description" content=3D"Source code: Lib/xml/etree/Ele=
mentTree.py The xml.etree.ElementTree module implements a simple and effici=
ent API for parsing and creating XML data. Tutorial: This is a short tutori=
al for using xml....">
<meta property=3D"og:image" content=3D"https://docs.python.org/3/_static/og=
-image.png">
<meta property=3D"og:image:alt" content=3D"Python documentation">
<meta name=3D"description" content=3D"Source code: Lib/xml/etree/ElementTre=
e.py The xml.etree.ElementTree module implements a simple and efficient API=
 for parsing and creating XML data. Tutorial: This is a short tutorial for =
using xml....">
<meta property=3D"og:image:width" content=3D"200">
<meta property=3D"og:image:height" content=3D"200">
<meta name=3D"theme-color" content=3D"#3776ab">

    <title>xml.etree.ElementTree =E2=80=94 The ElementTree XML API =E2=80=
=94 Python 3.12.3 documentation</title><meta name=3D"viewport" content=3D"w=
idth=3Ddevice-width, initial-scale=3D1.0">
   =20
    <link rel=3D"stylesheet" type=3D"text/css" href=3D"https://docs.python.=
org/3/_static/pygments.css?v=3D80d5e7a1">
    <link rel=3D"stylesheet" type=3D"text/css" href=3D"https://docs.python.=
org/3/_static/pydoctheme.css?v=3Dbb723527">
    <link id=3D"pygments_dark_css" media=3D"(prefers-color-scheme: dark)" r=
el=3D"stylesheet" type=3D"text/css" href=3D"https://docs.python.org/3/_stat=
ic/pygments_dark.css?v=3Db20cc3f5">
   =20
   =20
   =20
   =20
   =20
   =20
   =20
    <link rel=3D"search" type=3D"application/opensearchdescription+xml" tit=
le=3D"Search within Python 3.12.3 documentation" href=3D"https://docs.pytho=
n.org/3/_static/opensearch.xml">
    <link rel=3D"author" title=3D"About these documents" href=3D"https://do=
cs.python.org/3/about.html">
    <link rel=3D"index" title=3D"Index" href=3D"https://docs.python.org/3/g=
enindex.html">
    <link rel=3D"search" title=3D"Search" href=3D"https://docs.python.org/3=
/search.html">
    <link rel=3D"copyright" title=3D"Copyright" href=3D"https://docs.python=
.org/3/copyright.html">
    <link rel=3D"next" title=3D"xml.dom =E2=80=94 The Document Object Model=
 API" href=3D"https://docs.python.org/3/library/xml.dom.html">
    <link rel=3D"prev" title=3D"XML Processing Modules" href=3D"https://doc=
s.python.org/3/library/xml.html">
    <link rel=3D"canonical" href=3D"https://docs.python.org/3/library/xml.e=
tree.elementtree.html">
   =20
     =20
   =20

   =20
   =20
<link rel=3D"stylesheet" href=3D"https://docs.python.org/3/_static/pydocthe=
me_dark.css" media=3D"(prefers-color-scheme: dark)" id=3D"pydoctheme_dark_c=
ss">
    <link rel=3D"shortcut icon" type=3D"image/png" href=3D"https://docs.pyt=
hon.org/3/_static/py.svg">
           =20
           =20
           =20
            =20
<meta name=3D"readthedocs-addons-api-version" content=3D"1">


  </head>
<body>
<div class=3D"mobile-nav">
    <input type=3D"checkbox" id=3D"menuToggler" class=3D"toggler__input" ar=
ia-controls=3D"navigation" aria-pressed=3D"false" aria-expanded=3D"false" r=
ole=3D"button" aria-label=3D"Menu">
    <nav class=3D"nav-content" role=3D"navigation">
        <label for=3D"menuToggler" class=3D"toggler__label">
            <span></span>
        </label>
        <span class=3D"nav-items-wrapper">
            <a href=3D"https://www.python.org/" class=3D"nav-logo">
                <img src=3D"https://docs.python.org/3/_static/py.svg" alt=
=3D"Python logo">
            </a>
            <span class=3D"version_switcher_placeholder"><select id=3D"vers=
ion_select"><option value=3D"3.14">dev (3.14)</option><option value=3D"3.13=
">pre (3.13)</option><option value=3D"3.12" selected=3D"selected">3.12.3</o=
ption><option value=3D"3.11">3.11</option><option value=3D"3.10">3.10</opti=
on><option value=3D"3.9">3.9</option><option value=3D"3.8">3.8</option><opt=
ion value=3D"3.7">3.7</option><option value=3D"3.6">3.6</option><option val=
ue=3D"3.5">3.5</option><option value=3D"3.4">3.4</option><option value=3D"3=
.3">3.3</option><option value=3D"3.2">3.2</option><option value=3D"3.1">3.1=
</option><option value=3D"3.0">3.0</option><option value=3D"2.7">2.7</optio=
n><option value=3D"2.6">2.6</option></select></span>
            <form role=3D"search" class=3D"search" action=3D"https://docs.p=
ython.org/3/search.html" method=3D"get">
                <svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"20" heig=
ht=3D"20" viewBox=3D"0 0 24 24" class=3D"search-icon">
                    <path fill-rule=3D"nonzero" fill=3D"currentColor" d=3D"=
M15.5 14h-.79l-.28-.27a6.5 6.5 0 001.48-5.34c-.47-2.78-2.79-5-5.59-5.34a6.5=
05 6.505 0 00-7.27 7.27c.34 2.8 2.56 5.12 5.34 5.59a6.5 6.5 0 005.34-1.48l.=
27.28v.79l4.25 4.25c.41.41 1.08.41 1.49 0 .41-.41.41-1.08 0-1.49L15.5 14zm-=
6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></p=
ath>
                </svg>
                <input placeholder=3D"Quick search" aria-label=3D"Quick sea=
rch" type=3D"search" name=3D"q">
                <input type=3D"submit" value=3D"Go">
            </form>
        </span>
    </nav>
    <div class=3D"menu-wrapper">
        <nav class=3D"menu" role=3D"navigation" aria-label=3D"main navigati=
on" tabindex=3D"-1">
            <div class=3D"language_switcher_placeholder"><select id=3D"lang=
uage_select"><option value=3D"en" selected=3D"selected">English</option><op=
tion value=3D"es">Spanish</option><option value=3D"fr">French</option><opti=
on value=3D"ja">Japanese</option><option value=3D"ko">Korean</option><optio=
n value=3D"pt-br">Brazilian Portuguese</option><option value=3D"tr">Turkish=
</option><option value=3D"zh-cn">Simplified Chinese</option><option value=
=3D"zh-tw">Traditional Chinese</option></select></div>
           =20
<label class=3D"theme-selector-label">
    Theme
    <select class=3D"theme-selector">
        <option value=3D"auto" selected=3D"">Auto</option>
        <option value=3D"light">Light</option>
        <option value=3D"dark">Dark</option>
    </select>
</label>
  <div>
    <h3><a href=3D"https://docs.python.org/3/contents.html">Table of Conten=
ts</a></h3>
    <ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#"><code class=3D"xref py py-mod docutils lite=
ral notranslate"><span class=3D"pre">xml.etree.ElementTree</span></code> =
=E2=80=94 The ElementTree XML API</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#tutorial">Tutorial</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#xml-tree-and-elements">XML tree and elements<=
/a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#parsing-xml">Parsing XML</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#pull-api-for-non-blocking-parsing">Pull API f=
or non-blocking parsing</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#finding-interesting-elements">Finding interes=
ting elements</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#modifying-an-xml-file">Modifying an XML File<=
/a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#building-xml-documents">Building XML document=
s</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#parsing-xml-with-namespaces">Parsing XML with=
 Namespaces</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#xpath-support">XPath support</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#example">Example</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#supported-xpath-syntax">Supported XPath synta=
x</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#reference">Reference</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#functions">Functions</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#xinclude-support">XInclude support</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#id3">Example</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#id4">Reference</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#elementinclude-functions">Functions</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#element-objects">Element Objects</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#elementtree-objects">ElementTree Objects</a><=
/li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#qname-objects">QName Objects</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#treebuilder-objects">TreeBuilder Objects</a><=
/li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#xmlparser-objects">XMLParser Objects</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#xmlpullparser-objects">XMLPullParser Objects<=
/a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#exceptions">Exceptions</a></li>
</ul>
</li>
</ul>
</li>
</ul>

  </div>
  <div>
    <h4>Previous topic</h4>
    <p class=3D"topless"><a href=3D"https://docs.python.org/3/library/xml.h=
tml" title=3D"previous chapter">XML Processing Modules</a></p>
  </div>
  <div>
    <h4>Next topic</h4>
    <p class=3D"topless"><a href=3D"https://docs.python.org/3/library/xml.d=
om.html" title=3D"next chapter"><code class=3D"xref py py-mod docutils lite=
ral notranslate"><span class=3D"pre">xml.dom</span></code> =E2=80=94 The Do=
cument Object Model API</a></p>
  </div>
  <div role=3D"note" aria-label=3D"source link">
    <h3>This Page</h3>
    <ul class=3D"this-page-menu">
      <li><a href=3D"https://docs.python.org/3/bugs.html">Report a Bug</a><=
/li>
      <li>
        <a href=3D"https://github.com/python/cpython/blob/main/Doc/library/=
xml.etree.elementtree.rst" rel=3D"nofollow">Show Source
        </a>
      </li>
    </ul>
  </div>
        </nav>
    </div>
</div>

 =20
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"https://docs.python.org/3/genindex.html" title=3D"Gene=
ral Index" accesskey=3D"I">index</a></li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/py-modindex.html" title=3D"P=
ython Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/xml.dom.html" title=
=3D"xml.dom =E2=80=94 The Document Object Model API" accesskey=3D"N">next</=
a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/xml.html" title=3D"X=
ML Processing Modules" accesskey=3D"P">previous</a> |</li>

          <li><img src=3D"https://docs.python.org/3/_static/py.svg" alt=3D"=
Python logo" style=3D"vertical-align: middle; margin-top: -1px"></li>
          <li><a href=3D"https://www.python.org/">Python</a> =C2=BB</li>
          <li class=3D"switchers">
            <div class=3D"language_switcher_placeholder"><select id=3D"lang=
uage_select"><option value=3D"en" selected=3D"selected">English</option><op=
tion value=3D"es">Spanish</option><option value=3D"fr">French</option><opti=
on value=3D"ja">Japanese</option><option value=3D"ko">Korean</option><optio=
n value=3D"pt-br">Brazilian Portuguese</option><option value=3D"tr">Turkish=
</option><option value=3D"zh-cn">Simplified Chinese</option><option value=
=3D"zh-tw">Traditional Chinese</option></select></div>
            <div class=3D"version_switcher_placeholder"><select id=3D"versi=
on_select"><option value=3D"3.14">dev (3.14)</option><option value=3D"3.13"=
>pre (3.13)</option><option value=3D"3.12" selected=3D"selected">3.12.3</op=
tion><option value=3D"3.11">3.11</option><option value=3D"3.10">3.10</optio=
n><option value=3D"3.9">3.9</option><option value=3D"3.8">3.8</option><opti=
on value=3D"3.7">3.7</option><option value=3D"3.6">3.6</option><option valu=
e=3D"3.5">3.5</option><option value=3D"3.4">3.4</option><option value=3D"3.=
3">3.3</option><option value=3D"3.2">3.2</option><option value=3D"3.1">3.1<=
/option><option value=3D"3.0">3.0</option><option value=3D"2.7">2.7</option=
><option value=3D"2.6">2.6</option></select></div>
          </li>
          <li>
             =20
          </li>
    <li id=3D"cpython-language-and-version">
      <a href=3D"https://docs.python.org/3/index.html">3.12.3 Documentation=
</a> =C2=BB
    </li>

          <li class=3D"nav-item nav-item-1"><a href=3D"https://docs.python.=
org/3/library/index.html">The Python Standard Library</a> =C2=BB</li>
          <li class=3D"nav-item nav-item-2"><a href=3D"https://docs.python.=
org/3/library/markup.html" accesskey=3D"U">Structured Markup Processing Too=
ls</a> =C2=BB</li>
        <li class=3D"nav-item nav-item-this"><a href=3D"https://docs.python=
.org/3/library/xml.etree.elementtree.html"><code class=3D"xref py py-mod do=
cutils literal notranslate"><span class=3D"pre">xml.etree.ElementTree</span=
></code> =E2=80=94 The ElementTree XML API</a></li>
                <li class=3D"right">
                   =20

    <div class=3D"inline-search" role=3D"search">
        <form class=3D"inline-search" action=3D"https://docs.python.org/3/s=
earch.html" method=3D"get">
          <input placeholder=3D"Quick search" aria-label=3D"Quick search" t=
ype=3D"search" name=3D"q" id=3D"search-box">
          <input type=3D"submit" value=3D"Go">
        </form>
    </div>
                     |
                </li>
            <li class=3D"right">
<label class=3D"theme-selector-label">
    Theme
    <select class=3D"theme-selector">
        <option value=3D"auto" selected=3D"">Auto</option>
        <option value=3D"light">Light</option>
        <option value=3D"dark">Dark</option>
    </select>
</label> |</li>
           =20
      </ul>
    </div>   =20

    <div class=3D"document">
      <div class=3D"documentwrapper">
        <div class=3D"bodywrapper">
          <div class=3D"body" role=3D"main">
           =20
  <section id=3D"module-xml.etree.ElementTree">
<span id=3D"xml-etree-elementtree-the-elementtree-xml-api"></span><h1><code=
 class=3D"xref py py-mod docutils literal notranslate"><span class=3D"pre">=
xml.etree.ElementTree</span></code> =E2=80=94 The ElementTree XML API<a cla=
ss=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.eleme=
nttree.html#module-xml.etree.ElementTree" title=3D"Link to this heading">=
=C2=B6</a></h1>
<p><strong>Source code:</strong> <a class=3D"reference external" href=3D"ht=
tps://github.com/python/cpython/tree/3.12/Lib/xml/etree/ElementTree.py">Lib=
/xml/etree/ElementTree.py</a></p>
<hr class=3D"docutils">
<p>The <a class=3D"reference internal" href=3D"https://docs.python.org/3/li=
brary/xml.etree.elementtree.html#module-xml.etree.ElementTree" title=3D"xml=
.etree.ElementTree: Implementation of the ElementTree API."><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">xml.etree.=
ElementTree</span></code></a> module implements a simple and efficient API
for parsing and creating XML data.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.3: </span>T=
his module will use a fast implementation whenever available.</p>
</div>
<div class=3D"deprecated">
<p><span class=3D"versionmodified deprecated">Deprecated since version 3.3:=
 </span>The <code class=3D"xref py py-mod docutils literal notranslate"><sp=
an class=3D"pre">xml.etree.cElementTree</span></code> module is deprecated.=
</p>
</div>
<div class=3D"admonition warning">
<p class=3D"admonition-title">Warning</p>
<p>The <a class=3D"reference internal" href=3D"https://docs.python.org/3/li=
brary/xml.etree.elementtree.html#module-xml.etree.ElementTree" title=3D"xml=
.etree.ElementTree: Implementation of the ElementTree API."><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">xml.etree.=
ElementTree</span></code></a> module is not secure against
maliciously constructed data.  If you need to parse untrusted or
unauthenticated data see <a class=3D"reference internal" href=3D"https://do=
cs.python.org/3/library/xml.html#xml-vulnerabilities"><span class=3D"std st=
d-ref">XML vulnerabilities</span></a>.</p>
</div>
<section id=3D"tutorial">
<h2>Tutorial<a class=3D"headerlink" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#tutorial" title=3D"Link to this heading">=C2=
=B6</a></h2>
<p>This is a short tutorial for using <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#module-xml=
.etree.ElementTree" title=3D"xml.etree.ElementTree: Implementation of the E=
lementTree API."><code class=3D"xref py py-mod docutils literal notranslate=
"><span class=3D"pre">xml.etree.ElementTree</span></code></a> (<code class=
=3D"docutils literal notranslate"><span class=3D"pre">ET</span></code> in
short).  The goal is to demonstrate some of the building blocks and basic
concepts of the module.</p>
<section id=3D"xml-tree-and-elements">
<h3>XML tree and elements<a class=3D"headerlink" href=3D"https://docs.pytho=
n.org/3/library/xml.etree.elementtree.html#xml-tree-and-elements" title=3D"=
Link to this heading">=C2=B6</a></h3>
<p>XML is an inherently hierarchical data format, and the most natural way =
to
represent it is with a tree.  <code class=3D"docutils literal notranslate">=
<span class=3D"pre">ET</span></code> has two classes for this purpose -
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.ElementTree" title=3D"xml.e=
tree.ElementTree.ElementTree"><code class=3D"xref py py-class docutils lite=
ral notranslate"><span class=3D"pre">ElementTree</span></code></a> represen=
ts the whole XML document as a tree, and
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.Element" title=3D"xml.etree=
.ElementTree.Element"><code class=3D"xref py py-class docutils literal notr=
anslate"><span class=3D"pre">Element</span></code></a> represents a single =
node in this tree.  Interactions with
the whole document (reading and writing to/from files) are usually done
on the <a class=3D"reference internal" href=3D"https://docs.python.org/3/li=
brary/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree" title=
=3D"xml.etree.ElementTree.ElementTree"><code class=3D"xref py py-class docu=
tils literal notranslate"><span class=3D"pre">ElementTree</span></code></a>=
 level.  Interactions with a single XML element
and its sub-elements are done on the <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.=
ElementTree.Element" title=3D"xml.etree.ElementTree.Element"><code class=3D=
"xref py py-class docutils literal notranslate"><span class=3D"pre">Element=
</span></code></a> level.</p>
</section>
<section id=3D"parsing-xml">
<span id=3D"elementtree-parsing-xml"></span><h3>Parsing XML<a class=3D"head=
erlink" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.htm=
l#parsing-xml" title=3D"Link to this heading">=C2=B6</a></h3>
<p>We=E2=80=99ll be using the fictive <code class=3D"file docutils literal =
notranslate"><span class=3D"pre">country_data.xml</span></code> XML documen=
t as the sample data for this section:</p>
<div class=3D"highlight-xml notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"cp">&lt;?xml version=3D"1.0"?&gt;</span>
<span class=3D"nt">&lt;data&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;country</span><span cla=
ss=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"Liecht=
enstein"</span><span class=3D"nt">&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;rank&gt;</span>1<sp=
an class=3D"nt">&lt;/rank&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;year&gt;</span>2008=
<span class=3D"nt">&lt;/year&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;gdppc&gt;</span>141=
100<span class=3D"nt">&lt;/gdppc&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;neighbor</span><spa=
n class=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"A=
ustria"</span><span class=3D"w"> </span><span class=3D"na">direction=3D</sp=
an><span class=3D"s">"E"</span><span class=3D"nt">/&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;neighbor</span><spa=
n class=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"S=
witzerland"</span><span class=3D"w"> </span><span class=3D"na">direction=3D=
</span><span class=3D"s">"W"</span><span class=3D"nt">/&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;/country&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;country</span><span cla=
ss=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"Singap=
ore"</span><span class=3D"nt">&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;rank&gt;</span>4<sp=
an class=3D"nt">&lt;/rank&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;year&gt;</span>2011=
<span class=3D"nt">&lt;/year&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;gdppc&gt;</span>599=
00<span class=3D"nt">&lt;/gdppc&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;neighbor</span><spa=
n class=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"M=
alaysia"</span><span class=3D"w"> </span><span class=3D"na">direction=3D</s=
pan><span class=3D"s">"N"</span><span class=3D"nt">/&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;/country&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;country</span><span cla=
ss=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"Panama=
"</span><span class=3D"nt">&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;rank&gt;</span>68<s=
pan class=3D"nt">&lt;/rank&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;year&gt;</span>2011=
<span class=3D"nt">&lt;/year&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;gdppc&gt;</span>136=
00<span class=3D"nt">&lt;/gdppc&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;neighbor</span><spa=
n class=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"C=
osta Rica"</span><span class=3D"w"> </span><span class=3D"na">direction=3D<=
/span><span class=3D"s">"W"</span><span class=3D"nt">/&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;neighbor</span><spa=
n class=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"C=
olombia"</span><span class=3D"w"> </span><span class=3D"na">direction=3D</s=
pan><span class=3D"s">"E"</span><span class=3D"nt">/&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;/country&gt;</span>
<span class=3D"nt">&lt;/data&gt;</span>
</pre></div>
</div>
<p>We can import this data by reading from a file:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">xml.etree.ElementTree</span> <span class=3D"k">as</span=
> <span class=3D"nn">ET</span>
<span class=3D"n">tree</span> <span class=3D"o">=3D</span> <span class=3D"n=
">ET</span><span class=3D"o">.</span><span class=3D"n">parse</span><span cl=
ass=3D"p">(</span><span class=3D"s1">'country_data.xml'</span><span class=
=3D"p">)</span>
<span class=3D"n">root</span> <span class=3D"o">=3D</span> <span class=3D"n=
">tree</span><span class=3D"o">.</span><span class=3D"n">getroot</span><spa=
n class=3D"p">()</span>
</pre></div>
</div>
<p>Or directly from a string:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><pre><span></span><span class=3D"n">root</span> <s=
pan class=3D"o">=3D</span> <span class=3D"n">ET</span><span class=3D"o">.</=
span><span class=3D"n">fromstring</span><span class=3D"p">(</span><span cla=
ss=3D"n">country_data_as_string</span><span class=3D"p">)</span>
</pre></div>
</div>
<p><a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#xml.etree.ElementTree.fromstring" title=3D"xml=
.etree.ElementTree.fromstring"><code class=3D"xref py py-func docutils lite=
ral notranslate"><span class=3D"pre">fromstring()</span></code></a> parses =
XML from a string directly into an <a class=3D"reference internal" href=3D"=
https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.Elem=
entTree.Element" title=3D"xml.etree.ElementTree.Element"><code class=3D"xre=
f py py-class docutils literal notranslate"><span class=3D"pre">Element</sp=
an></code></a>,
which is the root element of the parsed tree.  Other parsing functions may
create an <a class=3D"reference internal" href=3D"https://docs.python.org/3=
/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree" titl=
e=3D"xml.etree.ElementTree.ElementTree"><code class=3D"xref py py-class doc=
utils literal notranslate"><span class=3D"pre">ElementTree</span></code></a=
>.  Check the documentation to be sure.</p>
<p>As an <a class=3D"reference internal" href=3D"https://docs.python.org/3/=
library/xml.etree.elementtree.html#xml.etree.ElementTree.Element" title=3D"=
xml.etree.ElementTree.Element"><code class=3D"xref py py-class docutils lit=
eral notranslate"><span class=3D"pre">Element</span></code></a>, <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">root</span></code> h=
as a tag and a dictionary of attributes:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" data-hidden=3D"false">&gt;&gt;&gt;</span><pre><span></span><=
span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">root</span><span cl=
ass=3D"o">.</span><span class=3D"n">tag</span>
<span class=3D"go">'data'</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">root</span><span c=
lass=3D"o">.</span><span class=3D"n">attrib</span>
<span class=3D"go">{}</span>
</pre></div>
</div>
<p>It also has children nodes over which we can iterate:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" data-hidden=3D"false">&gt;&gt;&gt;</span><pre><span></span><=
span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"k">for</span> <span cl=
ass=3D"n">child</span> <span class=3D"ow">in</span> <span class=3D"n">root<=
/span><span class=3D"p">:</span>
<span class=3D"gp">... </span>    <span class=3D"nb">print</span><span clas=
s=3D"p">(</span><span class=3D"n">child</span><span class=3D"o">.</span><sp=
an class=3D"n">tag</span><span class=3D"p">,</span> <span class=3D"n">child=
</span><span class=3D"o">.</span><span class=3D"n">attrib</span><span class=
=3D"p">)</span>
<span class=3D"gp">...</span>
<span class=3D"go">country {'name': 'Liechtenstein'}</span>
<span class=3D"go">country {'name': 'Singapore'}</span>
<span class=3D"go">country {'name': 'Panama'}</span>
</pre></div>
</div>
<p>Children are nested, and we can access specific child nodes by index:</p=
>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" data-hidden=3D"false">&gt;&gt;&gt;</span><pre><span></span><=
span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">root</span><span cl=
ass=3D"p">[</span><span class=3D"mi">0</span><span class=3D"p">][</span><sp=
an class=3D"mi">1</span><span class=3D"p">]</span><span class=3D"o">.</span=
><span class=3D"n">text</span>
<span class=3D"go">'2008'</span>
</pre></div>
</div>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p>Not all elements of the XML input will end up as elements of the
parsed tree. Currently, this module skips over any XML comments,
processing instructions, and document type declarations in the
input. Nevertheless, trees built using this module=E2=80=99s API rather
than parsing from XML text can have comments and processing
instructions in them; they will be included when generating XML
output. A document type declaration may be accessed by passing a
custom <a class=3D"reference internal" href=3D"https://docs.python.org/3/li=
brary/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder" title=
=3D"xml.etree.ElementTree.TreeBuilder"><code class=3D"xref py py-class docu=
tils literal notranslate"><span class=3D"pre">TreeBuilder</span></code></a>=
 instance to the <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser"=
 title=3D"xml.etree.ElementTree.XMLParser"><code class=3D"xref py py-class =
docutils literal notranslate"><span class=3D"pre">XMLParser</span></code></=
a>
constructor.</p>
</div>
</section>
<section id=3D"pull-api-for-non-blocking-parsing">
<span id=3D"elementtree-pull-parsing"></span><h3>Pull API for non-blocking =
parsing<a class=3D"headerlink" href=3D"https://docs.python.org/3/library/xm=
l.etree.elementtree.html#pull-api-for-non-blocking-parsing" title=3D"Link t=
o this heading">=C2=B6</a></h3>
<p>Most parsing functions provided by this module require the whole documen=
t
to be read at once before returning any result.  It is possible to use an
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.XMLParser" title=3D"xml.etr=
ee.ElementTree.XMLParser"><code class=3D"xref py py-class docutils literal =
notranslate"><span class=3D"pre">XMLParser</span></code></a> and feed data =
into it incrementally, but it is a push API that
calls methods on a callback target, which is too low-level and inconvenient=
 for
most needs.  Sometimes what the user really wants is to be able to parse XM=
L
incrementally, without blocking operations, while enjoying the convenience =
of
fully constructed <a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element" =
title=3D"xml.etree.ElementTree.Element"><code class=3D"xref py py-class doc=
utils literal notranslate"><span class=3D"pre">Element</span></code></a> ob=
jects.</p>
<p>The most powerful tool for doing this is <a class=3D"reference internal"=
 href=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.e=
tree.ElementTree.XMLPullParser" title=3D"xml.etree.ElementTree.XMLPullParse=
r"><code class=3D"xref py py-class docutils literal notranslate"><span clas=
s=3D"pre">XMLPullParser</span></code></a>.  It does not
require a blocking read to obtain the XML data, and is instead fed with dat=
a
incrementally with <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLPullP=
arser.feed" title=3D"xml.etree.ElementTree.XMLPullParser.feed"><code class=
=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">XMLPu=
llParser.feed()</span></code></a> calls.  To get the parsed XML
elements, call <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLPullParse=
r.read_events" title=3D"xml.etree.ElementTree.XMLPullParser.read_events"><c=
ode class=3D"xref py py-meth docutils literal notranslate"><span class=3D"p=
re">XMLPullParser.read_events()</span></code></a>.  Here is an example:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" data-hidden=3D"false">&gt;&gt;&gt;</span><pre><span></span><=
span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">parser</span> <span=
 class=3D"o">=3D</span> <span class=3D"n">ET</span><span class=3D"o">.</spa=
n><span class=3D"n">XMLPullParser</span><span class=3D"p">([</span><span cl=
ass=3D"s1">'start'</span><span class=3D"p">,</span> <span class=3D"s1">'end=
'</span><span class=3D"p">])</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">parser</span><span=
 class=3D"o">.</span><span class=3D"n">feed</span><span class=3D"p">(</span=
><span class=3D"s1">'&lt;mytag&gt;sometext'</span><span class=3D"p">)</span=
>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">list</span><span =
class=3D"p">(</span><span class=3D"n">parser</span><span class=3D"o">.</spa=
n><span class=3D"n">read_events</span><span class=3D"p">())</span>
<span class=3D"go">[('start', &lt;Element 'mytag' at 0x7fa66db2be58&gt;)]</=
span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">parser</span><span=
 class=3D"o">.</span><span class=3D"n">feed</span><span class=3D"p">(</span=
><span class=3D"s1">' more text&lt;/mytag&gt;'</span><span class=3D"p">)</s=
pan>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"k">for</span> <span c=
lass=3D"n">event</span><span class=3D"p">,</span> <span class=3D"n">elem</s=
pan> <span class=3D"ow">in</span> <span class=3D"n">parser</span><span clas=
s=3D"o">.</span><span class=3D"n">read_events</span><span class=3D"p">():</=
span>
<span class=3D"gp">... </span>    <span class=3D"nb">print</span><span clas=
s=3D"p">(</span><span class=3D"n">event</span><span class=3D"p">)</span>
<span class=3D"gp">... </span>    <span class=3D"nb">print</span><span clas=
s=3D"p">(</span><span class=3D"n">elem</span><span class=3D"o">.</span><spa=
n class=3D"n">tag</span><span class=3D"p">,</span> <span class=3D"s1">'text=
=3D'</span><span class=3D"p">,</span> <span class=3D"n">elem</span><span cl=
ass=3D"o">.</span><span class=3D"n">text</span><span class=3D"p">)</span>
<span class=3D"gp">...</span>
<span class=3D"go">end</span>
<span class=3D"go">mytag text=3D sometext more text</span>
</pre></div>
</div>
<p>The obvious use case is applications that operate in a non-blocking fash=
ion
where the XML data is being received from a socket or read incrementally fr=
om
some storage device.  In such cases, blocking reads are unacceptable.</p>
<p>Because it=E2=80=99s so flexible, <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.=
ElementTree.XMLPullParser" title=3D"xml.etree.ElementTree.XMLPullParser"><c=
ode class=3D"xref py py-class docutils literal notranslate"><span class=3D"=
pre">XMLPullParser</span></code></a> can be inconvenient to use for
simpler use-cases.  If you don=E2=80=99t mind your application blocking on =
reading XML
data but would still like to have incremental parsing capabilities, take a =
look
at <a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#xml.etree.ElementTree.iterparse" title=3D"xml.=
etree.ElementTree.iterparse"><code class=3D"xref py py-func docutils litera=
l notranslate"><span class=3D"pre">iterparse()</span></code></a>.  It can b=
e useful when you=E2=80=99re reading a large XML document
and don=E2=80=99t want to hold it wholly in memory.</p>
<p>Where <em>immediate</em> feedback through events is wanted, calling meth=
od
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.XMLPullParser.flush" title=
=3D"xml.etree.ElementTree.XMLPullParser.flush"><code class=3D"xref py py-me=
th docutils literal notranslate"><span class=3D"pre">XMLPullParser.flush()<=
/span></code></a> can help reduce delay;
please make sure to study the related security notes.</p>
</section>
<section id=3D"finding-interesting-elements">
<h3>Finding interesting elements<a class=3D"headerlink" href=3D"https://doc=
s.python.org/3/library/xml.etree.elementtree.html#finding-interesting-eleme=
nts" title=3D"Link to this heading">=C2=B6</a></h3>
<p><a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#xml.etree.ElementTree.Element" title=3D"xml.et=
ree.ElementTree.Element"><code class=3D"xref py py-class docutils literal n=
otranslate"><span class=3D"pre">Element</span></code></a> has some useful m=
ethods that help iterate recursively over all
the sub-tree below it (its children, their children, and so on).  For examp=
le,
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.Element.iter" title=3D"xml.=
etree.ElementTree.Element.iter"><code class=3D"xref py py-meth docutils lit=
eral notranslate"><span class=3D"pre">Element.iter()</span></code></a>:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" data-hidden=3D"false">&gt;&gt;&gt;</span><pre><span></span><=
span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"k">for</span> <span cl=
ass=3D"n">neighbor</span> <span class=3D"ow">in</span> <span class=3D"n">ro=
ot</span><span class=3D"o">.</span><span class=3D"n">iter</span><span class=
=3D"p">(</span><span class=3D"s1">'neighbor'</span><span class=3D"p">):</sp=
an>
<span class=3D"gp">... </span>    <span class=3D"nb">print</span><span clas=
s=3D"p">(</span><span class=3D"n">neighbor</span><span class=3D"o">.</span>=
<span class=3D"n">attrib</span><span class=3D"p">)</span>
<span class=3D"gp">...</span>
<span class=3D"go">{'name': 'Austria', 'direction': 'E'}</span>
<span class=3D"go">{'name': 'Switzerland', 'direction': 'W'}</span>
<span class=3D"go">{'name': 'Malaysia', 'direction': 'N'}</span>
<span class=3D"go">{'name': 'Costa Rica', 'direction': 'W'}</span>
<span class=3D"go">{'name': 'Colombia', 'direction': 'E'}</span>
</pre></div>
</div>
<p><a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#xml.etree.ElementTree.Element.findall" title=
=3D"xml.etree.ElementTree.Element.findall"><code class=3D"xref py py-meth d=
ocutils literal notranslate"><span class=3D"pre">Element.findall()</span></=
code></a> finds only elements with a tag which are direct
children of the current element.  <a class=3D"reference internal" href=3D"h=
ttps://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.Eleme=
ntTree.Element.find" title=3D"xml.etree.ElementTree.Element.find"><code cla=
ss=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">Ele=
ment.find()</span></code></a> finds the <em>first</em> child
with a particular tag, and <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.=
Element.text" title=3D"xml.etree.ElementTree.Element.text"><code class=3D"x=
ref py py-attr docutils literal notranslate"><span class=3D"pre">Element.te=
xt</span></code></a> accesses the element=E2=80=99s text
content.  <a class=3D"reference internal" href=3D"https://docs.python.org/3=
/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.get" titl=
e=3D"xml.etree.ElementTree.Element.get"><code class=3D"xref py py-meth docu=
tils literal notranslate"><span class=3D"pre">Element.get()</span></code></=
a> accesses the element=E2=80=99s attributes:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" data-hidden=3D"false">&gt;&gt;&gt;</span><pre><span></span><=
span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"k">for</span> <span cl=
ass=3D"n">country</span> <span class=3D"ow">in</span> <span class=3D"n">roo=
t</span><span class=3D"o">.</span><span class=3D"n">findall</span><span cla=
ss=3D"p">(</span><span class=3D"s1">'country'</span><span class=3D"p">):</s=
pan>
<span class=3D"gp">... </span>    <span class=3D"n">rank</span> <span class=
=3D"o">=3D</span> <span class=3D"n">country</span><span class=3D"o">.</span=
><span class=3D"n">find</span><span class=3D"p">(</span><span class=3D"s1">=
'rank'</span><span class=3D"p">)</span><span class=3D"o">.</span><span clas=
s=3D"n">text</span>
<span class=3D"gp">... </span>    <span class=3D"n">name</span> <span class=
=3D"o">=3D</span> <span class=3D"n">country</span><span class=3D"o">.</span=
><span class=3D"n">get</span><span class=3D"p">(</span><span class=3D"s1">'=
name'</span><span class=3D"p">)</span>
<span class=3D"gp">... </span>    <span class=3D"nb">print</span><span clas=
s=3D"p">(</span><span class=3D"n">name</span><span class=3D"p">,</span> <sp=
an class=3D"n">rank</span><span class=3D"p">)</span>
<span class=3D"gp">...</span>
<span class=3D"go">Liechtenstein 1</span>
<span class=3D"go">Singapore 4</span>
<span class=3D"go">Panama 68</span>
</pre></div>
</div>
<p>More sophisticated specification of which elements to look for is possib=
le by
using <a class=3D"reference internal" href=3D"https://docs.python.org/3/lib=
rary/xml.etree.elementtree.html#elementtree-xpath"><span class=3D"std std-r=
ef">XPath</span></a>.</p>
</section>
<section id=3D"modifying-an-xml-file">
<h3>Modifying an XML File<a class=3D"headerlink" href=3D"https://docs.pytho=
n.org/3/library/xml.etree.elementtree.html#modifying-an-xml-file" title=3D"=
Link to this heading">=C2=B6</a></h3>
<p><a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree" title=3D"xm=
l.etree.ElementTree.ElementTree"><code class=3D"xref py py-class docutils l=
iteral notranslate"><span class=3D"pre">ElementTree</span></code></a> provi=
des a simple way to build XML documents and write them to files.
The <a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.write" titl=
e=3D"xml.etree.ElementTree.ElementTree.write"><code class=3D"xref py py-met=
h docutils literal notranslate"><span class=3D"pre">ElementTree.write()</sp=
an></code></a> method serves this purpose.</p>
<p>Once created, an <a class=3D"reference internal" href=3D"https://docs.py=
thon.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element=
" title=3D"xml.etree.ElementTree.Element"><code class=3D"xref py py-class d=
ocutils literal notranslate"><span class=3D"pre">Element</span></code></a> =
object may be manipulated by directly changing
its fields (such as <a class=3D"reference internal" href=3D"https://docs.py=
thon.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element=
.text" title=3D"xml.etree.ElementTree.Element.text"><code class=3D"xref py =
py-attr docutils literal notranslate"><span class=3D"pre">Element.text</spa=
n></code></a>), adding and modifying attributes
(<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/=
xml.etree.elementtree.html#xml.etree.ElementTree.Element.set" title=3D"xml.=
etree.ElementTree.Element.set"><code class=3D"xref py py-meth docutils lite=
ral notranslate"><span class=3D"pre">Element.set()</span></code></a> method=
), as well as adding new children (for example
with <a class=3D"reference internal" href=3D"https://docs.python.org/3/libr=
ary/xml.etree.elementtree.html#xml.etree.ElementTree.Element.append" title=
=3D"xml.etree.ElementTree.Element.append"><code class=3D"xref py py-meth do=
cutils literal notranslate"><span class=3D"pre">Element.append()</span></co=
de></a>).</p>
<p>Let=E2=80=99s say we want to add one to each country=E2=80=99s rank, and=
 add an <code class=3D"docutils literal notranslate"><span class=3D"pre">up=
dated</span></code>
attribute to the rank element:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" data-hidden=3D"false">&gt;&gt;&gt;</span><pre><span></span><=
span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"k">for</span> <span cl=
ass=3D"n">rank</span> <span class=3D"ow">in</span> <span class=3D"n">root</=
span><span class=3D"o">.</span><span class=3D"n">iter</span><span class=3D"=
p">(</span><span class=3D"s1">'rank'</span><span class=3D"p">):</span>
<span class=3D"gp">... </span>    <span class=3D"n">new_rank</span> <span c=
lass=3D"o">=3D</span> <span class=3D"nb">int</span><span class=3D"p">(</spa=
n><span class=3D"n">rank</span><span class=3D"o">.</span><span class=3D"n">=
text</span><span class=3D"p">)</span> <span class=3D"o">+</span> <span clas=
s=3D"mi">1</span>
<span class=3D"gp">... </span>    <span class=3D"n">rank</span><span class=
=3D"o">.</span><span class=3D"n">text</span> <span class=3D"o">=3D</span> <=
span class=3D"nb">str</span><span class=3D"p">(</span><span class=3D"n">new=
_rank</span><span class=3D"p">)</span>
<span class=3D"gp">... </span>    <span class=3D"n">rank</span><span class=
=3D"o">.</span><span class=3D"n">set</span><span class=3D"p">(</span><span =
class=3D"s1">'updated'</span><span class=3D"p">,</span> <span class=3D"s1">=
'yes'</span><span class=3D"p">)</span>
<span class=3D"gp">...</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">tree</span><span c=
lass=3D"o">.</span><span class=3D"n">write</span><span class=3D"p">(</span>=
<span class=3D"s1">'output.xml'</span><span class=3D"p">)</span>
</pre></div>
</div>
<p>Our XML now looks like this:</p>
<div class=3D"highlight-xml notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"cp">&lt;?xml version=3D"1.0"?&gt;</span>
<span class=3D"nt">&lt;data&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;country</span><span cla=
ss=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"Liecht=
enstein"</span><span class=3D"nt">&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;rank</span><span cl=
ass=3D"w"> </span><span class=3D"na">updated=3D</span><span class=3D"s">"ye=
s"</span><span class=3D"nt">&gt;</span>2<span class=3D"nt">&lt;/rank&gt;</s=
pan>
<span class=3D"w">        </span><span class=3D"nt">&lt;year&gt;</span>2008=
<span class=3D"nt">&lt;/year&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;gdppc&gt;</span>141=
100<span class=3D"nt">&lt;/gdppc&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;neighbor</span><spa=
n class=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"A=
ustria"</span><span class=3D"w"> </span><span class=3D"na">direction=3D</sp=
an><span class=3D"s">"E"</span><span class=3D"nt">/&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;neighbor</span><spa=
n class=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"S=
witzerland"</span><span class=3D"w"> </span><span class=3D"na">direction=3D=
</span><span class=3D"s">"W"</span><span class=3D"nt">/&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;/country&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;country</span><span cla=
ss=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"Singap=
ore"</span><span class=3D"nt">&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;rank</span><span cl=
ass=3D"w"> </span><span class=3D"na">updated=3D</span><span class=3D"s">"ye=
s"</span><span class=3D"nt">&gt;</span>5<span class=3D"nt">&lt;/rank&gt;</s=
pan>
<span class=3D"w">        </span><span class=3D"nt">&lt;year&gt;</span>2011=
<span class=3D"nt">&lt;/year&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;gdppc&gt;</span>599=
00<span class=3D"nt">&lt;/gdppc&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;neighbor</span><spa=
n class=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"M=
alaysia"</span><span class=3D"w"> </span><span class=3D"na">direction=3D</s=
pan><span class=3D"s">"N"</span><span class=3D"nt">/&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;/country&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;country</span><span cla=
ss=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"Panama=
"</span><span class=3D"nt">&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;rank</span><span cl=
ass=3D"w"> </span><span class=3D"na">updated=3D</span><span class=3D"s">"ye=
s"</span><span class=3D"nt">&gt;</span>69<span class=3D"nt">&lt;/rank&gt;</=
span>
<span class=3D"w">        </span><span class=3D"nt">&lt;year&gt;</span>2011=
<span class=3D"nt">&lt;/year&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;gdppc&gt;</span>136=
00<span class=3D"nt">&lt;/gdppc&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;neighbor</span><spa=
n class=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"C=
osta Rica"</span><span class=3D"w"> </span><span class=3D"na">direction=3D<=
/span><span class=3D"s">"W"</span><span class=3D"nt">/&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;neighbor</span><spa=
n class=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"C=
olombia"</span><span class=3D"w"> </span><span class=3D"na">direction=3D</s=
pan><span class=3D"s">"E"</span><span class=3D"nt">/&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;/country&gt;</span>
<span class=3D"nt">&lt;/data&gt;</span>
</pre></div>
</div>
<p>We can remove elements using <a class=3D"reference internal" href=3D"htt=
ps://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.Element=
Tree.Element.remove" title=3D"xml.etree.ElementTree.Element.remove"><code c=
lass=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">E=
lement.remove()</span></code></a>.  Let=E2=80=99s say we want to
remove all countries with a rank higher than 50:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" data-hidden=3D"false">&gt;&gt;&gt;</span><pre><span></span><=
span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"k">for</span> <span cl=
ass=3D"n">country</span> <span class=3D"ow">in</span> <span class=3D"n">roo=
t</span><span class=3D"o">.</span><span class=3D"n">findall</span><span cla=
ss=3D"p">(</span><span class=3D"s1">'country'</span><span class=3D"p">):</s=
pan>
<span class=3D"gp">... </span>    <span class=3D"c1"># using root.findall()=
 to avoid removal during traversal</span>
<span class=3D"gp">... </span>    <span class=3D"n">rank</span> <span class=
=3D"o">=3D</span> <span class=3D"nb">int</span><span class=3D"p">(</span><s=
pan class=3D"n">country</span><span class=3D"o">.</span><span class=3D"n">f=
ind</span><span class=3D"p">(</span><span class=3D"s1">'rank'</span><span c=
lass=3D"p">)</span><span class=3D"o">.</span><span class=3D"n">text</span><=
span class=3D"p">)</span>
<span class=3D"gp">... </span>    <span class=3D"k">if</span> <span class=
=3D"n">rank</span> <span class=3D"o">&gt;</span> <span class=3D"mi">50</spa=
n><span class=3D"p">:</span>
<span class=3D"gp">... </span>        <span class=3D"n">root</span><span cl=
ass=3D"o">.</span><span class=3D"n">remove</span><span class=3D"p">(</span>=
<span class=3D"n">country</span><span class=3D"p">)</span>
<span class=3D"gp">...</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">tree</span><span c=
lass=3D"o">.</span><span class=3D"n">write</span><span class=3D"p">(</span>=
<span class=3D"s1">'output.xml'</span><span class=3D"p">)</span>
</pre></div>
</div>
<p>Note that concurrent modification while iterating can lead to problems,
just like when iterating and modifying Python lists or dicts.
Therefore, the example first collects all matching elements with
<code class=3D"docutils literal notranslate"><span class=3D"pre">root.finda=
ll()</span></code>, and only then iterates over the list of matches.</p>
<p>Our XML now looks like this:</p>
<div class=3D"highlight-xml notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"cp">&lt;?xml version=3D"1.0"?&gt;</span>
<span class=3D"nt">&lt;data&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;country</span><span cla=
ss=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"Liecht=
enstein"</span><span class=3D"nt">&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;rank</span><span cl=
ass=3D"w"> </span><span class=3D"na">updated=3D</span><span class=3D"s">"ye=
s"</span><span class=3D"nt">&gt;</span>2<span class=3D"nt">&lt;/rank&gt;</s=
pan>
<span class=3D"w">        </span><span class=3D"nt">&lt;year&gt;</span>2008=
<span class=3D"nt">&lt;/year&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;gdppc&gt;</span>141=
100<span class=3D"nt">&lt;/gdppc&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;neighbor</span><spa=
n class=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"A=
ustria"</span><span class=3D"w"> </span><span class=3D"na">direction=3D</sp=
an><span class=3D"s">"E"</span><span class=3D"nt">/&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;neighbor</span><spa=
n class=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"S=
witzerland"</span><span class=3D"w"> </span><span class=3D"na">direction=3D=
</span><span class=3D"s">"W"</span><span class=3D"nt">/&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;/country&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;country</span><span cla=
ss=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"Singap=
ore"</span><span class=3D"nt">&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;rank</span><span cl=
ass=3D"w"> </span><span class=3D"na">updated=3D</span><span class=3D"s">"ye=
s"</span><span class=3D"nt">&gt;</span>5<span class=3D"nt">&lt;/rank&gt;</s=
pan>
<span class=3D"w">        </span><span class=3D"nt">&lt;year&gt;</span>2011=
<span class=3D"nt">&lt;/year&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;gdppc&gt;</span>599=
00<span class=3D"nt">&lt;/gdppc&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;neighbor</span><spa=
n class=3D"w"> </span><span class=3D"na">name=3D</span><span class=3D"s">"M=
alaysia"</span><span class=3D"w"> </span><span class=3D"na">direction=3D</s=
pan><span class=3D"s">"N"</span><span class=3D"nt">/&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;/country&gt;</span>
<span class=3D"nt">&lt;/data&gt;</span>
</pre></div>
</div>
</section>
<section id=3D"building-xml-documents">
<h3>Building XML documents<a class=3D"headerlink" href=3D"https://docs.pyth=
on.org/3/library/xml.etree.elementtree.html#building-xml-documents" title=
=3D"Link to this heading">=C2=B6</a></h3>
<p>The <a class=3D"reference internal" href=3D"https://docs.python.org/3/li=
brary/xml.etree.elementtree.html#xml.etree.ElementTree.SubElement" title=3D=
"xml.etree.ElementTree.SubElement"><code class=3D"xref py py-func docutils =
literal notranslate"><span class=3D"pre">SubElement()</span></code></a> fun=
ction also provides a convenient way to create new
sub-elements for a given element:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" data-hidden=3D"false">&gt;&gt;&gt;</span><pre><span></span><=
span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">a</span> <span clas=
s=3D"o">=3D</span> <span class=3D"n">ET</span><span class=3D"o">.</span><sp=
an class=3D"n">Element</span><span class=3D"p">(</span><span class=3D"s1">'=
a'</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">b</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"n">ET</span><span class=3D"o">.</span><s=
pan class=3D"n">SubElement</span><span class=3D"p">(</span><span class=3D"n=
">a</span><span class=3D"p">,</span> <span class=3D"s1">'b'</span><span cla=
ss=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">c</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"n">ET</span><span class=3D"o">.</span><s=
pan class=3D"n">SubElement</span><span class=3D"p">(</span><span class=3D"n=
">a</span><span class=3D"p">,</span> <span class=3D"s1">'c'</span><span cla=
ss=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">d</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"n">ET</span><span class=3D"o">.</span><s=
pan class=3D"n">SubElement</span><span class=3D"p">(</span><span class=3D"n=
">c</span><span class=3D"p">,</span> <span class=3D"s1">'d'</span><span cla=
ss=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">ET</span><span cla=
ss=3D"o">.</span><span class=3D"n">dump</span><span class=3D"p">(</span><sp=
an class=3D"n">a</span><span class=3D"p">)</span>
<span class=3D"go">&lt;a&gt;&lt;b /&gt;&lt;c&gt;&lt;d /&gt;&lt;/c&gt;&lt;/a=
&gt;</span>
</pre></div>
</div>
</section>
<section id=3D"parsing-xml-with-namespaces">
<h3>Parsing XML with Namespaces<a class=3D"headerlink" href=3D"https://docs=
.python.org/3/library/xml.etree.elementtree.html#parsing-xml-with-namespace=
s" title=3D"Link to this heading">=C2=B6</a></h3>
<p>If the XML input has <a class=3D"reference external" href=3D"https://en.=
wikipedia.org/wiki/XML_namespace">namespaces</a>, tags and attributes
with prefixes in the form <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">prefix:sometag</span></code> get expanded to
<code class=3D"docutils literal notranslate"><span class=3D"pre">{uri}somet=
ag</span></code> where the <em>prefix</em> is replaced by the full <em>URI<=
/em>.
Also, if there is a <a class=3D"reference external" href=3D"https://www.w3.=
org/TR/xml-names/#defaulting">default namespace</a>,
that full URI gets prepended to all of the non-prefixed tags.</p>
<p>Here is an XML example that incorporates two namespaces, one with the
prefix =E2=80=9Cfictional=E2=80=9D and the other serving as the default nam=
espace:</p>
<div class=3D"highlight-xml notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"cp">&lt;?xml version=3D"1.0"?&gt;</span>
<span class=3D"nt">&lt;actors</span><span class=3D"w"> </span><span class=
=3D"na">xmlns:fictional=3D</span><span class=3D"s">"http://characters.examp=
le.com"</span>
<span class=3D"w">        </span><span class=3D"na">xmlns=3D</span><span cl=
ass=3D"s">"http://people.example.com"</span><span class=3D"nt">&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;actor&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;name&gt;</span>John=
<span class=3D"w"> </span>Cleese<span class=3D"nt">&lt;/name&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;fictional:character=
&gt;</span>Lancelot<span class=3D"nt">&lt;/fictional:character&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;fictional:character=
&gt;</span>Archie<span class=3D"w"> </span>Leach<span class=3D"nt">&lt;/fic=
tional:character&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;/actor&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;actor&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;name&gt;</span>Eric=
<span class=3D"w"> </span>Idle<span class=3D"nt">&lt;/name&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;fictional:character=
&gt;</span>Sir<span class=3D"w"> </span>Robin<span class=3D"nt">&lt;/fictio=
nal:character&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;fictional:character=
&gt;</span>Gunther<span class=3D"nt">&lt;/fictional:character&gt;</span>
<span class=3D"w">        </span><span class=3D"nt">&lt;fictional:character=
&gt;</span>Commander<span class=3D"w"> </span>Clement<span class=3D"nt">&lt=
;/fictional:character&gt;</span>
<span class=3D"w">    </span><span class=3D"nt">&lt;/actor&gt;</span>
<span class=3D"nt">&lt;/actors&gt;</span>
</pre></div>
</div>
<p>One way to search and explore this XML example is to manually add the
URI to every tag or attribute in the xpath of a
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.Element.find" title=3D"xml.=
etree.ElementTree.Element.find"><code class=3D"xref py py-meth docutils lit=
eral notranslate"><span class=3D"pre">find()</span></code></a> or <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/library/xml.etree=
.elementtree.html#xml.etree.ElementTree.Element.findall" title=3D"xml.etree=
.ElementTree.Element.findall"><code class=3D"xref py py-meth docutils liter=
al notranslate"><span class=3D"pre">findall()</span></code></a>:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><pre><span></span><span class=3D"n">root</span> <s=
pan class=3D"o">=3D</span> <span class=3D"n">fromstring</span><span class=
=3D"p">(</span><span class=3D"n">xml_text</span><span class=3D"p">)</span>
<span class=3D"k">for</span> <span class=3D"n">actor</span> <span class=3D"=
ow">in</span> <span class=3D"n">root</span><span class=3D"o">.</span><span =
class=3D"n">findall</span><span class=3D"p">(</span><span class=3D"s1">'{ht=
tp://people.example.com}actor'</span><span class=3D"p">):</span>
    <span class=3D"n">name</span> <span class=3D"o">=3D</span> <span class=
=3D"n">actor</span><span class=3D"o">.</span><span class=3D"n">find</span><=
span class=3D"p">(</span><span class=3D"s1">'{http://people.example.com}nam=
e'</span><span class=3D"p">)</span>
    <span class=3D"nb">print</span><span class=3D"p">(</span><span class=3D=
"n">name</span><span class=3D"o">.</span><span class=3D"n">text</span><span=
 class=3D"p">)</span>
    <span class=3D"k">for</span> <span class=3D"n">char</span> <span class=
=3D"ow">in</span> <span class=3D"n">actor</span><span class=3D"o">.</span><=
span class=3D"n">findall</span><span class=3D"p">(</span><span class=3D"s1"=
>'{http://characters.example.com}character'</span><span class=3D"p">):</spa=
n>
        <span class=3D"nb">print</span><span class=3D"p">(</span><span clas=
s=3D"s1">' |--&gt;'</span><span class=3D"p">,</span> <span class=3D"n">char=
</span><span class=3D"o">.</span><span class=3D"n">text</span><span class=
=3D"p">)</span>
</pre></div>
</div>
<p>A better way to search the namespaced XML example is to create a
dictionary with your own prefixes and use those in the search functions:</p=
>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><pre><span></span><span class=3D"n">ns</span> <spa=
n class=3D"o">=3D</span> <span class=3D"p">{</span><span class=3D"s1">'real=
_person'</span><span class=3D"p">:</span> <span class=3D"s1">'http://people=
.example.com'</span><span class=3D"p">,</span>
      <span class=3D"s1">'role'</span><span class=3D"p">:</span> <span clas=
s=3D"s1">'http://characters.example.com'</span><span class=3D"p">}</span>

<span class=3D"k">for</span> <span class=3D"n">actor</span> <span class=3D"=
ow">in</span> <span class=3D"n">root</span><span class=3D"o">.</span><span =
class=3D"n">findall</span><span class=3D"p">(</span><span class=3D"s1">'rea=
l_person:actor'</span><span class=3D"p">,</span> <span class=3D"n">ns</span=
><span class=3D"p">):</span>
    <span class=3D"n">name</span> <span class=3D"o">=3D</span> <span class=
=3D"n">actor</span><span class=3D"o">.</span><span class=3D"n">find</span><=
span class=3D"p">(</span><span class=3D"s1">'real_person:name'</span><span =
class=3D"p">,</span> <span class=3D"n">ns</span><span class=3D"p">)</span>
    <span class=3D"nb">print</span><span class=3D"p">(</span><span class=3D=
"n">name</span><span class=3D"o">.</span><span class=3D"n">text</span><span=
 class=3D"p">)</span>
    <span class=3D"k">for</span> <span class=3D"n">char</span> <span class=
=3D"ow">in</span> <span class=3D"n">actor</span><span class=3D"o">.</span><=
span class=3D"n">findall</span><span class=3D"p">(</span><span class=3D"s1"=
>'role:character'</span><span class=3D"p">,</span> <span class=3D"n">ns</sp=
an><span class=3D"p">):</span>
        <span class=3D"nb">print</span><span class=3D"p">(</span><span clas=
s=3D"s1">' |--&gt;'</span><span class=3D"p">,</span> <span class=3D"n">char=
</span><span class=3D"o">.</span><span class=3D"n">text</span><span class=
=3D"p">)</span>
</pre></div>
</div>
<p>These two approaches both output:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><pre><span></span><span class=3D"n">John</span> <s=
pan class=3D"n">Cleese</span>
 <span class=3D"o">|--&gt;</span> <span class=3D"n">Lancelot</span>
 <span class=3D"o">|--&gt;</span> <span class=3D"n">Archie</span> <span cla=
ss=3D"n">Leach</span>
<span class=3D"n">Eric</span> <span class=3D"n">Idle</span>
 <span class=3D"o">|--&gt;</span> <span class=3D"n">Sir</span> <span class=
=3D"n">Robin</span>
 <span class=3D"o">|--&gt;</span> <span class=3D"n">Gunther</span>
 <span class=3D"o">|--&gt;</span> <span class=3D"n">Commander</span> <span =
class=3D"n">Clement</span>
</pre></div>
</div>
</section>
</section>
<section id=3D"xpath-support">
<span id=3D"elementtree-xpath"></span><h2>XPath support<a class=3D"headerli=
nk" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xp=
ath-support" title=3D"Link to this heading">=C2=B6</a></h2>
<p>This module provides limited support for
<a class=3D"reference external" href=3D"https://www.w3.org/TR/xpath">XPath =
expressions</a> for locating elements in a
tree.  The goal is to support a small subset of the abbreviated syntax; a f=
ull
XPath engine is outside the scope of the module.</p>
<section id=3D"example">
<h3>Example<a class=3D"headerlink" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#example" title=3D"Link to this heading">=C2=B6=
</a></h3>
<p>Here=E2=80=99s an example that demonstrates some of the XPath capabiliti=
es of the
module.  We=E2=80=99ll be using the <code class=3D"docutils literal notrans=
late"><span class=3D"pre">countrydata</span></code> XML document from the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#elementtree-parsing-xml"><span class=3D"std std-r=
ef">Parsing XML</span></a> section:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">xml.etree.ElementTree</span> <span class=3D"k">as</span=
> <span class=3D"nn">ET</span>

<span class=3D"n">root</span> <span class=3D"o">=3D</span> <span class=3D"n=
">ET</span><span class=3D"o">.</span><span class=3D"n">fromstring</span><sp=
an class=3D"p">(</span><span class=3D"n">countrydata</span><span class=3D"p=
">)</span>

<span class=3D"c1"># Top-level elements</span>
<span class=3D"n">root</span><span class=3D"o">.</span><span class=3D"n">fi=
ndall</span><span class=3D"p">(</span><span class=3D"s2">"."</span><span cl=
ass=3D"p">)</span>

<span class=3D"c1"># All 'neighbor' grand-children of 'country' children of=
 the top-level</span>
<span class=3D"c1"># elements</span>
<span class=3D"n">root</span><span class=3D"o">.</span><span class=3D"n">fi=
ndall</span><span class=3D"p">(</span><span class=3D"s2">"./country/neighbo=
r"</span><span class=3D"p">)</span>

<span class=3D"c1"># Nodes with name=3D'Singapore' that have a 'year' child=
</span>
<span class=3D"n">root</span><span class=3D"o">.</span><span class=3D"n">fi=
ndall</span><span class=3D"p">(</span><span class=3D"s2">".//year/..[@name=
=3D'Singapore']"</span><span class=3D"p">)</span>

<span class=3D"c1"># 'year' nodes that are children of nodes with name=3D'S=
ingapore'</span>
<span class=3D"n">root</span><span class=3D"o">.</span><span class=3D"n">fi=
ndall</span><span class=3D"p">(</span><span class=3D"s2">".//*[@name=3D'Sin=
gapore']/year"</span><span class=3D"p">)</span>

<span class=3D"c1"># All 'neighbor' nodes that are the second child of thei=
r parent</span>
<span class=3D"n">root</span><span class=3D"o">.</span><span class=3D"n">fi=
ndall</span><span class=3D"p">(</span><span class=3D"s2">".//neighbor[2]"</=
span><span class=3D"p">)</span>
</pre></div>
</div>
<p>For XML with namespaces, use the usual qualified <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">{namespace}tag</span></code> nota=
tion:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><pre><span></span><span class=3D"c1"># All dublin-=
core "title" tags in the document</span>
<span class=3D"n">root</span><span class=3D"o">.</span><span class=3D"n">fi=
ndall</span><span class=3D"p">(</span><span class=3D"s2">".//{http://purl.o=
rg/dc/elements/1.1/}title"</span><span class=3D"p">)</span>
</pre></div>
</div>
</section>
<section id=3D"supported-xpath-syntax">
<h3>Supported XPath syntax<a class=3D"headerlink" href=3D"https://docs.pyth=
on.org/3/library/xml.etree.elementtree.html#supported-xpath-syntax" title=
=3D"Link to this heading">=C2=B6</a></h3>
<div class=3D"responsive-table__container"><table class=3D"docutils align-d=
efault">
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Syntax</p></th>
<th class=3D"head"><p>Meaning</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">tag</span></code></p></td>
<td><p>Selects all child elements with the given tag.
For example, <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">spam</span></code> selects all child elements
named <code class=3D"docutils literal notranslate"><span class=3D"pre">spam=
</span></code>, and <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">spam/egg</span></code> selects all
grandchildren named <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">egg</span></code> in all children named
<code class=3D"docutils literal notranslate"><span class=3D"pre">spam</span=
></code>.  <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>{namespace}*</span></code> selects all tags in the
given namespace, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">{*}spam</span></code> selects tags named
<code class=3D"docutils literal notranslate"><span class=3D"pre">spam</span=
></code> in any (or no) namespace, and <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">{}*</span></code>
only selects tags that are not in a namespace.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.8: </span>S=
upport for star-wildcards was added.</p>
</div>
</td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">*</span></code></p></td>
<td><p>Selects all child elements, including comments and
processing instructions.  For example, <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">*/egg</span></code>
selects all grandchildren named <code class=3D"docutils literal notranslate=
"><span class=3D"pre">egg</span></code>.</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">.</span></code></p></td>
<td><p>Selects the current node.  This is mostly useful
at the beginning of the path, to indicate that it=E2=80=99s
a relative path.</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">//</span></code></p></td>
<td><p>Selects all subelements, on all levels beneath the
current  element.  For example, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">.//egg</span></code> selects
all <code class=3D"docutils literal notranslate"><span class=3D"pre">egg</s=
pan></code> elements in the entire tree.</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">..</span></code></p></td>
<td><p>Selects the parent element.  Returns <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">None</span></code> if the
path attempts to reach the ancestors of the start
element (the element <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">find</span></code> was called on).</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">[@attrib]</span></code></p></td>
<td><p>Selects all elements that have the given attribute.</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">[@attrib=3D'value']</span></code></p></td>
<td><p>Selects all elements for which the given attribute
has the given value.  The value cannot contain
quotes.</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">[@attrib!=3D'value']</span></code></p></td>
<td><p>Selects all elements for which the given attribute
does not have the given value. The value cannot
contain quotes.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.10.</span></p>
</div>
</td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">[tag]</span></code></p></td>
<td><p>Selects all elements that have a child named
<code class=3D"docutils literal notranslate"><span class=3D"pre">tag</span>=
</code>.  Only immediate children are supported.</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">[.=3D'text']</span></code></p></td>
<td><p>Selects all elements whose complete text content,
including descendants, equals the given <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">text</span></code>.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.7.</span></p>
</div>
</td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">[.!=3D'text']</span></code></p></td>
<td><p>Selects all elements whose complete text content,
including descendants, does not equal the given
<code class=3D"docutils literal notranslate"><span class=3D"pre">text</span=
></code>.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.10.</span></p>
</div>
</td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">[tag=3D'text']</span></code></p></td>
<td><p>Selects all elements that have a child named
<code class=3D"docutils literal notranslate"><span class=3D"pre">tag</span>=
</code> whose complete text content, including
descendants, equals the given <code class=3D"docutils literal notranslate">=
<span class=3D"pre">text</span></code>.</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">[tag!=3D'text']</span></code></p></td>
<td><p>Selects all elements that have a child named
<code class=3D"docutils literal notranslate"><span class=3D"pre">tag</span>=
</code> whose complete text content, including
descendants, does not equal the given <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">text</span></code>.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.10.</span></p>
</div>
</td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">[position]</span></code></p></td>
<td><p>Selects all elements that are located at the given
position.  The position can be either an integer
(1 is the first position), the expression <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">last()</span></code>
(for the last position), or a position relative to
the last position (e.g. <code class=3D"docutils literal notranslate"><span =
class=3D"pre">last()-1</span></code>).</p></td>
</tr>
</tbody>
</table></div>
<p>Predicates (expressions within square brackets) must be preceded by a ta=
g
name, an asterisk, or another predicate.  <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">position</span></code> predicates must be
preceded by a tag name.</p>
</section>
</section>
<section id=3D"reference">
<h2>Reference<a class=3D"headerlink" href=3D"https://docs.python.org/3/libr=
ary/xml.etree.elementtree.html#reference" title=3D"Link to this heading">=
=C2=B6</a></h2>
<section id=3D"functions">
<span id=3D"elementtree-functions"></span><h3>Functions<a class=3D"headerli=
nk" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#fu=
nctions" title=3D"Link to this heading">=C2=B6</a></h3>
<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.canonicalize">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">canonicalize</span></span><span class=3D"sig-paren">(</span><em class=3D"=
sig-param"><span class=3D"n"><span class=3D"pre">xml_data</span></span><spa=
n class=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"default_v=
alue"><span class=3D"pre">None</span></span></em>, <em class=3D"sig-param">=
<span class=3D"o"><span class=3D"pre">*</span></span></em>, <em class=3D"si=
g-param"><span class=3D"n"><span class=3D"pre">out</span></span><span class=
=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"default_value"><=
span class=3D"pre">None</span></span></em>, <em class=3D"sig-param"><span c=
lass=3D"n"><span class=3D"pre">from_file</span></span><span class=3D"o"><sp=
an class=3D"pre">=3D</span></span><span class=3D"default_value"><span class=
=3D"pre">None</span></span></em>, <em class=3D"sig-param"><span class=3D"o"=
><span class=3D"pre">**</span></span><span class=3D"n"><span class=3D"pre">=
options</span></span></em><span class=3D"sig-paren">)</span><a class=3D"hea=
derlink" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.ht=
ml#xml.etree.ElementTree.canonicalize" title=3D"Link to this definition">=
=C2=B6</a></dt>
<dd><p><a class=3D"reference external" href=3D"https://www.w3.org/TR/xml-c1=
4n2/">C14N 2.0</a> transformation function.</p>
<p>Canonicalization is a way to normalise XML output in a way that allows
byte-by-byte comparisons and digital signatures.  It reduced the freedom
that XML serializers have and instead generates a more constrained XML
representation.  The main restrictions regard the placement of namespace
declarations, the ordering of attributes, and ignorable whitespace.</p>
<p>This function takes an XML data string (<em>xml_data</em>) or a file pat=
h or
file-like object (<em>from_file</em>) as input, converts it to the canonica=
l
form, and writes it out using the <em>out</em> file(-like) object, if provi=
ded,
or returns it as a text string if not.  The output file receives text,
not bytes.  It should therefore be opened in text mode with <code class=3D"=
docutils literal notranslate"><span class=3D"pre">utf-8</span></code>
encoding.</p>
<p>Typical uses:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><pre><span></span><span class=3D"n">xml_data</span=
> <span class=3D"o">=3D</span> <span class=3D"s2">"&lt;root&gt;...&lt;/root=
&gt;"</span>
<span class=3D"nb">print</span><span class=3D"p">(</span><span class=3D"n">=
canonicalize</span><span class=3D"p">(</span><span class=3D"n">xml_data</sp=
an><span class=3D"p">))</span>

<span class=3D"k">with</span> <span class=3D"nb">open</span><span class=3D"=
p">(</span><span class=3D"s2">"c14n_output.xml"</span><span class=3D"p">,</=
span> <span class=3D"n">mode</span><span class=3D"o">=3D</span><span class=
=3D"s1">'w'</span><span class=3D"p">,</span> <span class=3D"n">encoding</sp=
an><span class=3D"o">=3D</span><span class=3D"s1">'utf-8'</span><span class=
=3D"p">)</span> <span class=3D"k">as</span> <span class=3D"n">out_file</spa=
n><span class=3D"p">:</span>
    <span class=3D"n">canonicalize</span><span class=3D"p">(</span><span cl=
ass=3D"n">xml_data</span><span class=3D"p">,</span> <span class=3D"n">out</=
span><span class=3D"o">=3D</span><span class=3D"n">out_file</span><span cla=
ss=3D"p">)</span>

<span class=3D"k">with</span> <span class=3D"nb">open</span><span class=3D"=
p">(</span><span class=3D"s2">"c14n_output.xml"</span><span class=3D"p">,</=
span> <span class=3D"n">mode</span><span class=3D"o">=3D</span><span class=
=3D"s1">'w'</span><span class=3D"p">,</span> <span class=3D"n">encoding</sp=
an><span class=3D"o">=3D</span><span class=3D"s1">'utf-8'</span><span class=
=3D"p">)</span> <span class=3D"k">as</span> <span class=3D"n">out_file</spa=
n><span class=3D"p">:</span>
    <span class=3D"n">canonicalize</span><span class=3D"p">(</span><span cl=
ass=3D"n">from_file</span><span class=3D"o">=3D</span><span class=3D"s2">"i=
nputfile.xml"</span><span class=3D"p">,</span> <span class=3D"n">out</span>=
<span class=3D"o">=3D</span><span class=3D"n">out_file</span><span class=3D=
"p">)</span>
</pre></div>
</div>
<p>The configuration <em>options</em> are as follows:</p>
<ul class=3D"simple">
<li><p><em>with_comments</em>: set to true to include comments (default: fa=
lse)</p></li>
<li><dl class=3D"simple">
<dt><em>strip_text</em>: set to true to strip whitespace before and after t=
ext content</dt><dd><p>(default: false)</p>
</dd>
</dl>
</li>
<li><dl class=3D"simple">
<dt><em>rewrite_prefixes</em>: set to true to replace namespace prefixes by=
 =E2=80=9Cn{number}=E2=80=9D</dt><dd><p>(default: false)</p>
</dd>
</dl>
</li>
<li><dl class=3D"simple">
<dt><em>qname_aware_tags</em>: a set of qname aware tag names in which pref=
ixes</dt><dd><p>should be replaced in text content (default: empty)</p>
</dd>
</dl>
</li>
<li><dl class=3D"simple">
<dt><em>qname_aware_attrs</em>: a set of qname aware attribute names in whi=
ch prefixes</dt><dd><p>should be replaced in text content (default: empty)<=
/p>
</dd>
</dl>
</li>
<li><p><em>exclude_attrs</em>: a set of attribute names that should not be =
serialised</p></li>
<li><p><em>exclude_tags</em>: a set of tag names that should not be seriali=
sed</p></li>
</ul>
<p>In the option list above, =E2=80=9Ca set=E2=80=9D refers to any collecti=
on or iterable of
strings, no ordering is expected.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Comment">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">Comment</span></span><span class=3D"sig-paren">(</span><em class=3D"sig-p=
aram"><span class=3D"n"><span class=3D"pre">text</span></span><span class=
=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"default_value"><=
span class=3D"pre">None</span></span></em><span class=3D"sig-paren">)</span=
><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etre=
e.elementtree.html#xml.etree.ElementTree.Comment" title=3D"Link to this def=
inition">=C2=B6</a></dt>
<dd><p>Comment element factory.  This factory function creates a special el=
ement
that will be serialized as an XML comment by the standard serializer.  The
comment string can be either a bytestring or a Unicode string.  <em>text</e=
m> is a
string containing the comment string.  Returns an element instance
representing a comment.</p>
<p>Note that <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser" tit=
le=3D"xml.etree.ElementTree.XMLParser"><code class=3D"xref py py-class docu=
tils literal notranslate"><span class=3D"pre">XMLParser</span></code></a> s=
kips over comments in the input
instead of creating comment objects for them. An <a class=3D"reference inte=
rnal" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#=
xml.etree.ElementTree.ElementTree" title=3D"xml.etree.ElementTree.ElementTr=
ee"><code class=3D"xref py py-class docutils literal notranslate"><span cla=
ss=3D"pre">ElementTree</span></code></a> will
only contain comment nodes if they have been inserted into to
the tree using one of the <a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.E=
lement" title=3D"xml.etree.ElementTree.Element"><code class=3D"xref py py-c=
lass docutils literal notranslate"><span class=3D"pre">Element</span></code=
></a> methods.</p>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.dump">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">dump</span></span><span class=3D"sig-paren">(</span><em class=3D"sig-para=
m"><span class=3D"n"><span class=3D"pre">elem</span></span></em><span class=
=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.=
org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.dump" title=
=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Writes an element tree or element structure to sys.stdout.  This fun=
ction
should be used for debugging only.</p>
<p>The exact output format is implementation dependent.  In this version, i=
t=E2=80=99s
written as an ordinary XML file.</p>
<p><em>elem</em> is an element tree or an individual element.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.8: </span>T=
he <a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#xml.etree.ElementTree.dump" title=3D"xml.etree=
.ElementTree.dump"><code class=3D"xref py py-func docutils literal notransl=
ate"><span class=3D"pre">dump()</span></code></a> function now preserves th=
e attribute order specified
by the user.</p>
</div>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.fromstring">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">fromstring</span></span><span class=3D"sig-paren">(</span><em class=3D"si=
g-param"><span class=3D"n"><span class=3D"pre">text</span></span></em>, <em=
 class=3D"sig-param"><span class=3D"n"><span class=3D"pre">parser</span></s=
pan><span class=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"d=
efault_value"><span class=3D"pre">None</span></span></em><span class=3D"sig=
-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/l=
ibrary/xml.etree.elementtree.html#xml.etree.ElementTree.fromstring" title=
=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Parses an XML section from a string constant.  Same as <a class=3D"r=
eference internal" href=3D"https://docs.python.org/3/library/xml.etree.elem=
enttree.html#xml.etree.ElementTree.XML" title=3D"xml.etree.ElementTree.XML"=
><code class=3D"xref py py-func docutils literal notranslate"><span class=
=3D"pre">XML()</span></code></a>.  <em>text</em>
is a string containing XML data.  <em>parser</em> is an optional parser ins=
tance.
If not given, the standard <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.=
XMLParser" title=3D"xml.etree.ElementTree.XMLParser"><code class=3D"xref py=
 py-class docutils literal notranslate"><span class=3D"pre">XMLParser</span=
></code></a> parser is used.
Returns an <a class=3D"reference internal" href=3D"https://docs.python.org/=
3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element" title=
=3D"xml.etree.ElementTree.Element"><code class=3D"xref py py-class docutils=
 literal notranslate"><span class=3D"pre">Element</span></code></a> instanc=
e.</p>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.fromstringlist"=
>
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">fromstringlist</span></span><span class=3D"sig-paren">(</span><em class=
=3D"sig-param"><span class=3D"n"><span class=3D"pre">sequence</span></span>=
</em>, <em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">parser=
</span></span><span class=3D"o"><span class=3D"pre">=3D</span></span><span =
class=3D"default_value"><span class=3D"pre">None</span></span></em><span cl=
ass=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.pyth=
on.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.fromstrin=
glist" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Parses an XML document from a sequence of string fragments.  <em>seq=
uence</em> is a
list or other sequence containing XML data fragments.  <em>parser</em> is a=
n
optional parser instance.  If not given, the standard <a class=3D"reference=
 internal" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.=
html#xml.etree.ElementTree.XMLParser" title=3D"xml.etree.ElementTree.XMLPar=
ser"><code class=3D"xref py py-class docutils literal notranslate"><span cl=
ass=3D"pre">XMLParser</span></code></a>
parser is used.  Returns an <a class=3D"reference internal" href=3D"https:/=
/docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree=
.Element" title=3D"xml.etree.ElementTree.Element"><code class=3D"xref py py=
-class docutils literal notranslate"><span class=3D"pre">Element</span></co=
de></a> instance.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.indent">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">indent</span></span><span class=3D"sig-paren">(</span><em class=3D"sig-pa=
ram"><span class=3D"n"><span class=3D"pre">tree</span></span></em>, <em cla=
ss=3D"sig-param"><span class=3D"n"><span class=3D"pre">space</span></span><=
span class=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"defaul=
t_value"><span class=3D"pre">'</span>&nbsp; <span class=3D"pre">'</span></s=
pan></em>, <em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">le=
vel</span></span><span class=3D"o"><span class=3D"pre">=3D</span></span><sp=
an class=3D"default_value"><span class=3D"pre">0</span></span></em><span cl=
ass=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.pyth=
on.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.indent" t=
itle=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Appends whitespace to the subtree to indent the tree visually.
This can be used to generate pretty-printed XML output.
<em>tree</em> can be an Element or ElementTree.  <em>space</em> is the whit=
espace
string that will be inserted for each indentation level, two space
characters by default.  For indenting partial subtrees inside of an
already indented tree, pass the initial indentation level as <em>level</em>=
.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.9.</span></p>
</div>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.iselement">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">iselement</span></span><span class=3D"sig-paren">(</span><em class=3D"sig=
-param"><span class=3D"n"><span class=3D"pre">element</span></span></em><sp=
an class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs=
.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.isel=
ement" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Check if an object appears to be a valid element object.  <em>elemen=
t</em> is an
element instance.  Return <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">True</span></code> if this is an element object.</p>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.iterparse">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">iterparse</span></span><span class=3D"sig-paren">(</span><em class=3D"sig=
-param"><span class=3D"n"><span class=3D"pre">source</span></span></em>, <e=
m class=3D"sig-param"><span class=3D"n"><span class=3D"pre">events</span></=
span><span class=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"=
default_value"><span class=3D"pre">None</span></span></em>, <em class=3D"si=
g-param"><span class=3D"n"><span class=3D"pre">parser</span></span><span cl=
ass=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"default_value=
"><span class=3D"pre">None</span></span></em><span class=3D"sig-paren">)</s=
pan><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.e=
tree.elementtree.html#xml.etree.ElementTree.iterparse" title=3D"Link to thi=
s definition">=C2=B6</a></dt>
<dd><p>Parses an XML section into an element tree incrementally, and report=
s what=E2=80=99s
going on to the user.  <em>source</em> is a filename or <a class=3D"referen=
ce internal" href=3D"https://docs.python.org/3/glossary.html#term-file-obje=
ct"><span class=3D"xref std std-term">file object</span></a>
containing XML data.  <em>events</em> is a sequence of events to report bac=
k.  The
supported events are the strings <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">"start"</span></code>, <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">"end"</span></code>, <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">"comment"</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">"pi"</span=
></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">=
"start-ns"</span></code> and <code class=3D"docutils literal notranslate"><=
span class=3D"pre">"end-ns"</span></code>
(the =E2=80=9Cns=E2=80=9D events are used to get detailed namespace
information).  If <em>events</em> is omitted, only <code class=3D"docutils =
literal notranslate"><span class=3D"pre">"end"</span></code> events are rep=
orted.
<em>parser</em> is an optional parser instance.  If not given, the standard
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.XMLParser" title=3D"xml.etr=
ee.ElementTree.XMLParser"><code class=3D"xref py py-class docutils literal =
notranslate"><span class=3D"pre">XMLParser</span></code></a> parser is used=
.  <em>parser</em> must be a subclass of
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.XMLParser" title=3D"xml.etr=
ee.ElementTree.XMLParser"><code class=3D"xref py py-class docutils literal =
notranslate"><span class=3D"pre">XMLParser</span></code></a> and can only u=
se the default <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder"=
 title=3D"xml.etree.ElementTree.TreeBuilder"><code class=3D"xref py py-clas=
s docutils literal notranslate"><span class=3D"pre">TreeBuilder</span></cod=
e></a> as a
target. Returns an <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/glossary.html#term-iterator"><span class=3D"xref std std-term">it=
erator</span></a> providing <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">(event,</span> <span class=3D"pre">elem)</span></code> pa=
irs;
it has a <code class=3D"docutils literal notranslate"><span class=3D"pre">r=
oot</span></code> attribute that references the root element of the
resulting XML tree once <em>source</em> is fully read.</p>
<p>Note that while <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.iterpars=
e" title=3D"xml.etree.ElementTree.iterparse"><code class=3D"xref py py-func=
 docutils literal notranslate"><span class=3D"pre">iterparse()</span></code=
></a> builds the tree incrementally, it issues
blocking reads on <em>source</em> (or the file it names).  As such, it=E2=
=80=99s unsuitable
for applications where blocking reads can=E2=80=99t be made.  For fully non=
-blocking
parsing, see <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLPullParser"=
 title=3D"xml.etree.ElementTree.XMLPullParser"><code class=3D"xref py py-cl=
ass docutils literal notranslate"><span class=3D"pre">XMLPullParser</span><=
/code></a>.</p>
<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p><a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#xml.etree.ElementTree.iterparse" title=3D"xml.=
etree.ElementTree.iterparse"><code class=3D"xref py py-func docutils litera=
l notranslate"><span class=3D"pre">iterparse()</span></code></a> only guara=
ntees that it has seen the =E2=80=9C&gt;=E2=80=9D character of a
starting tag when it emits a =E2=80=9Cstart=E2=80=9D event, so the attribut=
es are defined,
but the contents of the text and tail attributes are undefined at that
point.  The same applies to the element children; they may or may not be
present.</p>
<p>If you need a fully populated element, look for =E2=80=9Cend=E2=80=9D ev=
ents instead.</p>
</div>
<div class=3D"deprecated">
<p><span class=3D"versionmodified deprecated">Deprecated since version 3.4:=
 </span>The <em>parser</em> argument.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.8: </span>T=
he <code class=3D"docutils literal notranslate"><span class=3D"pre">comment=
</span></code> and <code class=3D"docutils literal notranslate"><span class=
=3D"pre">pi</span></code> events were added.</p>
</div>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.parse">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">parse</span></span><span class=3D"sig-paren">(</span><em class=3D"sig-par=
am"><span class=3D"n"><span class=3D"pre">source</span></span></em>, <em cl=
ass=3D"sig-param"><span class=3D"n"><span class=3D"pre">parser</span></span=
><span class=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"defa=
ult_value"><span class=3D"pre">None</span></span></em><span class=3D"sig-pa=
ren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/libr=
ary/xml.etree.elementtree.html#xml.etree.ElementTree.parse" title=3D"Link t=
o this definition">=C2=B6</a></dt>
<dd><p>Parses an XML section into an element tree.  <em>source</em> is a fi=
lename or file
object containing XML data.  <em>parser</em> is an optional parser instance=
.  If
not given, the standard <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML=
Parser" title=3D"xml.etree.ElementTree.XMLParser"><code class=3D"xref py py=
-class docutils literal notranslate"><span class=3D"pre">XMLParser</span></=
code></a> parser is used.  Returns an
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.ElementTree" title=3D"xml.e=
tree.ElementTree.ElementTree"><code class=3D"xref py py-class docutils lite=
ral notranslate"><span class=3D"pre">ElementTree</span></code></a> instance=
.</p>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.ProcessingInstr=
uction">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">ProcessingInstruction</span></span><span class=3D"sig-paren">(</span><em =
class=3D"sig-param"><span class=3D"n"><span class=3D"pre">target</span></sp=
an></em>, <em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">tex=
t</span></span><span class=3D"o"><span class=3D"pre">=3D</span></span><span=
 class=3D"default_value"><span class=3D"pre">None</span></span></em><span c=
lass=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.pyt=
hon.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Processi=
ngInstruction" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>PI element factory.  This factory function creates a special element=
 that
will be serialized as an XML processing instruction.  <em>target</em> is a =
string
containing the PI target.  <em>text</em> is a string containing the PI cont=
ents, if
given.  Returns an element instance, representing a processing instruction.=
</p>
<p>Note that <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser" tit=
le=3D"xml.etree.ElementTree.XMLParser"><code class=3D"xref py py-class docu=
tils literal notranslate"><span class=3D"pre">XMLParser</span></code></a> s=
kips over processing instructions
in the input instead of creating PI objects for them. An
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.ElementTree" title=3D"xml.e=
tree.ElementTree.ElementTree"><code class=3D"xref py py-class docutils lite=
ral notranslate"><span class=3D"pre">ElementTree</span></code></a> will onl=
y contain processing instruction nodes if
they have been inserted into to the tree using one of the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.Element" title=3D"xml.etree=
.ElementTree.Element"><code class=3D"xref py py-class docutils literal notr=
anslate"><span class=3D"pre">Element</span></code></a> methods.</p>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.register_namesp=
ace">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">register_namespace</span></span><span class=3D"sig-paren">(</span><em cla=
ss=3D"sig-param"><span class=3D"n"><span class=3D"pre">prefix</span></span>=
</em>, <em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">uri</s=
pan></span></em><span class=3D"sig-paren">)</span><a class=3D"headerlink" h=
ref=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etr=
ee.ElementTree.register_namespace" title=3D"Link to this definition">=C2=B6=
</a></dt>
<dd><p>Registers a namespace prefix.  The registry is global, and any exist=
ing
mapping for either the given prefix or the namespace URI will be removed.
<em>prefix</em> is a namespace prefix.  <em>uri</em> is a namespace uri.  T=
ags and
attributes in this namespace will be serialized with the given prefix, if a=
t
all possible.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.SubElement">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">SubElement</span></span><span class=3D"sig-paren">(</span><em class=3D"si=
g-param"><span class=3D"n"><span class=3D"pre">parent</span></span></em>, <=
em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">tag</span></sp=
an></em>, <em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">att=
rib</span></span><span class=3D"o"><span class=3D"pre">=3D</span></span><sp=
an class=3D"default_value"><span class=3D"pre">{}</span></span></em>, <em c=
lass=3D"sig-param"><span class=3D"o"><span class=3D"pre">**</span></span><s=
pan class=3D"n"><span class=3D"pre">extra</span></span></em><span class=3D"=
sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/=
3/library/xml.etree.elementtree.html#xml.etree.ElementTree.SubElement" titl=
e=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Subelement factory.  This function creates an element instance, and =
appends
it to an existing element.</p>
<p>The element name, attribute names, and attribute values can be either
bytestrings or Unicode strings.  <em>parent</em> is the parent element.  <e=
m>tag</em> is
the subelement name.  <em>attrib</em> is an optional dictionary, containing=
 element
attributes.  <em>extra</em> contains additional attributes, given as keywor=
d
arguments.  Returns an element instance.</p>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.tostring">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">tostring</span></span><span class=3D"sig-paren">(</span><em class=3D"sig-=
param"><span class=3D"n"><span class=3D"pre">element</span></span></em>, <e=
m class=3D"sig-param"><span class=3D"n"><span class=3D"pre">encoding</span>=
</span><span class=3D"o"><span class=3D"pre">=3D</span></span><span class=
=3D"default_value"><span class=3D"pre">'us-ascii'</span></span></em>, <em c=
lass=3D"sig-param"><span class=3D"n"><span class=3D"pre">method</span></spa=
n><span class=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"def=
ault_value"><span class=3D"pre">'xml'</span></span></em>, <em class=3D"sig-=
param"><span class=3D"o"><span class=3D"pre">*</span></span></em>, <em clas=
s=3D"sig-param"><span class=3D"n"><span class=3D"pre">xml_declaration</span=
></span><span class=3D"o"><span class=3D"pre">=3D</span></span><span class=
=3D"default_value"><span class=3D"pre">None</span></span></em>, <em class=
=3D"sig-param"><span class=3D"n"><span class=3D"pre">default_namespace</spa=
n></span><span class=3D"o"><span class=3D"pre">=3D</span></span><span class=
=3D"default_value"><span class=3D"pre">None</span></span></em>, <em class=
=3D"sig-param"><span class=3D"n"><span class=3D"pre">short_empty_elements</=
span></span><span class=3D"o"><span class=3D"pre">=3D</span></span><span cl=
ass=3D"default_value"><span class=3D"pre">True</span></span></em><span clas=
s=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python=
.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring" t=
itle=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Generates a string representation of an XML element, including all
subelements.  <em>element</em> is an <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.=
ElementTree.Element" title=3D"xml.etree.ElementTree.Element"><code class=3D=
"xref py py-class docutils literal notranslate"><span class=3D"pre">Element=
</span></code></a> instance.  <em>encoding</em> <a class=3D"footnote-refere=
nce brackets" href=3D"https://docs.python.org/3/library/xml.etree.elementtr=
ee.html#id9" id=3D"id1" role=3D"doc-noteref"><span class=3D"fn-bracket">[</=
span>1<span class=3D"fn-bracket">]</span></a> is
the output encoding (default is US-ASCII).  Use <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">encoding=3D"unicode"</span></code> to
generate a Unicode string (otherwise, a bytestring is generated).  <em>meth=
od</em>
is either <code class=3D"docutils literal notranslate"><span class=3D"pre">=
"xml"</span></code>, <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">"html"</span></code> or <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">"text"</span></code> (default is <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">"xml"</span></code>).
<em>xml_declaration</em>, <em>default_namespace</em> and <em>short_empty_el=
ements</em> has the same
meaning as in <a class=3D"reference internal" href=3D"https://docs.python.o=
rg/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.w=
rite" title=3D"xml.etree.ElementTree.ElementTree.write"><code class=3D"xref=
 py py-meth docutils literal notranslate"><span class=3D"pre">ElementTree.w=
rite()</span></code></a>. Returns an (optionally) encoded string
containing the XML data.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.4: </span>A=
dded the <em>short_empty_elements</em> parameter.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.8: </span>A=
dded the <em>xml_declaration</em> and <em>default_namespace</em> parameters=
.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.8: </span>T=
he <a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#xml.etree.ElementTree.tostring" title=3D"xml.e=
tree.ElementTree.tostring"><code class=3D"xref py py-func docutils literal =
notranslate"><span class=3D"pre">tostring()</span></code></a> function now =
preserves the attribute order
specified by the user.</p>
</div>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.tostringlist">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">tostringlist</span></span><span class=3D"sig-paren">(</span><em class=3D"=
sig-param"><span class=3D"n"><span class=3D"pre">element</span></span></em>=
, <em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">encoding</s=
pan></span><span class=3D"o"><span class=3D"pre">=3D</span></span><span cla=
ss=3D"default_value"><span class=3D"pre">'us-ascii'</span></span></em>, <em=
 class=3D"sig-param"><span class=3D"n"><span class=3D"pre">method</span></s=
pan><span class=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"d=
efault_value"><span class=3D"pre">'xml'</span></span></em>, <em class=3D"si=
g-param"><span class=3D"o"><span class=3D"pre">*</span></span></em>, <em cl=
ass=3D"sig-param"><span class=3D"n"><span class=3D"pre">xml_declaration</sp=
an></span><span class=3D"o"><span class=3D"pre">=3D</span></span><span clas=
s=3D"default_value"><span class=3D"pre">None</span></span></em>, <em class=
=3D"sig-param"><span class=3D"n"><span class=3D"pre">default_namespace</spa=
n></span><span class=3D"o"><span class=3D"pre">=3D</span></span><span class=
=3D"default_value"><span class=3D"pre">None</span></span></em>, <em class=
=3D"sig-param"><span class=3D"n"><span class=3D"pre">short_empty_elements</=
span></span><span class=3D"o"><span class=3D"pre">=3D</span></span><span cl=
ass=3D"default_value"><span class=3D"pre">True</span></span></em><span clas=
s=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python=
.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostringlis=
t" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Generates a string representation of an XML element, including all
subelements.  <em>element</em> is an <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.=
ElementTree.Element" title=3D"xml.etree.ElementTree.Element"><code class=3D=
"xref py py-class docutils literal notranslate"><span class=3D"pre">Element=
</span></code></a> instance.  <em>encoding</em> <a class=3D"footnote-refere=
nce brackets" href=3D"https://docs.python.org/3/library/xml.etree.elementtr=
ee.html#id9" id=3D"id2" role=3D"doc-noteref"><span class=3D"fn-bracket">[</=
span>1<span class=3D"fn-bracket">]</span></a> is
the output encoding (default is US-ASCII).  Use <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">encoding=3D"unicode"</span></code> to
generate a Unicode string (otherwise, a bytestring is generated).  <em>meth=
od</em>
is either <code class=3D"docutils literal notranslate"><span class=3D"pre">=
"xml"</span></code>, <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">"html"</span></code> or <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">"text"</span></code> (default is <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">"xml"</span></code>).
<em>xml_declaration</em>, <em>default_namespace</em> and <em>short_empty_el=
ements</em> has the same
meaning as in <a class=3D"reference internal" href=3D"https://docs.python.o=
rg/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.w=
rite" title=3D"xml.etree.ElementTree.ElementTree.write"><code class=3D"xref=
 py py-meth docutils literal notranslate"><span class=3D"pre">ElementTree.w=
rite()</span></code></a>. Returns a list of (optionally) encoded
strings containing the XML data. It does not guarantee any specific sequenc=
e,
except that <code class=3D"docutils literal notranslate"><span class=3D"pre=
">b"".join(tostringlist(element))</span> <span class=3D"pre">=3D=3D</span> =
<span class=3D"pre">tostring(element)</span></code>.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.2.</span></p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.4: </span>A=
dded the <em>short_empty_elements</em> parameter.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.8: </span>A=
dded the <em>xml_declaration</em> and <em>default_namespace</em> parameters=
.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.8: </span>T=
he <a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#xml.etree.ElementTree.tostringlist" title=3D"x=
ml.etree.ElementTree.tostringlist"><code class=3D"xref py py-func docutils =
literal notranslate"><span class=3D"pre">tostringlist()</span></code></a> f=
unction now preserves the attribute order
specified by the user.</p>
</div>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.XML">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">XML</span></span><span class=3D"sig-paren">(</span><em class=3D"sig-param=
"><span class=3D"n"><span class=3D"pre">text</span></span></em>, <em class=
=3D"sig-param"><span class=3D"n"><span class=3D"pre">parser</span></span><s=
pan class=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"default=
_value"><span class=3D"pre">None</span></span></em><span class=3D"sig-paren=
">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/library=
/xml.etree.elementtree.html#xml.etree.ElementTree.XML" title=3D"Link to thi=
s definition">=C2=B6</a></dt>
<dd><p>Parses an XML section from a string constant.  This function can be =
used to
embed =E2=80=9CXML literals=E2=80=9D in Python code.  <em>text</em> is a st=
ring containing XML
data.  <em>parser</em> is an optional parser instance.  If not given, the s=
tandard
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.XMLParser" title=3D"xml.etr=
ee.ElementTree.XMLParser"><code class=3D"xref py py-class docutils literal =
notranslate"><span class=3D"pre">XMLParser</span></code></a> parser is used=
.  Returns an <a class=3D"reference internal" href=3D"https://docs.python.o=
rg/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element" titl=
e=3D"xml.etree.ElementTree.Element"><code class=3D"xref py py-class docutil=
s literal notranslate"><span class=3D"pre">Element</span></code></a> instan=
ce.</p>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.XMLID">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentTree.</span></span><span class=3D"sig-name descname"><span class=3D"pre=
">XMLID</span></span><span class=3D"sig-paren">(</span><em class=3D"sig-par=
am"><span class=3D"n"><span class=3D"pre">text</span></span></em>, <em clas=
s=3D"sig-param"><span class=3D"n"><span class=3D"pre">parser</span></span><=
span class=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"defaul=
t_value"><span class=3D"pre">None</span></span></em><span class=3D"sig-pare=
n">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#xml.etree.ElementTree.XMLID" title=3D"Link to =
this definition">=C2=B6</a></dt>
<dd><p>Parses an XML section from a string constant, and also returns a dic=
tionary
which maps from element id:s to elements.  <em>text</em> is a string contai=
ning XML
data.  <em>parser</em> is an optional parser instance.  If not given, the s=
tandard
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.XMLParser" title=3D"xml.etr=
ee.ElementTree.XMLParser"><code class=3D"xref py py-class docutils literal =
notranslate"><span class=3D"pre">XMLParser</span></code></a> parser is used=
.  Returns a tuple containing an
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.Element" title=3D"xml.etree=
.ElementTree.Element"><code class=3D"xref py py-class docutils literal notr=
anslate"><span class=3D"pre">Element</span></code></a> instance and a dicti=
onary.</p>
</dd></dl>

</section>
</section>
<section id=3D"xinclude-support">
<span id=3D"elementtree-xinclude"></span><h2>XInclude support<a class=3D"he=
aderlink" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.h=
tml#xinclude-support" title=3D"Link to this heading">=C2=B6</a></h2>
<p>This module provides limited support for
<a class=3D"reference external" href=3D"https://www.w3.org/TR/xinclude/">XI=
nclude directives</a>, via the <a class=3D"reference internal" href=3D"http=
s://docs.python.org/3/library/xml.etree.elementtree.html#module-xml.etree.E=
lementInclude" title=3D"xml.etree.ElementInclude"><code class=3D"xref py py=
-mod docutils literal notranslate"><span class=3D"pre">xml.etree.ElementInc=
lude</span></code></a> helper module.  This module can be used to insert su=
btrees and text strings into element trees, based on information in the tre=
e.</p>
<section id=3D"id3">
<h3>Example<a class=3D"headerlink" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#id3" title=3D"Link to this heading">=C2=B6</a>=
</h3>
<p>Here=E2=80=99s an example that demonstrates use of the XInclude module. =
To include an XML document in the current document, use the <code class=3D"=
docutils literal notranslate"><span class=3D"pre">{http://www.w3.org/2001/X=
Include}include</span></code> element and set the <strong>parse</strong> at=
tribute to <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>"xml"</span></code>, and use the <strong>href</strong> attribute to specif=
y the document to include.</p>
<div class=3D"highlight-xml notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"cp">&lt;?xml version=3D"1.0"?&gt;</span>
<span class=3D"nt">&lt;document</span><span class=3D"w"> </span><span class=
=3D"na">xmlns:xi=3D</span><span class=3D"s">"http://www.w3.org/2001/XInclud=
e"</span><span class=3D"nt">&gt;</span>
<span class=3D"w">  </span><span class=3D"nt">&lt;xi:include</span><span cl=
ass=3D"w"> </span><span class=3D"na">href=3D</span><span class=3D"s">"sourc=
e.xml"</span><span class=3D"w"> </span><span class=3D"na">parse=3D</span><s=
pan class=3D"s">"xml"</span><span class=3D"w"> </span><span class=3D"nt">/&=
gt;</span>
<span class=3D"nt">&lt;/document&gt;</span>
</pre></div>
</div>
<p>By default, the <strong>href</strong> attribute is treated as a file nam=
e. You can use custom loaders to override this behaviour. Also note that th=
e standard helper does not support XPointer syntax.</p>
<p>To process this file, load it as usual, and pass the root element to the=
 <a class=3D"reference internal" href=3D"https://docs.python.org/3/library/=
xml.etree.elementtree.html#module-xml.etree.ElementTree" title=3D"xml.etree=
.ElementTree: Implementation of the ElementTree API."><code class=3D"xref p=
y py-mod docutils literal notranslate"><span class=3D"pre">xml.etree.Elemen=
tTree</span></code></a> module:</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">xml.etree</span> <span class=3D"kn">import</span> <span c=
lass=3D"n">ElementTree</span><span class=3D"p">,</span> <span class=3D"n">E=
lementInclude</span>

<span class=3D"n">tree</span> <span class=3D"o">=3D</span> <span class=3D"n=
">ElementTree</span><span class=3D"o">.</span><span class=3D"n">parse</span=
><span class=3D"p">(</span><span class=3D"s2">"document.xml"</span><span cl=
ass=3D"p">)</span>
<span class=3D"n">root</span> <span class=3D"o">=3D</span> <span class=3D"n=
">tree</span><span class=3D"o">.</span><span class=3D"n">getroot</span><spa=
n class=3D"p">()</span>

<span class=3D"n">ElementInclude</span><span class=3D"o">.</span><span clas=
s=3D"n">include</span><span class=3D"p">(</span><span class=3D"n">root</spa=
n><span class=3D"p">)</span>
</pre></div>
</div>
<p>The ElementInclude module replaces the <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">{http://www.w3.org/2001/XInclude}include</s=
pan></code> element with the root element from the <strong>source.xml</stro=
ng> document. The result might look something like this:</p>
<div class=3D"highlight-xml notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"nt">&lt;document</span><span class=3D"w"> </span><s=
pan class=3D"na">xmlns:xi=3D</span><span class=3D"s">"http://www.w3.org/200=
1/XInclude"</span><span class=3D"nt">&gt;</span>
<span class=3D"w">  </span><span class=3D"nt">&lt;para&gt;</span>This<span =
class=3D"w"> </span>is<span class=3D"w"> </span>a<span class=3D"w"> </span>=
paragraph.<span class=3D"nt">&lt;/para&gt;</span>
<span class=3D"nt">&lt;/document&gt;</span>
</pre></div>
</div>
<p>If the <strong>parse</strong> attribute is omitted, it defaults to =E2=
=80=9Cxml=E2=80=9D. The href attribute is required.</p>
<p>To include a text document, use the <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">{http://www.w3.org/2001/XInclude}include</span=
></code> element, and set the <strong>parse</strong> attribute to =E2=80=9C=
text=E2=80=9D:</p>
<div class=3D"highlight-xml notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"cp">&lt;?xml version=3D"1.0"?&gt;</span>
<span class=3D"nt">&lt;document</span><span class=3D"w"> </span><span class=
=3D"na">xmlns:xi=3D</span><span class=3D"s">"http://www.w3.org/2001/XInclud=
e"</span><span class=3D"nt">&gt;</span>
<span class=3D"w">  </span>Copyright<span class=3D"w"> </span>(c)<span clas=
s=3D"w"> </span><span class=3D"nt">&lt;xi:include</span><span class=3D"w"> =
</span><span class=3D"na">href=3D</span><span class=3D"s">"year.txt"</span>=
<span class=3D"w"> </span><span class=3D"na">parse=3D</span><span class=3D"=
s">"text"</span><span class=3D"w"> </span><span class=3D"nt">/&gt;</span>.
<span class=3D"nt">&lt;/document&gt;</span>
</pre></div>
</div>
<p>The result might look something like:</p>
<div class=3D"highlight-xml notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"nt">&lt;document</span><span class=3D"w"> </span><s=
pan class=3D"na">xmlns:xi=3D</span><span class=3D"s">"http://www.w3.org/200=
1/XInclude"</span><span class=3D"nt">&gt;</span>
<span class=3D"w">  </span>Copyright<span class=3D"w"> </span>(c)<span clas=
s=3D"w"> </span>2003.
<span class=3D"nt">&lt;/document&gt;</span>
</pre></div>
</div>
</section>
</section>
<section id=3D"id4">
<h2>Reference<a class=3D"headerlink" href=3D"https://docs.python.org/3/libr=
ary/xml.etree.elementtree.html#id4" title=3D"Link to this heading">=C2=B6</=
a></h2>
<section id=3D"elementinclude-functions">
<span id=3D"id5"></span><h3>Functions<a class=3D"headerlink" href=3D"https:=
//docs.python.org/3/library/xml.etree.elementtree.html#elementinclude-funct=
ions" title=3D"Link to this heading">=C2=B6</a></h3>
<dl class=3D"py function" id=3D"module-xml.etree.ElementInclude">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementInclude.default_load=
er">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentInclude.</span></span><span class=3D"sig-name descname"><span class=3D"=
pre">default_loader</span></span><span class=3D"sig-paren">(</span><em clas=
s=3D"sig-param"><span class=3D"n"><span class=3D"pre">href</span></span></e=
m>, <em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">parse</sp=
an></span></em>, <em class=3D"sig-param"><span class=3D"n"><span class=3D"p=
re">encoding</span></span><span class=3D"o"><span class=3D"pre">=3D</span><=
/span><span class=3D"default_value"><span class=3D"pre">None</span></span><=
/em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https=
://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementIn=
clude.default_loader" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Default loader. This default loader reads an included resource from =
disk.
<em>href</em> is a URL.  <em>parse</em> is for parse mode either =E2=80=9Cx=
ml=E2=80=9D or =E2=80=9Ctext=E2=80=9D.
<em>encoding</em> is an optional text encoding.  If not given, encoding is =
<code class=3D"docutils literal notranslate"><span class=3D"pre">utf-8</spa=
n></code>.
Returns the expanded resource.
If the parse mode is <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">"xml"</span></code>, this is an <a class=3D"reference internal" =
href=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.et=
ree.ElementTree.Element" title=3D"xml.etree.ElementTree.Element"><code clas=
s=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">Ele=
ment</span></code></a> instance.
If the parse mode is <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">"text"</span></code>, this is a string.
If the loader fails, it can return <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">None</span></code> or raise an exception.</p>
</dd></dl>

<dl class=3D"py function">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementInclude.include">
<span class=3D"sig-prename descclassname"><span class=3D"pre">xml.etree.Ele=
mentInclude.</span></span><span class=3D"sig-name descname"><span class=3D"=
pre">include</span></span><span class=3D"sig-paren">(</span><em class=3D"si=
g-param"><span class=3D"n"><span class=3D"pre">elem</span></span></em>, <em=
 class=3D"sig-param"><span class=3D"n"><span class=3D"pre">loader</span></s=
pan><span class=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"d=
efault_value"><span class=3D"pre">None</span></span></em>, <em class=3D"sig=
-param"><span class=3D"n"><span class=3D"pre">base_url</span></span><span c=
lass=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"default_valu=
e"><span class=3D"pre">None</span></span></em>, <em class=3D"sig-param"><sp=
an class=3D"n"><span class=3D"pre">max_depth</span></span><span class=3D"o"=
><span class=3D"pre">=3D</span></span><span class=3D"default_value"><span c=
lass=3D"pre">6</span></span></em><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.element=
tree.html#xml.etree.ElementInclude.include" title=3D"Link to this definitio=
n">=C2=B6</a></dt>
<dd><p>This function expands XInclude directives in-place in tree pointed b=
y <em>elem</em>.
<em>elem</em> is either the root <a class=3D"reference internal" href=3D"ht=
tps://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.Elemen=
tTree.Element" title=3D"xml.etree.ElementTree.Element"><code class=3D"xref =
py py-class docutils literal notranslate"><span class=3D"pre">Element</span=
></code></a> or an
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.ElementTree" title=3D"xml.e=
tree.ElementTree.ElementTree"><code class=3D"xref py py-class docutils lite=
ral notranslate"><span class=3D"pre">ElementTree</span></code></a> instance=
 to find such element.
<em>loader</em> is an optional resource loader.  If omitted, it defaults to=
 <a class=3D"reference internal" href=3D"https://docs.python.org/3/library/=
xml.etree.elementtree.html#xml.etree.ElementInclude.default_loader" title=
=3D"xml.etree.ElementInclude.default_loader"><code class=3D"xref py py-func=
 docutils literal notranslate"><span class=3D"pre">default_loader()</span><=
/code></a>.
If given, it should be a callable that implements the same interface as
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementInclude.default_loader" title=3D=
"xml.etree.ElementInclude.default_loader"><code class=3D"xref py py-func do=
cutils literal notranslate"><span class=3D"pre">default_loader()</span></co=
de></a>.  <em>base_url</em> is base URL of the original file, to resolve
relative include file references.  <em>max_depth</em> is the maximum number=
 of recursive
inclusions.  Limited to reduce the risk of malicious content explosion.
Pass <code class=3D"docutils literal notranslate"><span class=3D"pre">None<=
/span></code> to disable the limitation.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.9: </span>A=
dded the <em>base_url</em> and <em>max_depth</em> parameters.</p>
</div>
</dd></dl>

</section>
<section id=3D"element-objects">
<span id=3D"elementtree-element-objects"></span><h3>Element Objects<a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.element=
tree.html#element-objects" title=3D"Link to this heading">=C2=B6</a></h3>
<dl class=3D"py class">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element">
<em class=3D"property"><span class=3D"pre">class</span><span class=3D"w"> <=
/span></em><span class=3D"sig-prename descclassname"><span class=3D"pre">xm=
l.etree.ElementTree.</span></span><span class=3D"sig-name descname"><span c=
lass=3D"pre">Element</span></span><span class=3D"sig-paren">(</span><em cla=
ss=3D"sig-param"><span class=3D"n"><span class=3D"pre">tag</span></span></e=
m>, <em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">attrib</s=
pan></span><span class=3D"o"><span class=3D"pre">=3D</span></span><span cla=
ss=3D"default_value"><span class=3D"pre">{}</span></span></em>, <em class=
=3D"sig-param"><span class=3D"o"><span class=3D"pre">**</span></span><span =
class=3D"n"><span class=3D"pre">extra</span></span></em><span class=3D"sig-=
paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/li=
brary/xml.etree.elementtree.html#xml.etree.ElementTree.Element" title=3D"Li=
nk to this definition">=C2=B6</a></dt>
<dd><p>Element class.  This class defines the Element interface, and provid=
es a
reference implementation of this interface.</p>
<p>The element name, attribute names, and attribute values can be either
bytestrings or Unicode strings.  <em>tag</em> is the element name.  <em>att=
rib</em> is
an optional dictionary, containing element attributes.  <em>extra</em> cont=
ains
additional attributes, given as keyword arguments.</p>
<dl class=3D"py attribute">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.tag">
<span class=3D"sig-name descname"><span class=3D"pre">tag</span></span><a c=
lass=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.ele=
menttree.html#xml.etree.ElementTree.Element.tag" title=3D"Link to this defi=
nition">=C2=B6</a></dt>
<dd><p>A string identifying what kind of data this element represents (the
element type, in other words).</p>
</dd></dl>

<dl class=3D"py attribute">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.text">
<span class=3D"sig-name descname"><span class=3D"pre">text</span></span><a =
class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.el=
ementtree.html#xml.etree.ElementTree.Element.text" title=3D"Link to this de=
finition">=C2=B6</a></dt>
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.tail">
<span class=3D"sig-name descname"><span class=3D"pre">tail</span></span><a =
class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.el=
ementtree.html#xml.etree.ElementTree.Element.tail" title=3D"Link to this de=
finition">=C2=B6</a></dt>
<dd><p>These attributes can be used to hold additional data associated with
the element.  Their values are usually strings but may be any
application-specific object.  If the element is created from
an XML file, the <em>text</em> attribute holds either the text between
the element=E2=80=99s start tag and its first child or end tag, or <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">None</span></code>=
, and
the <em>tail</em> attribute holds either the text between the element=E2=80=
=99s
end tag and the next tag, or <code class=3D"docutils literal notranslate"><=
span class=3D"pre">None</span></code>.  For the XML data</p>
<div class=3D"highlight-xml notranslate"><div class=3D"highlight"><pre><spa=
n></span><span class=3D"nt">&lt;a&gt;&lt;b&gt;</span>1<span class=3D"nt">&l=
t;c&gt;</span>2<span class=3D"nt">&lt;d/&gt;</span>3<span class=3D"nt">&lt;=
/c&gt;&lt;/b&gt;</span>4<span class=3D"nt">&lt;/a&gt;</span>
</pre></div>
</div>
<p>the <em>a</em> element has <code class=3D"docutils literal notranslate">=
<span class=3D"pre">None</span></code> for both <em>text</em> and <em>tail<=
/em> attributes,
the <em>b</em> element has <em>text</em> <code class=3D"docutils literal no=
translate"><span class=3D"pre">"1"</span></code> and <em>tail</em> <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">"4"</span></code>,
the <em>c</em> element has <em>text</em> <code class=3D"docutils literal no=
translate"><span class=3D"pre">"2"</span></code> and <em>tail</em> <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">None</span></code>=
,
and the <em>d</em> element has <em>text</em> <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">None</span></code> and <em>tail</em> <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">"3"</span></c=
ode>.</p>
<p>To collect the inner text of an element, see <a class=3D"reference inter=
nal" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#x=
ml.etree.ElementTree.Element.itertext" title=3D"xml.etree.ElementTree.Eleme=
nt.itertext"><code class=3D"xref py py-meth docutils literal notranslate"><=
span class=3D"pre">itertext()</span></code></a>, for
example <code class=3D"docutils literal notranslate"><span class=3D"pre">""=
.join(element.itertext())</span></code>.</p>
<p>Applications may store arbitrary objects in these attributes.</p>
</dd></dl>

<dl class=3D"py attribute">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.attrib"=
>
<span class=3D"sig-name descname"><span class=3D"pre">attrib</span></span><=
a class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.=
elementtree.html#xml.etree.ElementTree.Element.attrib" title=3D"Link to thi=
s definition">=C2=B6</a></dt>
<dd><p>A dictionary containing the element=E2=80=99s attributes.  Note that=
 while the
<em>attrib</em> value is always a real mutable Python dictionary, an Elemen=
tTree
implementation may choose to use another internal representation, and
create the dictionary only if someone asks for it.  To take advantage of
such implementations, use the dictionary methods below whenever possible.</=
p>
</dd></dl>

<p>The following dictionary-like methods work on the element attributes.</p=
>
<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.clear">
<span class=3D"sig-name descname"><span class=3D"pre">clear</span></span><s=
pan class=3D"sig-paren">(</span><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.element=
tree.html#xml.etree.ElementTree.Element.clear" title=3D"Link to this defini=
tion">=C2=B6</a></dt>
<dd><p>Resets an element.  This function removes all subelements, clears al=
l
attributes, and sets the text and tail attributes to <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">None</span></code>.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.get">
<span class=3D"sig-name descname"><span class=3D"pre">get</span></span><spa=
n class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"><sp=
an class=3D"pre">key</span></span></em>, <em class=3D"sig-param"><span clas=
s=3D"n"><span class=3D"pre">default</span></span><span class=3D"o"><span cl=
ass=3D"pre">=3D</span></span><span class=3D"default_value"><span class=3D"p=
re">None</span></span></em><span class=3D"sig-paren">)</span><a class=3D"he=
aderlink" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.h=
tml#xml.etree.ElementTree.Element.get" title=3D"Link to this definition">=
=C2=B6</a></dt>
<dd><p>Gets the element attribute named <em>key</em>.</p>
<p>Returns the attribute value, or <em>default</em> if the attribute was no=
t found.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.items">
<span class=3D"sig-name descname"><span class=3D"pre">items</span></span><s=
pan class=3D"sig-paren">(</span><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.element=
tree.html#xml.etree.ElementTree.Element.items" title=3D"Link to this defini=
tion">=C2=B6</a></dt>
<dd><p>Returns the element attributes as a sequence of (name, value) pairs.=
  The
attributes are returned in an arbitrary order.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.keys">
<span class=3D"sig-name descname"><span class=3D"pre">keys</span></span><sp=
an class=3D"sig-paren">(</span><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.element=
tree.html#xml.etree.ElementTree.Element.keys" title=3D"Link to this definit=
ion">=C2=B6</a></dt>
<dd><p>Returns the elements attribute names as a list.  The names are retur=
ned
in an arbitrary order.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.set">
<span class=3D"sig-name descname"><span class=3D"pre">set</span></span><spa=
n class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"><sp=
an class=3D"pre">key</span></span></em>, <em class=3D"sig-param"><span clas=
s=3D"n"><span class=3D"pre">value</span></span></em><span class=3D"sig-pare=
n">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#xml.etree.ElementTree.Element.set" title=3D"Li=
nk to this definition">=C2=B6</a></dt>
<dd><p>Set the attribute <em>key</em> on the element to <em>value</em>.</p>
</dd></dl>

<p>The following methods work on the element=E2=80=99s children (subelement=
s).</p>
<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.append"=
>
<span class=3D"sig-name descname"><span class=3D"pre">append</span></span><=
span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n">=
<span class=3D"pre">subelement</span></span></em><span class=3D"sig-paren">=
)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.Element.append" title=3D"Li=
nk to this definition">=C2=B6</a></dt>
<dd><p>Adds the element <em>subelement</em> to the end of this element=E2=
=80=99s internal list
of subelements.  Raises <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/library/exceptions.html#TypeError" title=3D"TypeError"><code=
 class=3D"xref py py-exc docutils literal notranslate"><span class=3D"pre">=
TypeError</span></code></a> if <em>subelement</em> is not an
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.Element" title=3D"xml.etree=
.ElementTree.Element"><code class=3D"xref py py-class docutils literal notr=
anslate"><span class=3D"pre">Element</span></code></a>.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.extend"=
>
<span class=3D"sig-name descname"><span class=3D"pre">extend</span></span><=
span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n">=
<span class=3D"pre">subelements</span></span></em><span class=3D"sig-paren"=
>)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/=
xml.etree.elementtree.html#xml.etree.ElementTree.Element.extend" title=3D"L=
ink to this definition">=C2=B6</a></dt>
<dd><p>Appends <em>subelements</em> from a sequence object with zero or mor=
e elements.
Raises <a class=3D"reference internal" href=3D"https://docs.python.org/3/li=
brary/exceptions.html#TypeError" title=3D"TypeError"><code class=3D"xref py=
 py-exc docutils literal notranslate"><span class=3D"pre">TypeError</span><=
/code></a> if a subelement is not an <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.=
ElementTree.Element" title=3D"xml.etree.ElementTree.Element"><code class=3D=
"xref py py-class docutils literal notranslate"><span class=3D"pre">Element=
</span></code></a>.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.find">
<span class=3D"sig-name descname"><span class=3D"pre">find</span></span><sp=
an class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"><s=
pan class=3D"pre">match</span></span></em>, <em class=3D"sig-param"><span c=
lass=3D"n"><span class=3D"pre">namespaces</span></span><span class=3D"o"><s=
pan class=3D"pre">=3D</span></span><span class=3D"default_value"><span clas=
s=3D"pre">None</span></span></em><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.element=
tree.html#xml.etree.ElementTree.Element.find" title=3D"Link to this definit=
ion">=C2=B6</a></dt>
<dd><p>Finds the first subelement matching <em>match</em>.  <em>match</em> =
may be a tag name
or a <a class=3D"reference internal" href=3D"https://docs.python.org/3/libr=
ary/xml.etree.elementtree.html#elementtree-xpath"><span class=3D"std std-re=
f">path</span></a>.  Returns an element instance
or <code class=3D"docutils literal notranslate"><span class=3D"pre">None</s=
pan></code>.  <em>namespaces</em> is an optional mapping from namespace pre=
fix
to full name.  Pass <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">''</span></code> as prefix to move all unprefixed tag names
in the expression into the given namespace.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.findall=
">
<span class=3D"sig-name descname"><span class=3D"pre">findall</span></span>=
<span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"=
><span class=3D"pre">match</span></span></em>, <em class=3D"sig-param"><spa=
n class=3D"n"><span class=3D"pre">namespaces</span></span><span class=3D"o"=
><span class=3D"pre">=3D</span></span><span class=3D"default_value"><span c=
lass=3D"pre">None</span></span></em><span class=3D"sig-paren">)</span><a cl=
ass=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.elem=
enttree.html#xml.etree.ElementTree.Element.findall" title=3D"Link to this d=
efinition">=C2=B6</a></dt>
<dd><p>Finds all matching subelements, by tag name or
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#elementtree-xpath"><span class=3D"std std-ref">pa=
th</span></a>.  Returns a list containing all matching
elements in document order.  <em>namespaces</em> is an optional mapping fro=
m
namespace prefix to full name.  Pass <code class=3D"docutils literal notran=
slate"><span class=3D"pre">''</span></code> as prefix to move all
unprefixed tag names in the expression into the given namespace.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.findtex=
t">
<span class=3D"sig-name descname"><span class=3D"pre">findtext</span></span=
><span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n=
"><span class=3D"pre">match</span></span></em>, <em class=3D"sig-param"><sp=
an class=3D"n"><span class=3D"pre">default</span></span><span class=3D"o"><=
span class=3D"pre">=3D</span></span><span class=3D"default_value"><span cla=
ss=3D"pre">None</span></span></em>, <em class=3D"sig-param"><span class=3D"=
n"><span class=3D"pre">namespaces</span></span><span class=3D"o"><span clas=
s=3D"pre">=3D</span></span><span class=3D"default_value"><span class=3D"pre=
">None</span></span></em><span class=3D"sig-paren">)</span><a class=3D"head=
erlink" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.htm=
l#xml.etree.ElementTree.Element.findtext" title=3D"Link to this definition"=
>=C2=B6</a></dt>
<dd><p>Finds text for the first subelement matching <em>match</em>.  <em>ma=
tch</em> may be
a tag name or a <a class=3D"reference internal" href=3D"https://docs.python=
.org/3/library/xml.etree.elementtree.html#elementtree-xpath"><span class=3D=
"std std-ref">path</span></a>.  Returns the text content
of the first matching element, or <em>default</em> if no element was found.
Note that if the matching element has no text content an empty string
is returned. <em>namespaces</em> is an optional mapping from namespace pref=
ix
to full name.  Pass <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">''</span></code> as prefix to move all unprefixed tag names
in the expression into the given namespace.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.insert"=
>
<span class=3D"sig-name descname"><span class=3D"pre">insert</span></span><=
span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n">=
<span class=3D"pre">index</span></span></em>, <em class=3D"sig-param"><span=
 class=3D"n"><span class=3D"pre">subelement</span></span></em><span class=
=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.=
org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.inse=
rt" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Inserts <em>subelement</em> at the given position in this element.  =
Raises
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#TypeError" title=3D"TypeError"><code class=3D"xref py py-exc=
 docutils literal notranslate"><span class=3D"pre">TypeError</span></code><=
/a> if <em>subelement</em> is not an <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.=
ElementTree.Element" title=3D"xml.etree.ElementTree.Element"><code class=3D=
"xref py py-class docutils literal notranslate"><span class=3D"pre">Element=
</span></code></a>.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.iter">
<span class=3D"sig-name descname"><span class=3D"pre">iter</span></span><sp=
an class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"><s=
pan class=3D"pre">tag</span></span><span class=3D"o"><span class=3D"pre">=
=3D</span></span><span class=3D"default_value"><span class=3D"pre">None</sp=
an></span></em><span class=3D"sig-paren">)</span><a class=3D"headerlink" hr=
ef=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etre=
e.ElementTree.Element.iter" title=3D"Link to this definition">=C2=B6</a></d=
t>
<dd><p>Creates a tree <a class=3D"reference internal" href=3D"https://docs.=
python.org/3/glossary.html#term-iterator"><span class=3D"xref std std-term"=
>iterator</span></a> with the current element as the root.
The iterator iterates over this element and all elements below it, in
document (depth first) order.  If <em>tag</em> is not <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">None</span></code> or <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">'*'</span></code>, =
only
elements whose tag equals <em>tag</em> are returned from the iterator.  If =
the
tree structure is modified during iteration, the result is undefined.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.iterfin=
d">
<span class=3D"sig-name descname"><span class=3D"pre">iterfind</span></span=
><span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n=
"><span class=3D"pre">match</span></span></em>, <em class=3D"sig-param"><sp=
an class=3D"n"><span class=3D"pre">namespaces</span></span><span class=3D"o=
"><span class=3D"pre">=3D</span></span><span class=3D"default_value"><span =
class=3D"pre">None</span></span></em><span class=3D"sig-paren">)</span><a c=
lass=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.ele=
menttree.html#xml.etree.ElementTree.Element.iterfind" title=3D"Link to this=
 definition">=C2=B6</a></dt>
<dd><p>Finds all matching subelements, by tag name or
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#elementtree-xpath"><span class=3D"std std-ref">pa=
th</span></a>.  Returns an iterable yielding all
matching elements in document order. <em>namespaces</em> is an optional map=
ping
from namespace prefix to full name.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.itertex=
t">
<span class=3D"sig-name descname"><span class=3D"pre">itertext</span></span=
><span class=3D"sig-paren">(</span><span class=3D"sig-paren">)</span><a cla=
ss=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.eleme=
nttree.html#xml.etree.ElementTree.Element.itertext" title=3D"Link to this d=
efinition">=C2=B6</a></dt>
<dd><p>Creates a text iterator.  The iterator loops over this element and a=
ll
subelements, in document order, and returns all inner text.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.makeele=
ment">
<span class=3D"sig-name descname"><span class=3D"pre">makeelement</span></s=
pan><span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=
=3D"n"><span class=3D"pre">tag</span></span></em>, <em class=3D"sig-param">=
<span class=3D"n"><span class=3D"pre">attrib</span></span></em><span class=
=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.=
org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.make=
element" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Creates a new element object of the same type as this element.  Do n=
ot
call this method, use the <a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.S=
ubElement" title=3D"xml.etree.ElementTree.SubElement"><code class=3D"xref p=
y py-func docutils literal notranslate"><span class=3D"pre">SubElement()</s=
pan></code></a> factory function instead.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.Element.remove"=
>
<span class=3D"sig-name descname"><span class=3D"pre">remove</span></span><=
span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n">=
<span class=3D"pre">subelement</span></span></em><span class=3D"sig-paren">=
)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.Element.remove" title=3D"Li=
nk to this definition">=C2=B6</a></dt>
<dd><p>Removes <em>subelement</em> from the element.  Unlike the find* meth=
ods this
method compares elements based on the instance identity, not on tag value
or contents.</p>
</dd></dl>

<p><a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#xml.etree.ElementTree.Element" title=3D"xml.et=
ree.ElementTree.Element"><code class=3D"xref py py-class docutils literal n=
otranslate"><span class=3D"pre">Element</span></code></a> objects also supp=
ort the following sequence type methods
for working with subelements: <a class=3D"reference internal" href=3D"https=
://docs.python.org/3/reference/datamodel.html#object.__delitem__" title=3D"=
object.__delitem__"><code class=3D"xref py py-meth docutils literal notrans=
late"><span class=3D"pre">__delitem__()</span></code></a>,
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/datamodel.html#object.__getitem__" title=3D"object.__getitem__"><code clas=
s=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">__ge=
titem__()</span></code></a>, <a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/reference/datamodel.html#object.__setitem__" title=3D"o=
bject.__setitem__"><code class=3D"xref py py-meth docutils literal notransl=
ate"><span class=3D"pre">__setitem__()</span></code></a>,
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/datamodel.html#object.__len__" title=3D"object.__len__"><code class=3D"xre=
f py py-meth docutils literal notranslate"><span class=3D"pre">__len__()</s=
pan></code></a>.</p>
<p>Caution: Elements with no subelements will test as <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">False</span></code>.  Testing t=
he
truth value of an Element is deprecated and will raise an exception in
Python 3.14.  Use specific <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">len(elem)</span></code> or <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">elem</span> <span class=3D"pre">is</span>=
 <span class=3D"pre">None</span></code> test instead.:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><pre><span></span><span class=3D"n">element</span>=
 <span class=3D"o">=3D</span> <span class=3D"n">root</span><span class=3D"o=
">.</span><span class=3D"n">find</span><span class=3D"p">(</span><span clas=
s=3D"s1">'foo'</span><span class=3D"p">)</span>

<span class=3D"k">if</span> <span class=3D"ow">not</span> <span class=3D"n"=
>element</span><span class=3D"p">:</span>  <span class=3D"c1"># careful!</s=
pan>
    <span class=3D"nb">print</span><span class=3D"p">(</span><span class=3D=
"s2">"element not found, or element has no subelements"</span><span class=
=3D"p">)</span>

<span class=3D"k">if</span> <span class=3D"n">element</span> <span class=3D=
"ow">is</span> <span class=3D"kc">None</span><span class=3D"p">:</span>
    <span class=3D"nb">print</span><span class=3D"p">(</span><span class=3D=
"s2">"element not found"</span><span class=3D"p">)</span>
</pre></div>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.12: </span>=
Testing the truth value of an Element emits <a class=3D"reference internal"=
 href=3D"https://docs.python.org/3/library/exceptions.html#DeprecationWarni=
ng" title=3D"DeprecationWarning"><code class=3D"xref py py-exc docutils lit=
eral notranslate"><span class=3D"pre">DeprecationWarning</span></code></a>.=
</p>
</div>
<p>Prior to Python 3.8, the serialisation order of the XML attributes of
elements was artificially made predictable by sorting the attributes by
their name. Based on the now guaranteed ordering of dicts, this arbitrary
reordering was removed in Python 3.8 to preserve the order in which
attributes were originally parsed or created by user code.</p>
<p>In general, user code should try not to depend on a specific ordering of
attributes, given that the <a class=3D"reference external" href=3D"https://=
www.w3.org/TR/xml-infoset/">XML Information Set</a> explicitly excludes the=
 attribute
order from conveying information. Code should be prepared to deal with
any ordering on input. In cases where deterministic XML output is required,
e.g. for cryptographic signing or test data sets, canonical serialisation
is available with the <a class=3D"reference internal" href=3D"https://docs.=
python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.canon=
icalize" title=3D"xml.etree.ElementTree.canonicalize"><code class=3D"xref p=
y py-func docutils literal notranslate"><span class=3D"pre">canonicalize()<=
/span></code></a> function.</p>
<p>In cases where canonical output is not applicable but a specific attribu=
te
order is still desirable on output, code should aim for creating the
attributes directly in the desired order, to avoid perceptual mismatches
for readers of the code. In cases where this is difficult to achieve, a
recipe like the following can be applied prior to serialisation to enforce
an order independently from the Element creation:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">reorder_attributes</span><span class=3D"p">(</span><span cl=
ass=3D"n">root</span><span class=3D"p">):</span>
    <span class=3D"k">for</span> <span class=3D"n">el</span> <span class=3D=
"ow">in</span> <span class=3D"n">root</span><span class=3D"o">.</span><span=
 class=3D"n">iter</span><span class=3D"p">():</span>
        <span class=3D"n">attrib</span> <span class=3D"o">=3D</span> <span =
class=3D"n">el</span><span class=3D"o">.</span><span class=3D"n">attrib</sp=
an>
        <span class=3D"k">if</span> <span class=3D"nb">len</span><span clas=
s=3D"p">(</span><span class=3D"n">attrib</span><span class=3D"p">)</span> <=
span class=3D"o">&gt;</span> <span class=3D"mi">1</span><span class=3D"p">:=
</span>
            <span class=3D"c1"># adjust attribute order, e.g. by sorting</s=
pan>
            <span class=3D"n">attribs</span> <span class=3D"o">=3D</span> <=
span class=3D"nb">sorted</span><span class=3D"p">(</span><span class=3D"n">=
attrib</span><span class=3D"o">.</span><span class=3D"n">items</span><span =
class=3D"p">())</span>
            <span class=3D"n">attrib</span><span class=3D"o">.</span><span =
class=3D"n">clear</span><span class=3D"p">()</span>
            <span class=3D"n">attrib</span><span class=3D"o">.</span><span =
class=3D"n">update</span><span class=3D"p">(</span><span class=3D"n">attrib=
s</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

</section>
<section id=3D"elementtree-objects">
<span id=3D"elementtree-elementtree-objects"></span><h3>ElementTree Objects=
<a class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree=
.elementtree.html#elementtree-objects" title=3D"Link to this heading">=C2=
=B6</a></h3>
<dl class=3D"py class">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.ElementTree">
<em class=3D"property"><span class=3D"pre">class</span><span class=3D"w"> <=
/span></em><span class=3D"sig-prename descclassname"><span class=3D"pre">xm=
l.etree.ElementTree.</span></span><span class=3D"sig-name descname"><span c=
lass=3D"pre">ElementTree</span></span><span class=3D"sig-paren">(</span><em=
 class=3D"sig-param"><span class=3D"n"><span class=3D"pre">element</span></=
span><span class=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"=
default_value"><span class=3D"pre">None</span></span></em>, <em class=3D"si=
g-param"><span class=3D"n"><span class=3D"pre">file</span></span><span clas=
s=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"default_value">=
<span class=3D"pre">None</span></span></em><span class=3D"sig-paren">)</spa=
n><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etr=
ee.elementtree.html#xml.etree.ElementTree.ElementTree" title=3D"Link to thi=
s definition">=C2=B6</a></dt>
<dd><p>ElementTree wrapper class.  This class represents an entire element
hierarchy, and adds some extra support for serialization to and from
standard XML.</p>
<p><em>element</em> is the root element.  The tree is initialized with the =
contents
of the XML <em>file</em> if given.</p>
<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.ElementTree._se=
troot">
<span class=3D"sig-name descname"><span class=3D"pre">_setroot</span></span=
><span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n=
"><span class=3D"pre">element</span></span></em><span class=3D"sig-paren">)=
</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/xm=
l.etree.elementtree.html#xml.etree.ElementTree.ElementTree._setroot" title=
=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Replaces the root element for this tree.  This discards the current
contents of the tree, and replaces it with the given element.  Use with
care.  <em>element</em> is an element instance.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.ElementTree.fin=
d">
<span class=3D"sig-name descname"><span class=3D"pre">find</span></span><sp=
an class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"><s=
pan class=3D"pre">match</span></span></em>, <em class=3D"sig-param"><span c=
lass=3D"n"><span class=3D"pre">namespaces</span></span><span class=3D"o"><s=
pan class=3D"pre">=3D</span></span><span class=3D"default_value"><span clas=
s=3D"pre">None</span></span></em><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.element=
tree.html#xml.etree.ElementTree.ElementTree.find" title=3D"Link to this def=
inition">=C2=B6</a></dt>
<dd><p>Same as <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.find=
" title=3D"xml.etree.ElementTree.Element.find"><code class=3D"xref py py-me=
th docutils literal notranslate"><span class=3D"pre">Element.find()</span><=
/code></a>, starting at the root of the tree.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.ElementTree.fin=
dall">
<span class=3D"sig-name descname"><span class=3D"pre">findall</span></span>=
<span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"=
><span class=3D"pre">match</span></span></em>, <em class=3D"sig-param"><spa=
n class=3D"n"><span class=3D"pre">namespaces</span></span><span class=3D"o"=
><span class=3D"pre">=3D</span></span><span class=3D"default_value"><span c=
lass=3D"pre">None</span></span></em><span class=3D"sig-paren">)</span><a cl=
ass=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.elem=
enttree.html#xml.etree.ElementTree.ElementTree.findall" title=3D"Link to th=
is definition">=C2=B6</a></dt>
<dd><p>Same as <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.find=
all" title=3D"xml.etree.ElementTree.Element.findall"><code class=3D"xref py=
 py-meth docutils literal notranslate"><span class=3D"pre">Element.findall(=
)</span></code></a>, starting at the root of the tree.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.ElementTree.fin=
dtext">
<span class=3D"sig-name descname"><span class=3D"pre">findtext</span></span=
><span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n=
"><span class=3D"pre">match</span></span></em>, <em class=3D"sig-param"><sp=
an class=3D"n"><span class=3D"pre">default</span></span><span class=3D"o"><=
span class=3D"pre">=3D</span></span><span class=3D"default_value"><span cla=
ss=3D"pre">None</span></span></em>, <em class=3D"sig-param"><span class=3D"=
n"><span class=3D"pre">namespaces</span></span><span class=3D"o"><span clas=
s=3D"pre">=3D</span></span><span class=3D"default_value"><span class=3D"pre=
">None</span></span></em><span class=3D"sig-paren">)</span><a class=3D"head=
erlink" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.htm=
l#xml.etree.ElementTree.ElementTree.findtext" title=3D"Link to this definit=
ion">=C2=B6</a></dt>
<dd><p>Same as <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.find=
text" title=3D"xml.etree.ElementTree.Element.findtext"><code class=3D"xref =
py py-meth docutils literal notranslate"><span class=3D"pre">Element.findte=
xt()</span></code></a>, starting at the root of the tree.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.ElementTree.get=
root">
<span class=3D"sig-name descname"><span class=3D"pre">getroot</span></span>=
<span class=3D"sig-paren">(</span><span class=3D"sig-paren">)</span><a clas=
s=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.elemen=
ttree.html#xml.etree.ElementTree.ElementTree.getroot" title=3D"Link to this=
 definition">=C2=B6</a></dt>
<dd><p>Returns the root element for this tree.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.ElementTree.ite=
r">
<span class=3D"sig-name descname"><span class=3D"pre">iter</span></span><sp=
an class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"><s=
pan class=3D"pre">tag</span></span><span class=3D"o"><span class=3D"pre">=
=3D</span></span><span class=3D"default_value"><span class=3D"pre">None</sp=
an></span></em><span class=3D"sig-paren">)</span><a class=3D"headerlink" hr=
ef=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etre=
e.ElementTree.ElementTree.iter" title=3D"Link to this definition">=C2=B6</a=
></dt>
<dd><p>Creates and returns a tree iterator for the root element.  The itera=
tor
loops over all elements in this tree, in section order.  <em>tag</em> is th=
e tag
to look for (default is to return all elements).</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.ElementTree.ite=
rfind">
<span class=3D"sig-name descname"><span class=3D"pre">iterfind</span></span=
><span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n=
"><span class=3D"pre">match</span></span></em>, <em class=3D"sig-param"><sp=
an class=3D"n"><span class=3D"pre">namespaces</span></span><span class=3D"o=
"><span class=3D"pre">=3D</span></span><span class=3D"default_value"><span =
class=3D"pre">None</span></span></em><span class=3D"sig-paren">)</span><a c=
lass=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.ele=
menttree.html#xml.etree.ElementTree.ElementTree.iterfind" title=3D"Link to =
this definition">=C2=B6</a></dt>
<dd><p>Same as <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.iter=
find" title=3D"xml.etree.ElementTree.Element.iterfind"><code class=3D"xref =
py py-meth docutils literal notranslate"><span class=3D"pre">Element.iterfi=
nd()</span></code></a>, starting at the root of the tree.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.ElementTree.par=
se">
<span class=3D"sig-name descname"><span class=3D"pre">parse</span></span><s=
pan class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"><=
span class=3D"pre">source</span></span></em>, <em class=3D"sig-param"><span=
 class=3D"n"><span class=3D"pre">parser</span></span><span class=3D"o"><spa=
n class=3D"pre">=3D</span></span><span class=3D"default_value"><span class=
=3D"pre">None</span></span></em><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.element=
tree.html#xml.etree.ElementTree.ElementTree.parse" title=3D"Link to this de=
finition">=C2=B6</a></dt>
<dd><p>Loads an external XML section into this element tree.  <em>source</e=
m> is a file
name or <a class=3D"reference internal" href=3D"https://docs.python.org/3/g=
lossary.html#term-file-object"><span class=3D"xref std std-term">file objec=
t</span></a>.  <em>parser</em> is an optional parser instance.
If not given, the standard <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.=
XMLParser" title=3D"xml.etree.ElementTree.XMLParser"><code class=3D"xref py=
 py-class docutils literal notranslate"><span class=3D"pre">XMLParser</span=
></code></a> parser is used.  Returns the
section root element.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.ElementTree.wri=
te">
<span class=3D"sig-name descname"><span class=3D"pre">write</span></span><s=
pan class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"><=
span class=3D"pre">file</span></span></em>, <em class=3D"sig-param"><span c=
lass=3D"n"><span class=3D"pre">encoding</span></span><span class=3D"o"><spa=
n class=3D"pre">=3D</span></span><span class=3D"default_value"><span class=
=3D"pre">'us-ascii'</span></span></em>, <em class=3D"sig-param"><span class=
=3D"n"><span class=3D"pre">xml_declaration</span></span><span class=3D"o"><=
span class=3D"pre">=3D</span></span><span class=3D"default_value"><span cla=
ss=3D"pre">None</span></span></em>, <em class=3D"sig-param"><span class=3D"=
n"><span class=3D"pre">default_namespace</span></span><span class=3D"o"><sp=
an class=3D"pre">=3D</span></span><span class=3D"default_value"><span class=
=3D"pre">None</span></span></em>, <em class=3D"sig-param"><span class=3D"n"=
><span class=3D"pre">method</span></span><span class=3D"o"><span class=3D"p=
re">=3D</span></span><span class=3D"default_value"><span class=3D"pre">'xml=
'</span></span></em>, <em class=3D"sig-param"><span class=3D"o"><span class=
=3D"pre">*</span></span></em>, <em class=3D"sig-param"><span class=3D"n"><s=
pan class=3D"pre">short_empty_elements</span></span><span class=3D"o"><span=
 class=3D"pre">=3D</span></span><span class=3D"default_value"><span class=
=3D"pre">True</span></span></em><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.element=
tree.html#xml.etree.ElementTree.ElementTree.write" title=3D"Link to this de=
finition">=C2=B6</a></dt>
<dd><p>Writes the element tree to a file, as XML.  <em>file</em> is a file =
name, or a
<a class=3D"reference internal" href=3D"https://docs.python.org/3/glossary.=
html#term-file-object"><span class=3D"xref std std-term">file object</span>=
</a> opened for writing.  <em>encoding</em> <a class=3D"footnote-reference =
brackets" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.h=
tml#id9" id=3D"id6" role=3D"doc-noteref"><span class=3D"fn-bracket">[</span=
>1<span class=3D"fn-bracket">]</span></a> is the output
encoding (default is US-ASCII).
<em>xml_declaration</em> controls if an XML declaration should be added to =
the
file.  Use <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>False</span></code> for never, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">True</span></code> for always, <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">None</span></code>
for only if not US-ASCII or UTF-8 or Unicode (default is <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">None</span></code>).
<em>default_namespace</em> sets the default XML namespace (for =E2=80=9Cxml=
ns=E2=80=9D).
<em>method</em> is either <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">"xml"</span></code>, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">"html"</span></code> or <code class=3D"docutils =
literal notranslate"><span class=3D"pre">"text"</span></code> (default is
<code class=3D"docutils literal notranslate"><span class=3D"pre">"xml"</spa=
n></code>).
The keyword-only <em>short_empty_elements</em> parameter controls the forma=
tting
of elements that contain no content.  If <code class=3D"docutils literal no=
translate"><span class=3D"pre">True</span></code> (the default), they are
emitted as a single self-closed tag, otherwise they are emitted as a pair
of start/end tags.</p>
<p>The output is either a string (<a class=3D"reference internal" href=3D"h=
ttps://docs.python.org/3/library/stdtypes.html#str" title=3D"str"><code cla=
ss=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">st=
r</span></code></a>) or binary (<a class=3D"reference internal" href=3D"htt=
ps://docs.python.org/3/library/stdtypes.html#bytes" title=3D"bytes"><code c=
lass=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">=
bytes</span></code></a>).
This is controlled by the <em>encoding</em> argument.  If <em>encoding</em>=
 is
<code class=3D"docutils literal notranslate"><span class=3D"pre">"unicode"<=
/span></code>, the output is a string; otherwise, it=E2=80=99s binary.  Not=
e that
this may conflict with the type of <em>file</em> if it=E2=80=99s an open
<a class=3D"reference internal" href=3D"https://docs.python.org/3/glossary.=
html#term-file-object"><span class=3D"xref std std-term">file object</span>=
</a>; make sure you do not try to write a string to a
binary stream and vice versa.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.4: </span>A=
dded the <em>short_empty_elements</em> parameter.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.8: </span>T=
he <a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.write" title=
=3D"xml.etree.ElementTree.ElementTree.write"><code class=3D"xref py py-meth=
 docutils literal notranslate"><span class=3D"pre">write()</span></code></a=
> method now preserves the attribute order specified
by the user.</p>
</div>
</dd></dl>

</dd></dl>

<p>This is the XML file that is going to be manipulated:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><pre><span></span><span class=3D"o">&lt;</span><sp=
an class=3D"n">html</span><span class=3D"o">&gt;</span>
    <span class=3D"o">&lt;</span><span class=3D"n">head</span><span class=
=3D"o">&gt;</span>
        <span class=3D"o">&lt;</span><span class=3D"n">title</span><span cl=
ass=3D"o">&gt;</span><span class=3D"n">Example</span> <span class=3D"n">pag=
e</span><span class=3D"o">&lt;/</span><span class=3D"n">title</span><span c=
lass=3D"o">&gt;</span>
    <span class=3D"o">&lt;/</span><span class=3D"n">head</span><span class=
=3D"o">&gt;</span>
    <span class=3D"o">&lt;</span><span class=3D"n">body</span><span class=
=3D"o">&gt;</span>
        <span class=3D"o">&lt;</span><span class=3D"n">p</span><span class=
=3D"o">&gt;</span><span class=3D"n">Moved</span> <span class=3D"n">to</span=
> <span class=3D"o">&lt;</span><span class=3D"n">a</span> <span class=3D"n"=
>href</span><span class=3D"o">=3D</span><span class=3D"s2">"http://example.=
org/"</span><span class=3D"o">&gt;</span><span class=3D"n">example</span><s=
pan class=3D"o">.</span><span class=3D"n">org</span><span class=3D"o">&lt;/=
</span><span class=3D"n">a</span><span class=3D"o">&gt;</span>
        <span class=3D"ow">or</span> <span class=3D"o">&lt;</span><span cla=
ss=3D"n">a</span> <span class=3D"n">href</span><span class=3D"o">=3D</span>=
<span class=3D"s2">"http://example.com/"</span><span class=3D"o">&gt;</span=
><span class=3D"n">example</span><span class=3D"o">.</span><span class=3D"n=
">com</span><span class=3D"o">&lt;/</span><span class=3D"n">a</span><span c=
lass=3D"o">&gt;.&lt;/</span><span class=3D"n">p</span><span class=3D"o">&gt=
;</span>
    <span class=3D"o">&lt;/</span><span class=3D"n">body</span><span class=
=3D"o">&gt;</span>
<span class=3D"o">&lt;/</span><span class=3D"n">html</span><span class=3D"o=
">&gt;</span>
</pre></div>
</div>
<p>Example of changing the attribute =E2=80=9Ctarget=E2=80=9D of every link=
 in first paragraph:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" data-hidden=3D"false">&gt;&gt;&gt;</span><pre><span></span><=
span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"kn">from</span> <span =
class=3D"nn">xml.etree.ElementTree</span> <span class=3D"kn">import</span> =
<span class=3D"n">ElementTree</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">tree</span> <span =
class=3D"o">=3D</span> <span class=3D"n">ElementTree</span><span class=3D"p=
">()</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">tree</span><span c=
lass=3D"o">.</span><span class=3D"n">parse</span><span class=3D"p">(</span>=
<span class=3D"s2">"index.xhtml"</span><span class=3D"p">)</span>
<span class=3D"go">&lt;Element 'html' at 0xb77e6fac&gt;</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">p</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"n">tree</span><span class=3D"o">.</span>=
<span class=3D"n">find</span><span class=3D"p">(</span><span class=3D"s2">"=
body/p"</span><span class=3D"p">)</span>     <span class=3D"c1"># Finds fir=
st occurrence of tag p in body</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">p</span>
<span class=3D"go">&lt;Element 'p' at 0xb77ec26c&gt;</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">links</span> <span=
 class=3D"o">=3D</span> <span class=3D"nb">list</span><span class=3D"p">(</=
span><span class=3D"n">p</span><span class=3D"o">.</span><span class=3D"n">=
iter</span><span class=3D"p">(</span><span class=3D"s2">"a"</span><span cla=
ss=3D"p">))</span>   <span class=3D"c1"># Returns list of all links</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">links</span>
<span class=3D"go">[&lt;Element 'a' at 0xb77ec2ac&gt;, &lt;Element 'a' at 0=
xb77ec1cc&gt;]</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"k">for</span> <span c=
lass=3D"n">i</span> <span class=3D"ow">in</span> <span class=3D"n">links</s=
pan><span class=3D"p">:</span>             <span class=3D"c1"># Iterates th=
rough all found links</span>
<span class=3D"gp">... </span>    <span class=3D"n">i</span><span class=3D"=
o">.</span><span class=3D"n">attrib</span><span class=3D"p">[</span><span c=
lass=3D"s2">"target"</span><span class=3D"p">]</span> <span class=3D"o">=3D=
</span> <span class=3D"s2">"blank"</span>
<span class=3D"gp">...</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">tree</span><span c=
lass=3D"o">.</span><span class=3D"n">write</span><span class=3D"p">(</span>=
<span class=3D"s2">"output.xhtml"</span><span class=3D"p">)</span>
</pre></div>
</div>
</section>
<section id=3D"qname-objects">
<span id=3D"elementtree-qname-objects"></span><h3>QName Objects<a class=3D"=
headerlink" href=3D"https://docs.python.org/3/library/xml.etree.elementtree=
.html#qname-objects" title=3D"Link to this heading">=C2=B6</a></h3>
<dl class=3D"py class">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.QName">
<em class=3D"property"><span class=3D"pre">class</span><span class=3D"w"> <=
/span></em><span class=3D"sig-prename descclassname"><span class=3D"pre">xm=
l.etree.ElementTree.</span></span><span class=3D"sig-name descname"><span c=
lass=3D"pre">QName</span></span><span class=3D"sig-paren">(</span><em class=
=3D"sig-param"><span class=3D"n"><span class=3D"pre">text_or_uri</span></sp=
an></em>, <em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">tag=
</span></span><span class=3D"o"><span class=3D"pre">=3D</span></span><span =
class=3D"default_value"><span class=3D"pre">None</span></span></em><span cl=
ass=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.pyth=
on.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.QName" ti=
tle=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>QName wrapper.  This can be used to wrap a QName attribute value, in=
 order
to get proper namespace handling on output.  <em>text_or_uri</em> is a stri=
ng
containing the QName value, in the form {uri}local, or, if the tag argument
is given, the URI part of a QName.  If <em>tag</em> is given, the first arg=
ument is
interpreted as a URI, and this argument is interpreted as a local name.
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.QName" title=3D"xml.etree.E=
lementTree.QName"><code class=3D"xref py py-class docutils literal notransl=
ate"><span class=3D"pre">QName</span></code></a> instances are opaque.</p>
</dd></dl>

</section>
<section id=3D"treebuilder-objects">
<span id=3D"elementtree-treebuilder-objects"></span><h3>TreeBuilder Objects=
<a class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree=
.elementtree.html#treebuilder-objects" title=3D"Link to this heading">=C2=
=B6</a></h3>
<dl class=3D"py class">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.TreeBuilder">
<em class=3D"property"><span class=3D"pre">class</span><span class=3D"w"> <=
/span></em><span class=3D"sig-prename descclassname"><span class=3D"pre">xm=
l.etree.ElementTree.</span></span><span class=3D"sig-name descname"><span c=
lass=3D"pre">TreeBuilder</span></span><span class=3D"sig-paren">(</span><em=
 class=3D"sig-param"><span class=3D"n"><span class=3D"pre">element_factory<=
/span></span><span class=3D"o"><span class=3D"pre">=3D</span></span><span c=
lass=3D"default_value"><span class=3D"pre">None</span></span></em>, <em cla=
ss=3D"sig-param"><span class=3D"o"><span class=3D"pre">*</span></span></em>=
, <em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">comment_fac=
tory</span></span><span class=3D"o"><span class=3D"pre">=3D</span></span><s=
pan class=3D"default_value"><span class=3D"pre">None</span></span></em>, <e=
m class=3D"sig-param"><span class=3D"n"><span class=3D"pre">pi_factory</spa=
n></span><span class=3D"o"><span class=3D"pre">=3D</span></span><span class=
=3D"default_value"><span class=3D"pre">None</span></span></em>, <em class=
=3D"sig-param"><span class=3D"n"><span class=3D"pre">insert_comments</span>=
</span><span class=3D"o"><span class=3D"pre">=3D</span></span><span class=
=3D"default_value"><span class=3D"pre">False</span></span></em>, <em class=
=3D"sig-param"><span class=3D"n"><span class=3D"pre">insert_pis</span></spa=
n><span class=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"def=
ault_value"><span class=3D"pre">False</span></span></em><span class=3D"sig-=
paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/li=
brary/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder" title=
=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Generic element structure builder.  This builder converts a sequence=
 of
start, data, end, comment and pi method calls to a well-formed element
structure.  You can use this class to build an element structure using
a custom XML parser, or a parser for some other XML-like format.</p>
<p><em>element_factory</em>, when given, must be a callable accepting two p=
ositional
arguments: a tag and a dict of attributes.  It is expected to return a new
element instance.</p>
<p>The <em>comment_factory</em> and <em>pi_factory</em> functions, when giv=
en, should behave
like the <a class=3D"reference internal" href=3D"https://docs.python.org/3/=
library/xml.etree.elementtree.html#xml.etree.ElementTree.Comment" title=3D"=
xml.etree.ElementTree.Comment"><code class=3D"xref py py-func docutils lite=
ral notranslate"><span class=3D"pre">Comment()</span></code></a> and <a cla=
ss=3D"reference internal" href=3D"https://docs.python.org/3/library/xml.etr=
ee.elementtree.html#xml.etree.ElementTree.ProcessingInstruction" title=3D"x=
ml.etree.ElementTree.ProcessingInstruction"><code class=3D"xref py py-func =
docutils literal notranslate"><span class=3D"pre">ProcessingInstruction()</=
span></code></a> functions to
create comments and processing instructions.  When not given, the default
factories will be used.  When <em>insert_comments</em> and/or <em>insert_pi=
s</em> is true,
comments/pis will be inserted into the tree if they appear within the root
element (but not outside of it).</p>
<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.TreeBuilder.clo=
se">
<span class=3D"sig-name descname"><span class=3D"pre">close</span></span><s=
pan class=3D"sig-paren">(</span><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.element=
tree.html#xml.etree.ElementTree.TreeBuilder.close" title=3D"Link to this de=
finition">=C2=B6</a></dt>
<dd><p>Flushes the builder buffers, and returns the toplevel document
element.  Returns an <a class=3D"reference internal" href=3D"https://docs.p=
ython.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Elemen=
t" title=3D"xml.etree.ElementTree.Element"><code class=3D"xref py py-class =
docutils literal notranslate"><span class=3D"pre">Element</span></code></a>=
 instance.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.TreeBuilder.dat=
a">
<span class=3D"sig-name descname"><span class=3D"pre">data</span></span><sp=
an class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"><s=
pan class=3D"pre">data</span></span></em><span class=3D"sig-paren">)</span>=
<a class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree=
.elementtree.html#xml.etree.ElementTree.TreeBuilder.data" title=3D"Link to =
this definition">=C2=B6</a></dt>
<dd><p>Adds text to the current element.  <em>data</em> is a string.  This =
should be
either a bytestring, or a Unicode string.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.TreeBuilder.end=
">
<span class=3D"sig-name descname"><span class=3D"pre">end</span></span><spa=
n class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"><sp=
an class=3D"pre">tag</span></span></em><span class=3D"sig-paren">)</span><a=
 class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.e=
lementtree.html#xml.etree.ElementTree.TreeBuilder.end" title=3D"Link to thi=
s definition">=C2=B6</a></dt>
<dd><p>Closes the current element.  <em>tag</em> is the element name.  Retu=
rns the
closed element.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.TreeBuilder.sta=
rt">
<span class=3D"sig-name descname"><span class=3D"pre">start</span></span><s=
pan class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"><=
span class=3D"pre">tag</span></span></em>, <em class=3D"sig-param"><span cl=
ass=3D"n"><span class=3D"pre">attrs</span></span></em><span class=3D"sig-pa=
ren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/libr=
ary/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder.start" tit=
le=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Opens a new element.  <em>tag</em> is the element name.  <em>attrs</=
em> is a dictionary
containing element attributes.  Returns the opened element.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.TreeBuilder.com=
ment">
<span class=3D"sig-name descname"><span class=3D"pre">comment</span></span>=
<span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"=
><span class=3D"pre">text</span></span></em><span class=3D"sig-paren">)</sp=
an><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.et=
ree.elementtree.html#xml.etree.ElementTree.TreeBuilder.comment" title=3D"Li=
nk to this definition">=C2=B6</a></dt>
<dd><p>Creates a comment with the given <em>text</em>.  If <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">insert_comments</span></co=
de> is true,
this will also add it to the tree.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.TreeBuilder.pi"=
>
<span class=3D"sig-name descname"><span class=3D"pre">pi</span></span><span=
 class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"><spa=
n class=3D"pre">target</span></span></em>, <em class=3D"sig-param"><span cl=
ass=3D"n"><span class=3D"pre">text</span></span></em><span class=3D"sig-par=
en">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder.pi" title=
=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Creates a process instruction with the given <em>target</em> name an=
d <em>text</em>.
If <code class=3D"docutils literal notranslate"><span class=3D"pre">insert_=
pis</span></code> is true, this will also add it to the tree.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

<p>In addition, a custom <a class=3D"reference internal" href=3D"https://do=
cs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Tr=
eeBuilder" title=3D"xml.etree.ElementTree.TreeBuilder"><code class=3D"xref =
py py-class docutils literal notranslate"><span class=3D"pre">TreeBuilder</=
span></code></a> object can provide the
following methods:</p>
<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.TreeBuilder.doc=
type">
<span class=3D"sig-name descname"><span class=3D"pre">doctype</span></span>=
<span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"=
><span class=3D"pre">name</span></span></em>, <em class=3D"sig-param"><span=
 class=3D"n"><span class=3D"pre">pubid</span></span></em>, <em class=3D"sig=
-param"><span class=3D"n"><span class=3D"pre">system</span></span></em><spa=
n class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.=
python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.TreeB=
uilder.doctype" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Handles a doctype declaration.  <em>name</em> is the doctype name.  =
<em>pubid</em> is
the public identifier.  <em>system</em> is the system identifier.  This met=
hod
does not exist on the default <a class=3D"reference internal" href=3D"https=
://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTr=
ee.TreeBuilder" title=3D"xml.etree.ElementTree.TreeBuilder"><code class=3D"=
xref py py-class docutils literal notranslate"><span class=3D"pre">TreeBuil=
der</span></code></a> class.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.TreeBuilder.sta=
rt_ns">
<span class=3D"sig-name descname"><span class=3D"pre">start_ns</span></span=
><span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n=
"><span class=3D"pre">prefix</span></span></em>, <em class=3D"sig-param"><s=
pan class=3D"n"><span class=3D"pre">uri</span></span></em><span class=3D"si=
g-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/=
library/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder.start_=
ns" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>Is called whenever the parser encounters a new namespace declaration=
,
before the <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>start()</span></code> callback for the opening element that defines it.
<em>prefix</em> is <code class=3D"docutils literal notranslate"><span class=
=3D"pre">''</span></code> for the default namespace and the declared
namespace prefix name otherwise.  <em>uri</em> is the namespace URI.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.TreeBuilder.end=
_ns">
<span class=3D"sig-name descname"><span class=3D"pre">end_ns</span></span><=
span class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n">=
<span class=3D"pre">prefix</span></span></em><span class=3D"sig-paren">)</s=
pan><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.e=
tree.elementtree.html#xml.etree.ElementTree.TreeBuilder.end_ns" title=3D"Li=
nk to this definition">=C2=B6</a></dt>
<dd><p>Is called after the <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">end()</span></code> callback of an element that declared
a namespace prefix mapping, with the name of the <em>prefix</em> that went
out of scope.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

</dd></dl>

<dl class=3D"py class">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.C14NWriterTarge=
t">
<em class=3D"property"><span class=3D"pre">class</span><span class=3D"w"> <=
/span></em><span class=3D"sig-prename descclassname"><span class=3D"pre">xm=
l.etree.ElementTree.</span></span><span class=3D"sig-name descname"><span c=
lass=3D"pre">C14NWriterTarget</span></span><span class=3D"sig-paren">(</spa=
n><em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">write</span=
></span></em>, <em class=3D"sig-param"><span class=3D"o"><span class=3D"pre=
">*</span></span></em>, <em class=3D"sig-param"><span class=3D"n"><span cla=
ss=3D"pre">with_comments</span></span><span class=3D"o"><span class=3D"pre"=
>=3D</span></span><span class=3D"default_value"><span class=3D"pre">False</=
span></span></em>, <em class=3D"sig-param"><span class=3D"n"><span class=3D=
"pre">strip_text</span></span><span class=3D"o"><span class=3D"pre">=3D</sp=
an></span><span class=3D"default_value"><span class=3D"pre">False</span></s=
pan></em>, <em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">re=
write_prefixes</span></span><span class=3D"o"><span class=3D"pre">=3D</span=
></span><span class=3D"default_value"><span class=3D"pre">False</span></spa=
n></em>, <em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">qnam=
e_aware_tags</span></span><span class=3D"o"><span class=3D"pre">=3D</span><=
/span><span class=3D"default_value"><span class=3D"pre">None</span></span><=
/em>, <em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">qname_a=
ware_attrs</span></span><span class=3D"o"><span class=3D"pre">=3D</span></s=
pan><span class=3D"default_value"><span class=3D"pre">None</span></span></e=
m>, <em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">exclude_a=
ttrs</span></span><span class=3D"o"><span class=3D"pre">=3D</span></span><s=
pan class=3D"default_value"><span class=3D"pre">None</span></span></em>, <e=
m class=3D"sig-param"><span class=3D"n"><span class=3D"pre">exclude_tags</s=
pan></span><span class=3D"o"><span class=3D"pre">=3D</span></span><span cla=
ss=3D"default_value"><span class=3D"pre">None</span></span></em><span class=
=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.=
org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.C14NWriterTa=
rget" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>A <a class=3D"reference external" href=3D"https://www.w3.org/TR/xml-=
c14n2/">C14N 2.0</a> writer.  Arguments are the
same as for the <a class=3D"reference internal" href=3D"https://docs.python=
.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.canonicaliz=
e" title=3D"xml.etree.ElementTree.canonicalize"><code class=3D"xref py py-f=
unc docutils literal notranslate"><span class=3D"pre">canonicalize()</span>=
</code></a> function.  This class does not build a
tree but translates the callback events directly into a serialised form
using the <em>write</em> function.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

</section>
<section id=3D"xmlparser-objects">
<span id=3D"elementtree-xmlparser-objects"></span><h3>XMLParser Objects<a c=
lass=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.ele=
menttree.html#xmlparser-objects" title=3D"Link to this heading">=C2=B6</a><=
/h3>
<dl class=3D"py class">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.XMLParser">
<em class=3D"property"><span class=3D"pre">class</span><span class=3D"w"> <=
/span></em><span class=3D"sig-prename descclassname"><span class=3D"pre">xm=
l.etree.ElementTree.</span></span><span class=3D"sig-name descname"><span c=
lass=3D"pre">XMLParser</span></span><span class=3D"sig-paren">(</span><em c=
lass=3D"sig-param"><span class=3D"o"><span class=3D"pre">*</span></span></e=
m>, <em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">target</s=
pan></span><span class=3D"o"><span class=3D"pre">=3D</span></span><span cla=
ss=3D"default_value"><span class=3D"pre">None</span></span></em>, <em class=
=3D"sig-param"><span class=3D"n"><span class=3D"pre">encoding</span></span>=
<span class=3D"o"><span class=3D"pre">=3D</span></span><span class=3D"defau=
lt_value"><span class=3D"pre">None</span></span></em><span class=3D"sig-par=
en">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser" title=3D"Lin=
k to this definition">=C2=B6</a></dt>
<dd><p>This class is the low-level building block of the module.  It uses
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/p=
yexpat.html#module-xml.parsers.expat" title=3D"xml.parsers.expat: An interf=
ace to the Expat non-validating XML parser."><code class=3D"xref py py-mod =
docutils literal notranslate"><span class=3D"pre">xml.parsers.expat</span><=
/code></a> for efficient, event-based parsing of XML.  It can
be fed XML data incrementally with the <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.=
ElementTree.XMLParser.feed" title=3D"xml.etree.ElementTree.XMLParser.feed">=
<code class=3D"xref py py-meth docutils literal notranslate"><span class=3D=
"pre">feed()</span></code></a> method, and parsing
events are translated to a push API - by invoking callbacks on the <em>targ=
et</em>
object.  If <em>target</em> is omitted, the standard <a class=3D"reference =
internal" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.h=
tml#xml.etree.ElementTree.TreeBuilder" title=3D"xml.etree.ElementTree.TreeB=
uilder"><code class=3D"xref py py-class docutils literal notranslate"><span=
 class=3D"pre">TreeBuilder</span></code></a> is used.
If <em>encoding</em> <a class=3D"footnote-reference brackets" href=3D"https=
://docs.python.org/3/library/xml.etree.elementtree.html#id9" id=3D"id8" rol=
e=3D"doc-noteref"><span class=3D"fn-bracket">[</span>1<span class=3D"fn-bra=
cket">]</span></a> is given, the value overrides the
encoding specified in the XML file.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.8: </span>P=
arameters are now <a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3/glossary.html#keyword-only-parameter"><span class=3D"std std-ref">=
keyword-only</span></a>.
The <em>html</em> argument no longer supported.</p>
</div>
<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.XMLParser.close=
">
<span class=3D"sig-name descname"><span class=3D"pre">close</span></span><s=
pan class=3D"sig-paren">(</span><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.element=
tree.html#xml.etree.ElementTree.XMLParser.close" title=3D"Link to this defi=
nition">=C2=B6</a></dt>
<dd><p>Finishes feeding data to the parser.  Returns the result of calling =
the
<code class=3D"docutils literal notranslate"><span class=3D"pre">close()</s=
pan></code> method of the <em>target</em> passed during construction; by de=
fault,
this is the toplevel document element.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.XMLParser.feed"=
>
<span class=3D"sig-name descname"><span class=3D"pre">feed</span></span><sp=
an class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"><s=
pan class=3D"pre">data</span></span></em><span class=3D"sig-paren">)</span>=
<a class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree=
.elementtree.html#xml.etree.ElementTree.XMLParser.feed" title=3D"Link to th=
is definition">=C2=B6</a></dt>
<dd><p>Feeds data to the parser.  <em>data</em> is encoded data.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.XMLParser.flush=
">
<span class=3D"sig-name descname"><span class=3D"pre">flush</span></span><s=
pan class=3D"sig-paren">(</span><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.element=
tree.html#xml.etree.ElementTree.XMLParser.flush" title=3D"Link to this defi=
nition">=C2=B6</a></dt>
<dd><p>Triggers parsing of any previously fed unparsed data, which can be
used to ensure more immediate feedback, in particular with Expat &gt;=3D2.6=
.0.
The implementation of <a class=3D"reference internal" href=3D"https://docs.=
python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLPa=
rser.flush" title=3D"xml.etree.ElementTree.XMLParser.flush"><code class=3D"=
xref py py-meth docutils literal notranslate"><span class=3D"pre">flush()</=
span></code></a> temporarily disables reparse deferral
with Expat (if currently enabled) and triggers a reparse.
Disabling reparse deferral has security consequences; please see
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/p=
yexpat.html#xml.parsers.expat.xmlparser.SetReparseDeferralEnabled" title=3D=
"xml.parsers.expat.xmlparser.SetReparseDeferralEnabled"><code class=3D"xref=
 py py-meth docutils literal notranslate"><span class=3D"pre">xml.parsers.e=
xpat.xmlparser.SetReparseDeferralEnabled()</span></code></a> for details.</=
p>
<p>Note that <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser.flus=
h" title=3D"xml.etree.ElementTree.XMLParser.flush"><code class=3D"xref py p=
y-meth docutils literal notranslate"><span class=3D"pre">flush()</span></co=
de></a> has been backported to some prior releases of
CPython as a security fix.  Check for availability of <a class=3D"reference=
 internal" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.=
html#xml.etree.ElementTree.XMLParser.flush" title=3D"xml.etree.ElementTree.=
XMLParser.flush"><code class=3D"xref py py-meth docutils literal notranslat=
e"><span class=3D"pre">flush()</span></code></a>
using <a class=3D"reference internal" href=3D"https://docs.python.org/3/lib=
rary/functions.html#hasattr" title=3D"hasattr"><code class=3D"xref py py-fu=
nc docutils literal notranslate"><span class=3D"pre">hasattr()</span></code=
></a> if used in code running across a variety of Python
versions.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.12.3.</span></p=
>
</div>
</dd></dl>

<p><a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser.feed" title=3D=
"xml.etree.ElementTree.XMLParser.feed"><code class=3D"xref py py-meth docut=
ils literal notranslate"><span class=3D"pre">XMLParser.feed()</span></code>=
</a> calls <em>target</em>'s <code class=3D"docutils literal notranslate"><=
span class=3D"pre">start(tag,</span> <span class=3D"pre">attrs_dict)</span>=
</code> method
for each opening tag, its <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">end(tag)</span></code> method for each closing tag, and dat=
a
is processed by method <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">data(data)</span></code>.  For further supported callback
methods, see the <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilde=
r" title=3D"xml.etree.ElementTree.TreeBuilder"><code class=3D"xref py py-cl=
ass docutils literal notranslate"><span class=3D"pre">TreeBuilder</span></c=
ode></a> class.  <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser.=
close" title=3D"xml.etree.ElementTree.XMLParser.close"><code class=3D"xref =
py py-meth docutils literal notranslate"><span class=3D"pre">XMLParser.clos=
e()</span></code></a> calls
<em>target</em>'s method <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">close()</span></code>. <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.=
ElementTree.XMLParser" title=3D"xml.etree.ElementTree.XMLParser"><code clas=
s=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">XML=
Parser</span></code></a> can be used not only for
building a tree structure. This is an example of counting the maximum depth
of an XML file:</p>
<div class=3D"highlight-python3 notranslate"><div class=3D"highlight" style=
=3D"position: relative;"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" data-hidden=3D"false">&gt;&gt;&gt;</span><pre><span></span><=
span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"kn">from</span> <span =
class=3D"nn">xml.etree.ElementTree</span> <span class=3D"kn">import</span> =
<span class=3D"n">XMLParser</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"k">class</span> <span=
 class=3D"nc">MaxDepth</span><span class=3D"p">:</span>                    =
 <span class=3D"c1"># The target object of the parser</span>
<span class=3D"gp">... </span>    <span class=3D"n">maxDepth</span> <span c=
lass=3D"o">=3D</span> <span class=3D"mi">0</span>
<span class=3D"gp">... </span>    <span class=3D"n">depth</span> <span clas=
s=3D"o">=3D</span> <span class=3D"mi">0</span>
<span class=3D"gp">... </span>    <span class=3D"k">def</span> <span class=
=3D"nf">start</span><span class=3D"p">(</span><span class=3D"bp">self</span=
><span class=3D"p">,</span> <span class=3D"n">tag</span><span class=3D"p">,=
</span> <span class=3D"n">attrib</span><span class=3D"p">):</span>   <span =
class=3D"c1"># Called for each opening tag.</span>
<span class=3D"gp">... </span>        <span class=3D"bp">self</span><span c=
lass=3D"o">.</span><span class=3D"n">depth</span> <span class=3D"o">+=3D</s=
pan> <span class=3D"mi">1</span>
<span class=3D"gp">... </span>        <span class=3D"k">if</span> <span cla=
ss=3D"bp">self</span><span class=3D"o">.</span><span class=3D"n">depth</spa=
n> <span class=3D"o">&gt;</span> <span class=3D"bp">self</span><span class=
=3D"o">.</span><span class=3D"n">maxDepth</span><span class=3D"p">:</span>
<span class=3D"gp">... </span>            <span class=3D"bp">self</span><sp=
an class=3D"o">.</span><span class=3D"n">maxDepth</span> <span class=3D"o">=
=3D</span> <span class=3D"bp">self</span><span class=3D"o">.</span><span cl=
ass=3D"n">depth</span>
<span class=3D"gp">... </span>    <span class=3D"k">def</span> <span class=
=3D"nf">end</span><span class=3D"p">(</span><span class=3D"bp">self</span><=
span class=3D"p">,</span> <span class=3D"n">tag</span><span class=3D"p">):<=
/span>             <span class=3D"c1"># Called for each closing tag.</span>
<span class=3D"gp">... </span>        <span class=3D"bp">self</span><span c=
lass=3D"o">.</span><span class=3D"n">depth</span> <span class=3D"o">-=3D</s=
pan> <span class=3D"mi">1</span>
<span class=3D"gp">... </span>    <span class=3D"k">def</span> <span class=
=3D"nf">data</span><span class=3D"p">(</span><span class=3D"bp">self</span>=
<span class=3D"p">,</span> <span class=3D"n">data</span><span class=3D"p">)=
:</span>
<span class=3D"gp">... </span>        <span class=3D"k">pass</span>        =
    <span class=3D"c1"># We do not need to do anything with data.</span>
<span class=3D"gp">... </span>    <span class=3D"k">def</span> <span class=
=3D"nf">close</span><span class=3D"p">(</span><span class=3D"bp">self</span=
><span class=3D"p">):</span>    <span class=3D"c1"># Called when all data h=
as been parsed.</span>
<span class=3D"gp">... </span>        <span class=3D"k">return</span> <span=
 class=3D"bp">self</span><span class=3D"o">.</span><span class=3D"n">maxDep=
th</span>
<span class=3D"gp">...</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">target</span> <spa=
n class=3D"o">=3D</span> <span class=3D"n">MaxDepth</span><span class=3D"p"=
>()</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">parser</span> <spa=
n class=3D"o">=3D</span> <span class=3D"n">XMLParser</span><span class=3D"p=
">(</span><span class=3D"n">target</span><span class=3D"o">=3D</span><span =
class=3D"n">target</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">exampleXml</span> =
<span class=3D"o">=3D</span> <span class=3D"s2">"""</span>
<span class=3D"gp">... </span><span class=3D"s2">&lt;a&gt;</span>
<span class=3D"gp">... </span><span class=3D"s2">  &lt;b&gt;</span>
<span class=3D"gp">... </span><span class=3D"s2">  &lt;/b&gt;</span>
<span class=3D"gp">... </span><span class=3D"s2">  &lt;b&gt;</span>
<span class=3D"gp">... </span><span class=3D"s2">    &lt;c&gt;</span>
<span class=3D"gp">... </span><span class=3D"s2">      &lt;d&gt;</span>
<span class=3D"gp">... </span><span class=3D"s2">      &lt;/d&gt;</span>
<span class=3D"gp">... </span><span class=3D"s2">    &lt;/c&gt;</span>
<span class=3D"gp">... </span><span class=3D"s2">  &lt;/b&gt;</span>
<span class=3D"gp">... </span><span class=3D"s2">&lt;/a&gt;"""</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">parser</span><span=
 class=3D"o">.</span><span class=3D"n">feed</span><span class=3D"p">(</span=
><span class=3D"n">exampleXml</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">parser</span><span=
 class=3D"o">.</span><span class=3D"n">close</span><span class=3D"p">()</sp=
an>
<span class=3D"go">4</span>
</pre></div>
</div>
</dd></dl>

</section>
<section id=3D"xmlpullparser-objects">
<span id=3D"elementtree-xmlpullparser-objects"></span><h3>XMLPullParser Obj=
ects<a class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.e=
tree.elementtree.html#xmlpullparser-objects" title=3D"Link to this heading"=
>=C2=B6</a></h3>
<dl class=3D"py class">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.XMLPullParser">
<em class=3D"property"><span class=3D"pre">class</span><span class=3D"w"> <=
/span></em><span class=3D"sig-prename descclassname"><span class=3D"pre">xm=
l.etree.ElementTree.</span></span><span class=3D"sig-name descname"><span c=
lass=3D"pre">XMLPullParser</span></span><span class=3D"sig-paren">(</span><=
em class=3D"sig-param"><span class=3D"n"><span class=3D"pre">events</span><=
/span><span class=3D"o"><span class=3D"pre">=3D</span></span><span class=3D=
"default_value"><span class=3D"pre">None</span></span></em><span class=3D"s=
ig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3=
/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLPullParser" ti=
tle=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>A pull parser suitable for non-blocking applications.  Its input-sid=
e API is
similar to that of <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParse=
r" title=3D"xml.etree.ElementTree.XMLParser"><code class=3D"xref py py-clas=
s docutils literal notranslate"><span class=3D"pre">XMLParser</span></code>=
</a>, but instead of pushing calls to a
callback target, <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLPullPar=
ser" title=3D"xml.etree.ElementTree.XMLPullParser"><code class=3D"xref py p=
y-class docutils literal notranslate"><span class=3D"pre">XMLPullParser</sp=
an></code></a> collects an internal list of parsing
events and lets the user read from it. <em>events</em> is a sequence of eve=
nts to
report back.  The supported events are the strings <code class=3D"docutils =
literal notranslate"><span class=3D"pre">"start"</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">"end"</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">"comment"<=
/span></code>, <code class=3D"docutils literal notranslate"><span class=3D"=
pre">"pi"</span></code>, <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">"start-ns"</span></code> and <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">"end-ns"</span></code> (the =E2=80=9Cns=
=E2=80=9D events
are used to get detailed namespace information).  If <em>events</em> is omi=
tted,
only <code class=3D"docutils literal notranslate"><span class=3D"pre">"end"=
</span></code> events are reported.</p>
<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.XMLPullParser.f=
eed">
<span class=3D"sig-name descname"><span class=3D"pre">feed</span></span><sp=
an class=3D"sig-paren">(</span><em class=3D"sig-param"><span class=3D"n"><s=
pan class=3D"pre">data</span></span></em><span class=3D"sig-paren">)</span>=
<a class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree=
.elementtree.html#xml.etree.ElementTree.XMLPullParser.feed" title=3D"Link t=
o this definition">=C2=B6</a></dt>
<dd><p>Feed the given bytes data to the parser.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.XMLPullParser.f=
lush">
<span class=3D"sig-name descname"><span class=3D"pre">flush</span></span><s=
pan class=3D"sig-paren">(</span><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.element=
tree.html#xml.etree.ElementTree.XMLPullParser.flush" title=3D"Link to this =
definition">=C2=B6</a></dt>
<dd><p>Triggers parsing of any previously fed unparsed data, which can be
used to ensure more immediate feedback, in particular with Expat &gt;=3D2.6=
.0.
The implementation of <a class=3D"reference internal" href=3D"https://docs.=
python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLPu=
llParser.flush" title=3D"xml.etree.ElementTree.XMLPullParser.flush"><code c=
lass=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">f=
lush()</span></code></a> temporarily disables reparse deferral
with Expat (if currently enabled) and triggers a reparse.
Disabling reparse deferral has security consequences; please see
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/p=
yexpat.html#xml.parsers.expat.xmlparser.SetReparseDeferralEnabled" title=3D=
"xml.parsers.expat.xmlparser.SetReparseDeferralEnabled"><code class=3D"xref=
 py py-meth docutils literal notranslate"><span class=3D"pre">xml.parsers.e=
xpat.xmlparser.SetReparseDeferralEnabled()</span></code></a> for details.</=
p>
<p>Note that <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLPullParser.=
flush" title=3D"xml.etree.ElementTree.XMLPullParser.flush"><code class=3D"x=
ref py py-meth docutils literal notranslate"><span class=3D"pre">flush()</s=
pan></code></a> has been backported to some prior releases of
CPython as a security fix.  Check for availability of <a class=3D"reference=
 internal" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.=
html#xml.etree.ElementTree.XMLPullParser.flush" title=3D"xml.etree.ElementT=
ree.XMLPullParser.flush"><code class=3D"xref py py-meth docutils literal no=
translate"><span class=3D"pre">flush()</span></code></a>
using <a class=3D"reference internal" href=3D"https://docs.python.org/3/lib=
rary/functions.html#hasattr" title=3D"hasattr"><code class=3D"xref py py-fu=
nc docutils literal notranslate"><span class=3D"pre">hasattr()</span></code=
></a> if used in code running across a variety of Python
versions.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.12.3.</span></p=
>
</div>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.XMLPullParser.c=
lose">
<span class=3D"sig-name descname"><span class=3D"pre">close</span></span><s=
pan class=3D"sig-paren">(</span><span class=3D"sig-paren">)</span><a class=
=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.element=
tree.html#xml.etree.ElementTree.XMLPullParser.close" title=3D"Link to this =
definition">=C2=B6</a></dt>
<dd><p>Signal the parser that the data stream is terminated. Unlike
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/x=
ml.etree.elementtree.html#xml.etree.ElementTree.XMLParser.close" title=3D"x=
ml.etree.ElementTree.XMLParser.close"><code class=3D"xref py py-meth docuti=
ls literal notranslate"><span class=3D"pre">XMLParser.close()</span></code>=
</a>, this method always returns <a class=3D"reference internal" href=3D"ht=
tps://docs.python.org/3/library/constants.html#None" title=3D"None"><code c=
lass=3D"xref py py-const docutils literal notranslate"><span class=3D"pre">=
None</span></code></a>.
Any events not yet retrieved when the parser is closed can still be
read with <a class=3D"reference internal" href=3D"https://docs.python.org/3=
/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLPullParser.rea=
d_events" title=3D"xml.etree.ElementTree.XMLPullParser.read_events"><code c=
lass=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">r=
ead_events()</span></code></a>.</p>
</dd></dl>

<dl class=3D"py method">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.XMLPullParser.r=
ead_events">
<span class=3D"sig-name descname"><span class=3D"pre">read_events</span></s=
pan><span class=3D"sig-paren">(</span><span class=3D"sig-paren">)</span><a =
class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.el=
ementtree.html#xml.etree.ElementTree.XMLPullParser.read_events" title=3D"Li=
nk to this definition">=C2=B6</a></dt>
<dd><p>Return an iterator over the events which have been encountered in th=
e
data fed to the
parser.  The iterator yields <code class=3D"docutils literal notranslate"><=
span class=3D"pre">(event,</span> <span class=3D"pre">elem)</span></code> p=
airs, where <em>event</em> is a
string representing the type of event (e.g. <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">"end"</span></code>) and <em>elem</em> is=
 the
encountered <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element" title=
=3D"xml.etree.ElementTree.Element"><code class=3D"xref py py-class docutils=
 literal notranslate"><span class=3D"pre">Element</span></code></a> object,=
 or other context value as follows.</p>
<ul class=3D"simple">
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">sta=
rt</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">end</span></code>: the current Element.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">com=
ment</span></code>, <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">pi</span></code>: the current comment / processing instruction</p=
></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">sta=
rt-ns</span></code>: a tuple <code class=3D"docutils literal notranslate"><=
span class=3D"pre">(prefix,</span> <span class=3D"pre">uri)</span></code> n=
aming the declared namespace
mapping.</p></li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">end=
-ns</span></code>: <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/library/constants.html#None" title=3D"None"><code class=3D"xref p=
y py-const docutils literal notranslate"><span class=3D"pre">None</span></c=
ode></a> (this may change in a future version)</p></li>
</ul>
<p>Events provided in a previous call to <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etre=
e.ElementTree.XMLPullParser.read_events" title=3D"xml.etree.ElementTree.XML=
PullParser.read_events"><code class=3D"xref py py-meth docutils literal not=
ranslate"><span class=3D"pre">read_events()</span></code></a> will not be
yielded again.  Events are consumed from the internal queue only when
they are retrieved from the iterator, so multiple readers iterating in
parallel over iterators obtained from <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.=
ElementTree.XMLPullParser.read_events" title=3D"xml.etree.ElementTree.XMLPu=
llParser.read_events"><code class=3D"xref py py-meth docutils literal notra=
nslate"><span class=3D"pre">read_events()</span></code></a> will have
unpredictable results.</p>
</dd></dl>

<div class=3D"admonition note">
<p class=3D"admonition-title">Note</p>
<p><a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/xml.etree.elementtree.html#xml.etree.ElementTree.XMLPullParser" title=3D"=
xml.etree.ElementTree.XMLPullParser"><code class=3D"xref py py-class docuti=
ls literal notranslate"><span class=3D"pre">XMLPullParser</span></code></a>=
 only guarantees that it has seen the =E2=80=9C&gt;=E2=80=9D
character of a starting tag when it emits a =E2=80=9Cstart=E2=80=9D event, =
so the
attributes are defined, but the contents of the text and tail attributes
are undefined at that point.  The same applies to the element children;
they may or may not be present.</p>
<p>If you need a fully populated element, look for =E2=80=9Cend=E2=80=9D ev=
ents instead.</p>
</div>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">Added in version 3.4.</span></p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.8: </span>T=
he <code class=3D"docutils literal notranslate"><span class=3D"pre">comment=
</span></code> and <code class=3D"docutils literal notranslate"><span class=
=3D"pre">pi</span></code> events were added.</p>
</div>
</dd></dl>

</section>
<section id=3D"exceptions">
<h3>Exceptions<a class=3D"headerlink" href=3D"https://docs.python.org/3/lib=
rary/xml.etree.elementtree.html#exceptions" title=3D"Link to this heading">=
=C2=B6</a></h3>
<dl class=3D"py class">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.ParseError">
<em class=3D"property"><span class=3D"pre">class</span><span class=3D"w"> <=
/span></em><span class=3D"sig-prename descclassname"><span class=3D"pre">xm=
l.etree.ElementTree.</span></span><span class=3D"sig-name descname"><span c=
lass=3D"pre">ParseError</span></span><a class=3D"headerlink" href=3D"https:=
//docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTre=
e.ParseError" title=3D"Link to this definition">=C2=B6</a></dt>
<dd><p>XML parse error, raised by the various parsing methods in this modul=
e when
parsing fails.  The string representation of an instance of this exception
will contain a user-friendly error message.  In addition, it will have
the following attributes available:</p>
<dl class=3D"py attribute">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.ParseError.code=
">
<span class=3D"sig-name descname"><span class=3D"pre">code</span></span><a =
class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etree.el=
ementtree.html#xml.etree.ElementTree.ParseError.code" title=3D"Link to this=
 definition">=C2=B6</a></dt>
<dd><p>A numeric error code from the expat parser. See the documentation of
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/p=
yexpat.html#module-xml.parsers.expat" title=3D"xml.parsers.expat: An interf=
ace to the Expat non-validating XML parser."><code class=3D"xref py py-mod =
docutils literal notranslate"><span class=3D"pre">xml.parsers.expat</span><=
/code></a> for the list of error codes and their meanings.</p>
</dd></dl>

<dl class=3D"py attribute">
<dt class=3D"sig sig-object py" id=3D"xml.etree.ElementTree.ParseError.posi=
tion">
<span class=3D"sig-name descname"><span class=3D"pre">position</span></span=
><a class=3D"headerlink" href=3D"https://docs.python.org/3/library/xml.etre=
e.elementtree.html#xml.etree.ElementTree.ParseError.position" title=3D"Link=
 to this definition">=C2=B6</a></dt>
<dd><p>A tuple of <em>line</em>, <em>column</em> numbers, specifying where =
the error occurred.</p>
</dd></dl>

</dd></dl>

<p class=3D"rubric">Footnotes</p>
<aside class=3D"footnote-list brackets">
<aside class=3D"footnote brackets" id=3D"id9" role=3D"doc-footnote">
<span class=3D"label"><span class=3D"fn-bracket">[</span>1<span class=3D"fn=
-bracket">]</span></span>
<span class=3D"backrefs">(<a role=3D"doc-backlink" href=3D"https://docs.pyt=
hon.org/3/library/xml.etree.elementtree.html#id1">1</a>,<a role=3D"doc-back=
link" href=3D"https://docs.python.org/3/library/xml.etree.elementtree.html#=
id2">2</a>,<a role=3D"doc-backlink" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#id6">3</a>,<a role=3D"doc-backlink" href=3D"h=
ttps://docs.python.org/3/library/xml.etree.elementtree.html#id8">4</a>)</sp=
an>
<p>The encoding string included in XML output should conform to the
appropriate standards.  For example, =E2=80=9CUTF-8=E2=80=9D is valid, but =
=E2=80=9CUTF8=E2=80=9D is
not.  See <a class=3D"reference external" href=3D"https://www.w3.org/TR/200=
6/REC-xml11-20060816/#NT-EncodingDecl">https://www.w3.org/TR/2006/REC-xml11=
-20060816/#NT-EncodingDecl</a>
and <a class=3D"reference external" href=3D"https://www.iana.org/assignment=
s/character-sets/character-sets.xhtml">https://www.iana.org/assignments/cha=
racter-sets/character-sets.xhtml</a>.</p>
</aside>
</aside>
</section>
</section>
</section>


            <div class=3D"clearer"></div>
          </div>
        </div>
      </div>
      <div class=3D"sphinxsidebar" role=3D"navigation" aria-label=3D"main n=
avigation">
        <div class=3D"sphinxsidebarwrapper">
  <div>
    <h3><a href=3D"https://docs.python.org/3/contents.html">Table of Conten=
ts</a></h3>
    <ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#"><code class=3D"xref py py-mod docutils lite=
ral notranslate"><span class=3D"pre">xml.etree.ElementTree</span></code> =
=E2=80=94 The ElementTree XML API</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#tutorial">Tutorial</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#xml-tree-and-elements">XML tree and elements<=
/a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#parsing-xml">Parsing XML</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#pull-api-for-non-blocking-parsing">Pull API f=
or non-blocking parsing</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#finding-interesting-elements">Finding interes=
ting elements</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#modifying-an-xml-file">Modifying an XML File<=
/a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#building-xml-documents">Building XML document=
s</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#parsing-xml-with-namespaces">Parsing XML with=
 Namespaces</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#xpath-support">XPath support</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#example">Example</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#supported-xpath-syntax">Supported XPath synta=
x</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#reference">Reference</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#functions">Functions</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#xinclude-support">XInclude support</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#id3">Example</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#id4">Reference</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#elementinclude-functions">Functions</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#element-objects">Element Objects</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#elementtree-objects">ElementTree Objects</a><=
/li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#qname-objects">QName Objects</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#treebuilder-objects">TreeBuilder Objects</a><=
/li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#xmlparser-objects">XMLParser Objects</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#xmlpullparser-objects">XMLPullParser Objects<=
/a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/xml.etree.elementtree.html#exceptions">Exceptions</a></li>
</ul>
</li>
</ul>
</li>
</ul>

  </div>
  <div>
    <h4>Previous topic</h4>
    <p class=3D"topless"><a href=3D"https://docs.python.org/3/library/xml.h=
tml" title=3D"previous chapter">XML Processing Modules</a></p>
  </div>
  <div>
    <h4>Next topic</h4>
    <p class=3D"topless"><a href=3D"https://docs.python.org/3/library/xml.d=
om.html" title=3D"next chapter"><code class=3D"xref py py-mod docutils lite=
ral notranslate"><span class=3D"pre">xml.dom</span></code> =E2=80=94 The Do=
cument Object Model API</a></p>
  </div>
  <div role=3D"note" aria-label=3D"source link">
    <h3>This Page</h3>
    <ul class=3D"this-page-menu">
      <li><a href=3D"https://docs.python.org/3/bugs.html">Report a Bug</a><=
/li>
      <li>
        <a href=3D"https://github.com/python/cpython/blob/main/Doc/library/=
xml.etree.elementtree.rst" rel=3D"nofollow">Show Source
        </a>
      </li>
    </ul>
  </div>
        </div>
<div id=3D"sidebarbutton" title=3D"Collapse sidebar">
<span>=C2=AB</span>
</div>

      </div>
      <div class=3D"clearer"></div>
    </div> =20
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"https://docs.python.org/3/genindex.html" title=3D"Gene=
ral Index">index</a></li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/py-modindex.html" title=3D"P=
ython Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/xml.dom.html" title=
=3D"xml.dom =E2=80=94 The Document Object Model API">next</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/library/xml.html" title=3D"X=
ML Processing Modules">previous</a> |</li>

          <li><img src=3D"https://docs.python.org/3/_static/py.svg" alt=3D"=
Python logo" style=3D"vertical-align: middle; margin-top: -1px"></li>
          <li><a href=3D"https://www.python.org/">Python</a> =C2=BB</li>
          <li class=3D"switchers">
            <div class=3D"language_switcher_placeholder"><select id=3D"lang=
uage_select"><option value=3D"en" selected=3D"selected">English</option><op=
tion value=3D"es">Spanish</option><option value=3D"fr">French</option><opti=
on value=3D"ja">Japanese</option><option value=3D"ko">Korean</option><optio=
n value=3D"pt-br">Brazilian Portuguese</option><option value=3D"tr">Turkish=
</option><option value=3D"zh-cn">Simplified Chinese</option><option value=
=3D"zh-tw">Traditional Chinese</option></select></div>
            <div class=3D"version_switcher_placeholder"><select id=3D"versi=
on_select"><option value=3D"3.14">dev (3.14)</option><option value=3D"3.13"=
>pre (3.13)</option><option value=3D"3.12" selected=3D"selected">3.12.3</op=
tion><option value=3D"3.11">3.11</option><option value=3D"3.10">3.10</optio=
n><option value=3D"3.9">3.9</option><option value=3D"3.8">3.8</option><opti=
on value=3D"3.7">3.7</option><option value=3D"3.6">3.6</option><option valu=
e=3D"3.5">3.5</option><option value=3D"3.4">3.4</option><option value=3D"3.=
3">3.3</option><option value=3D"3.2">3.2</option><option value=3D"3.1">3.1<=
/option><option value=3D"3.0">3.0</option><option value=3D"2.7">2.7</option=
><option value=3D"2.6">2.6</option></select></div>
          </li>
          <li>
             =20
          </li>
    <li id=3D"cpython-language-and-version">
      <a href=3D"https://docs.python.org/3/index.html">3.12.3 Documentation=
</a> =C2=BB
    </li>

          <li class=3D"nav-item nav-item-1"><a href=3D"https://docs.python.=
org/3/library/index.html">The Python Standard Library</a> =C2=BB</li>
          <li class=3D"nav-item nav-item-2"><a href=3D"https://docs.python.=
org/3/library/markup.html">Structured Markup Processing Tools</a> =C2=BB</l=
i>
        <li class=3D"nav-item nav-item-this"><a href=3D"https://docs.python=
.org/3/library/xml.etree.elementtree.html"><code class=3D"xref py py-mod do=
cutils literal notranslate"><span class=3D"pre">xml.etree.ElementTree</span=
></code> =E2=80=94 The ElementTree XML API</a></li>
                <li class=3D"right">
                   =20

    <div class=3D"inline-search" role=3D"search">
        <form class=3D"inline-search" action=3D"https://docs.python.org/3/s=
earch.html" method=3D"get">
          <input placeholder=3D"Quick search" aria-label=3D"Quick search" t=
ype=3D"search" name=3D"q" id=3D"search-box">
          <input type=3D"submit" value=3D"Go">
        </form>
    </div>
                     |
                </li>
            <li class=3D"right">
<label class=3D"theme-selector-label">
    Theme
    <select class=3D"theme-selector">
        <option value=3D"auto" selected=3D"">Auto</option>
        <option value=3D"light">Light</option>
        <option value=3D"dark">Dark</option>
    </select>
</label> |</li>
           =20
      </ul>
    </div> =20
    <div class=3D"footer">
    =C2=A9=20
      <a href=3D"https://docs.python.org/3/copyright.html">
   =20
    Copyright
   =20
      </a>
     2001-2024, Python Software Foundation.
    <br>
    This page is licensed under the Python Software Foundation License Vers=
ion 2.
    <br>
    Examples, recipes, and other code in the documentation are additionally=
 licensed under the Zero Clause BSD License.
    <br>
   =20
      See <a href=3D"https://docs.python.org/license.html">History and Lice=
nse</a> for more information.<br>
   =20
   =20
    <br>

    The Python Software Foundation is a non-profit corporation.
<a href=3D"https://www.python.org/psf/donations/">Please donate.</a>
<br>
    <br>
      Last updated on May 27, 2024 (20:32 UTC).
   =20
      <a href=3D"https://docs.python.org/bugs.html">Found a bug</a>?
   =20
    <br>

    Created using <a href=3D"https://www.sphinx-doc.org/">Sphinx</a> 7.3.7.
    </div>

   =20
 =20
</body></html>
------MultipartBoundary--2oRdm3qoMV0IuZlLWYQbNx1ZYg7nx2vL5gv1H2XWYp----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-9fb2dc98-b20a-49ed-b54d-a96d09861490@mhtml.blink

@charset "utf-8";

@media only screen {
  table.full-width-table { width: 100%; }
}
------MultipartBoundary--2oRdm3qoMV0IuZlLWYQbNx1ZYg7nx2vL5gv1H2XWYp----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/pygments.css?v=80d5e7a1

@charset "utf-8";

pre { line-height: 125%; }

td.linenos .normal { color: inherit; background-color: transparent; padding=
-left: 5px; padding-right: 5px; }

span.linenos { color: inherit; background-color: transparent; padding-left:=
 5px; padding-right: 5px; }

td.linenos .special { color: rgb(0, 0, 0); background-color: rgb(255, 255, =
192); padding-left: 5px; padding-right: 5px; }

span.linenos.special { color: rgb(0, 0, 0); background-color: rgb(255, 255,=
 192); padding-left: 5px; padding-right: 5px; }

.highlight .hll { background-color: rgb(255, 255, 204); }

.highlight { background: rgb(248, 248, 248); }

.highlight .c { color: rgb(61, 123, 123); font-style: italic; }

.highlight .err { border: 1px solid rgb(255, 0, 0); }

.highlight .k { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .o { color: rgb(102, 102, 102); }

.highlight .ch { color: rgb(61, 123, 123); font-style: italic; }

.highlight .cm { color: rgb(61, 123, 123); font-style: italic; }

.highlight .cp { color: rgb(156, 101, 0); }

.highlight .cpf { color: rgb(61, 123, 123); font-style: italic; }

.highlight .c1 { color: rgb(61, 123, 123); font-style: italic; }

.highlight .cs { color: rgb(61, 123, 123); font-style: italic; }

.highlight .gd { color: rgb(160, 0, 0); }

.highlight .ge { font-style: italic; }

.highlight .ges { font-weight: bold; font-style: italic; }

.highlight .gr { color: rgb(228, 0, 0); }

.highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gi { color: rgb(0, 132, 0); }

.highlight .go { color: rgb(113, 113, 113); }

.highlight .gp { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.highlight .gt { color: rgb(0, 68, 221); }

.highlight .kc { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .kd { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .kn { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .kp { color: rgb(0, 128, 0); }

.highlight .kr { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .kt { color: rgb(176, 0, 64); }

.highlight .m { color: rgb(102, 102, 102); }

.highlight .s { color: rgb(186, 33, 33); }

.highlight .na { color: rgb(104, 120, 34); }

.highlight .nb { color: rgb(0, 128, 0); }

.highlight .nc { color: rgb(0, 0, 255); font-weight: bold; }

.highlight .no { color: rgb(136, 0, 0); }

.highlight .nd { color: rgb(170, 34, 255); }

.highlight .ni { color: rgb(113, 113, 113); font-weight: bold; }

.highlight .ne { color: rgb(203, 63, 56); font-weight: bold; }

.highlight .nf { color: rgb(0, 0, 255); }

.highlight .nl { color: rgb(118, 118, 0); }

.highlight .nn { color: rgb(0, 0, 255); font-weight: bold; }

.highlight .nt { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .nv { color: rgb(25, 23, 124); }

.highlight .ow { color: rgb(170, 34, 255); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mb { color: rgb(102, 102, 102); }

.highlight .mf { color: rgb(102, 102, 102); }

.highlight .mh { color: rgb(102, 102, 102); }

.highlight .mi { color: rgb(102, 102, 102); }

.highlight .mo { color: rgb(102, 102, 102); }

.highlight .sa { color: rgb(186, 33, 33); }

.highlight .sb { color: rgb(186, 33, 33); }

.highlight .sc { color: rgb(186, 33, 33); }

.highlight .dl { color: rgb(186, 33, 33); }

.highlight .sd { color: rgb(186, 33, 33); font-style: italic; }

.highlight .s2 { color: rgb(186, 33, 33); }

.highlight .se { color: rgb(170, 93, 31); font-weight: bold; }

.highlight .sh { color: rgb(186, 33, 33); }

.highlight .si { color: rgb(164, 90, 119); font-weight: bold; }

.highlight .sx { color: rgb(0, 128, 0); }

.highlight .sr { color: rgb(164, 90, 119); }

.highlight .s1 { color: rgb(186, 33, 33); }

.highlight .ss { color: rgb(25, 23, 124); }

.highlight .bp { color: rgb(0, 128, 0); }

.highlight .fm { color: rgb(0, 0, 255); }

.highlight .vc { color: rgb(25, 23, 124); }

.highlight .vg { color: rgb(25, 23, 124); }

.highlight .vi { color: rgb(25, 23, 124); }

.highlight .vm { color: rgb(25, 23, 124); }

.highlight .il { color: rgb(102, 102, 102); }
------MultipartBoundary--2oRdm3qoMV0IuZlLWYQbNx1ZYg7nx2vL5gv1H2XWYp----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/pydoctheme.css?v=bb723527

@charset "utf-8";

@import url("classic.css");

div.document, div.body, div.related, div.body h1, div.body h2, div.body h3,=
 div.body h4, div.body h5, div.body h6, div.sphinxsidebar a, div.sphinxside=
bar p, div.sphinxsidebar ul, div.sphinxsidebar h3, div.sphinxsidebar h3 a, =
div.sphinxsidebar h4, .menu a, .menu p, .menu ul, .menu h3, .menu h3 a, .me=
nu h4, table.docutils td, table.indextable tr.cap, pre { background-color: =
inherit; color: inherit; }

a[href] { text-decoration: underline 1px; }

a[href]:has(> code) { text-underline-offset: 0.25em; }

a.headerlink, div.genindex-jumpbox a, div.modindex-jumpbox a, div#search-re=
sults a, div.sphinxsidebar a, div.toctree-wrapper a, div[role=3D"navigation=
"] a, table.contentstable a, table.indextable a { text-decoration: none; }

div.genindex-jumpbox a:hover, div.modindex-jumpbox a:hover, div#search-resu=
lts a:hover, div.sphinxsidebar a:hover, div.toctree-wrapper a:hover, div[ro=
le=3D"navigation"] a:hover, table.contentstable a:hover, table.indextable a=
:hover { text-decoration: underline; text-underline-offset: auto; }

body { margin-left: 1em; margin-right: 1em; }

.mobile-nav, .menu-wrapper { display: none; }

div.related { margin-top: 0.5em; margin-bottom: 1.2em; padding: 0.5em 0px; =
border-width: 1px; border-color: rgb(204, 204, 204); }

.mobile-nav + div.related { border-bottom-style: solid; }

.document + div.related { border-top-style: solid; }

div.related a:hover { color: rgb(0, 149, 196); }

.related .switchers { display: inline-flex; }

.switchers > div { margin-right: 5px; }

div.related ul::after { content: ""; clear: both; display: block; }

.inline-search, form.inline-search input { display: inline; }

form.inline-search input[type=3D"submit"] { width: 40px; }

div.document { display: flex; overflow-wrap: break-word; }

span.pre { white-space: unset; }

div.sphinxsidebar { float: none; position: sticky; top: 0px; max-height: 10=
0vh; color: rgb(68, 68, 68); background-color: rgb(238, 238, 238); border-r=
adius: 5px; line-height: 130%; font-size: smaller; }

div.sphinxsidebar h3, div.sphinxsidebar h4 { margin-top: 1.5em; }

div.sphinxsidebarwrapper { width: 217px; box-sizing: border-box; height: 10=
0%; overflow: hidden auto; float: left; }

div.sphinxsidebarwrapper > h3:first-child { margin-top: 0.2em; }

div.sphinxsidebarwrapper > ul > li > ul > li { margin-bottom: 0.4em; }

div.sphinxsidebar a:hover { color: rgb(0, 149, 196); }

form.inline-search input, div.sphinxsidebar input, div.related input { font=
-family: -apple-system, BlinkMacSystemFont, "avenir next", avenir, "segoe u=
i", "helvetica neue", helvetica, Cantarell, Ubuntu, roboto, noto, arial, sa=
ns-serif; border: 1px solid rgb(153, 153, 153); font-size: smaller; border-=
radius: 3px; }

div.sphinxsidebar input[type=3D"text"] { max-width: 150px; }

#sidebarbutton { height: 100%; background-color: rgb(204, 204, 204); margin=
-left: 0px; color: rgb(68, 68, 68); font-size: 1.2em; cursor: pointer; padd=
ing-top: 1px; float: right; display: table; width: 12px; border-radius: 0px=
 5px 5px 0px; border-left: none; }

#sidebarbutton span { display: table-cell; vertical-align: middle; }

#sidebarbutton:hover { background-color: rgb(170, 170, 170); }

div.body { padding: 0px 0px 0px 1.2em; }

div.body p, div.body dd, div.body li, div.body blockquote { text-align: lef=
t; line-height: 1.6; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h=
6 { margin: 0px; border: 0px; padding: 0.3em 0px; }

div.body hr { border: 0px; background-color: rgb(204, 204, 204); height: 1p=
x; }

div.body pre { border-radius: 3px; border: 1px solid rgb(170, 204, 153); }

div.body div.admonition, div.body div.impl-detail { border-radius: 3px; }

div.body div.impl-detail > p { margin: 0px; }

div.body div.seealso { border: 1px solid rgb(221, 221, 102); }

div.body a { color: rgb(0, 114, 170); }

div.body a:visited { color: rgb(99, 99, 187); }

div.body a:hover { color: rgb(0, 176, 228); }

tt, code, pre { font-family: Menlo, Consolas, Monaco, "Liberation Mono", "L=
ucida Console", monospace; font-size: 96.5%; }

div.body tt, div.body code { border-radius: 3px; }

div.body tt.descname, div.body code.descname { font-size: 120%; }

div.body tt.xref, div.body a tt, div.body code.xref, div.body a code { font=
-weight: normal; }

table.docutils { border: 1px solid rgb(221, 221, 221); min-width: 20%; bord=
er-radius: 3px; margin-top: 10px; margin-bottom: 10px; }

table.docutils td, table.docutils th { border-radius: 3px; padding: 0.3em 0=
.5em; border: 1px solid rgb(221, 221, 221) !important; }

table p, table li { text-align: left !important; }

table.docutils th { background-color: rgb(238, 238, 238); }

table.footnote, table.footnote td { border: 0px !important; }

div.footer { line-height: 150%; text-align: right; width: auto; margin-righ=
t: 10px; }

div.footer a { text-underline-offset: auto; }

div.footer a:hover { color: rgb(0, 149, 196); }

.refcount { color: rgb(0, 102, 0); }

.stableabi { color: rgb(34, 34, 153); }

dl > dt span ~ em, .sig { font-family: Menlo, Consolas, Monaco, "Liberation=
 Mono", "Lucida Console", monospace; }

.toctree-wrapper ul { padding-left: 20px; }

.theme-selector { margin-left: 0.5em; }

div.genindex-jumpbox, div.genindex-jumpbox > p { display: inline-flex; flex=
-wrap: wrap; }

div.genindex-jumpbox a { margin: 0px 5px; min-width: 30px; text-align: cent=
er; }

.copybutton { cursor: pointer; position: absolute; top: 0px; right: 0px; fo=
nt-family: Menlo, Consolas, Monaco, "Liberation Mono", "Lucida Console", mo=
nospace; padding-left: 0.2em; padding-right: 0.2em; border-radius: 0px 3px =
0px 0px; color: rgb(170, 204, 153); border-color: rgb(170, 204, 153); borde=
r-style: solid; border-width: 1px; }

.copybutton[data-hidden=3D"true"] { text-decoration: line-through; }

@media (max-width: 1023px) {
  div.body { min-width: 100%; padding: 0px; font-size: 0.875rem; }
  div.bodywrapper { margin: 0px; }
  div.body h1 { font-size: 1.625rem; }
  div.body h2 { font-size: 1.25rem; }
  div.body h3, div.body h4, div.body h5 { font-size: 1rem; }
  div.body ul { padding-inline-start: 1rem; }
  div.body blockquote { margin-inline: 1rem 0px; }
  div.related, .sphinxsidebar { display: none; }
  html { scroll-padding-top: 40px; }
  body { margin-top: 40px; }
  .mobile-nav { display: block; height: 40px; width: 100%; position: fixed;=
 top: 0px; left: 0px; box-shadow: rgba(0, 0, 0, 0.25) 0px 0px 2px 0px; z-in=
dex: 1; }
  .mobile-nav * { box-sizing: border-box; }
  .nav-content { position: absolute; z-index: 1; height: 40px; width: 100%;=
 display: flex; background-color: white; }
  .nav-items-wrapper { display: flex; flex: 1 1 auto; padding: 0.25rem; ali=
gn-items: stretch; }
  .nav-logo { margin-right: 1rem; flex-shrink: 0; align-self: center; }
  .nav-content img { display: block; width: 20px; }
  .version_switcher_placeholder { margin-right: 1rem; }
  .version_switcher_placeholder > select { height: 100%; }
  .nav-content .search { display: flex; flex: 1 1 auto; border: 1px solid r=
gb(169, 169, 169); align-items: stretch; }
  .nav-content .search input[type=3D"search"] { border: 0px; padding-left: =
24px; width: 100%; flex: 1 1 0%; }
  .nav-content .search input[type=3D"submit"] { height: 100%; box-shadow: n=
one; border-width: 0px 0px 0px 1px; border-top-style: initial; border-right=
-style: initial; border-bottom-style: initial; border-top-color: initial; b=
order-right-color: initial; border-bottom-color: initial; border-image: ini=
tial; border-left-style: solid; border-left-color: rgb(169, 169, 169); curs=
or: pointer; margin-right: 0px; }
  .nav-content .search svg { position: absolute; align-self: center; paddin=
g-left: 4px; }
  .toggler__input { display: none; }
  .toggler__label { width: 40px; cursor: pointer; display: flex; align-item=
s: center; justify-content: center; padding: 8px; flex-shrink: 0; }
  .toggler__label:hover, .toggler__label:focus { background-color: rgba(127=
, 127, 127, 0.5); }
  .toggler__label > span { position: relative; flex: 0 0 auto; height: 2px;=
 width: 100%; background: currentcolor; transition: all 400ms ease 0s; }
  .toggler__label > span::before, .toggler__label > span::after { content: =
""; height: 2px; width: 100%; background: inherit; position: absolute; left=
: 0px; top: -8px; }
  .toggler__label > span::after { top: 8px; }
  .toggler__input:checked ~ nav > .toggler__label span { transform: rotate(=
135deg); }
  .toggler__input:checked ~ nav > .toggler__label span::before { transform:=
 rotate(90deg); }
  .toggler__input:checked ~ nav > .toggler__label span::before, .toggler__i=
nput:checked ~ nav > .toggler__label span::after { top: 0px; }
  .toggler__input:checked:hover ~ nav > .toggler__label span { transform: r=
otate(315deg); }
  .toggler__input:checked ~ .menu-wrapper { visibility: visible; left: 0px;=
 }
  .menu-wrapper { display: block; position: fixed; top: 0px; transition: le=
ft 400ms ease 0s; left: -310px; width: 300px; height: 100%; background-colo=
r: rgb(238, 238, 238); color: rgb(68, 68, 68); box-shadow: rgba(0, 0, 0, 0.=
2) 0px 0px 10px; overflow-y: auto; }
  .menu-wrapper.open { visibility: visible; left: 0px; }
  .menu { padding: 40px 10px 30px 20px; }
  .menu-wrapper h3, .menu-wrapper h4 { margin-bottom: 0px; font-weight: nor=
mal; }
  .menu-wrapper h4 { font-size: 1.3em; }
  .menu-wrapper h3 { font-size: 1.4em; }
  .menu-wrapper h3 + p, .menu-wrapper h4 + p { margin-top: 0.5rem; }
  .menu a { font-size: smaller; text-decoration: none; }
  .menu ul { list-style: none; line-height: 1.4; overflow-wrap: break-word;=
 padding-left: 0px; }
  .menu ul ul { margin-left: 20px; list-style: square; }
  .menu ul li { margin-bottom: 0.5rem; }
  .language_switcher_placeholder { margin-top: 2rem; }
  .language_switcher_placeholder select { width: 100%; }
  .document { position: relative; z-index: 0; }
  .responsive-table__container { width: 100%; overflow-x: auto; }
  .menu .theme-selector-label { margin-top: 0.5em; display: flex; width: 10=
0%; }
  .menu .theme-selector { flex: 1 1 auto; }
}

@media (min-width: 1024px) {
  div.footer { margin-top: -2em; }
}

:root { --versionadded: rgb(41 100 51); --versionchanged: rgb(133 72 38); -=
-deprecated: rgb(159 49 51); --versionadded-border: rgb(79 196 100); --vers=
ionchanged-border: rgb(244, 227, 76); --deprecated-border: rgb(244, 76, 78)=
; }

div.versionadded, div.versionchanged, div.deprecated, div.deprecated-remove=
d { border-left: 3px solid; padding: 0px 1rem; }

div.versionadded { border-left-color: var(--versionadded-border); }

div.versionchanged { border-left-color: var(--versionchanged-border); }

div.deprecated, div.deprecated-removed, div.versionremoved { border-left-co=
lor: var(--deprecated-border); }

div.versionadded .versionmodified { color: var(--versionadded); }

div.versionchanged .versionmodified { color: var(--versionchanged); }

div.deprecated .versionmodified, div.deprecated-removed .versionmodified, d=
iv.versionremoved .versionmodified { color: var(--deprecated); }
------MultipartBoundary--2oRdm3qoMV0IuZlLWYQbNx1ZYg7nx2vL5gv1H2XWYp----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/classic.css

@charset "utf-8";

@import url("basic.css");

html { background-color: rgb(255, 255, 255); }

body { font-family: -apple-system, BlinkMacSystemFont, "avenir next", aveni=
r, "segoe ui", "helvetica neue", helvetica, Cantarell, Ubuntu, roboto, noto=
, arial, sans-serif; font-size: 100%; background-color: white; color: rgb(0=
, 0, 0); margin: 0px; padding: 0px; }

div.document { display: flex; background-color: white; }

div.documentwrapper { float: left; width: 100%; }

div.bodywrapper { margin: 0px 0px 0px 230px; }

div.body { background-color: white; color: rgb(34, 34, 34); padding: 0px 20=
px 30px; }

div.footer { color: rgb(85, 85, 85); width: 100%; padding: 9px 0px; text-al=
ign: center; font-size: 75%; }

div.footer a { color: rgb(85, 85, 85); text-decoration: underline; }

div.related { background-color: white; line-height: 30px; color: rgb(102, 1=
02, 102); }

div.related a { color: rgb(68, 68, 68); }

div.sphinxsidebar { }

div.sphinxsidebar h3 { font-family: -apple-system, BlinkMacSystemFont, "ave=
nir next", avenir, "segoe ui", "helvetica neue", helvetica, Cantarell, Ubun=
tu, roboto, noto, arial, sans-serif; color: rgb(68, 68, 68); font-size: 1.4=
em; font-weight: normal; margin: 0px; padding: 0px; }

div.sphinxsidebar h3 a { color: rgb(68, 68, 68); }

div.sphinxsidebar h4 { font-family: -apple-system, BlinkMacSystemFont, "ave=
nir next", avenir, "segoe ui", "helvetica neue", helvetica, Cantarell, Ubun=
tu, roboto, noto, arial, sans-serif; color: rgb(68, 68, 68); font-size: 1.3=
em; font-weight: normal; margin: 5px 0px 0px; padding: 0px; }

div.sphinxsidebar p { color: rgb(68, 68, 68); }

div.sphinxsidebar p.topless { margin: 5px 10px 10px; }

div.sphinxsidebar ul { margin: 10px; padding: 0px; color: rgb(68, 68, 68); =
}

div.sphinxsidebar a { color: rgb(68, 68, 68); }

div.sphinxsidebar input { border: 1px solid rgb(68, 68, 68); font-family: s=
ans-serif; font-size: 1em; }

#sidebarbutton { height: 100%; background-color: rgb(204, 204, 204); margin=
-left: 0px; color: rgb(255, 255, 255); border-left: 1px solid white; font-s=
ize: 1.2em; cursor: pointer; padding-top: 1px; float: right; display: table=
; }

#sidebarbutton:hover { background-color: white; }

#sidebarbutton span { display: table-cell; vertical-align: middle; }

div.sphinxsidebarwrapper { float: left; margin-right: 0px; }

a { color: rgb(0, 144, 192); text-decoration: none; }

a:visited { color: rgb(0, 96, 143); text-decoration: none; }

a:hover { text-decoration: underline; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h=
6 { font-family: -apple-system, BlinkMacSystemFont, "avenir next", avenir, =
"segoe ui", "helvetica neue", helvetica, Cantarell, Ubuntu, roboto, noto, a=
rial, sans-serif; background-color: white; font-weight: normal; color: rgb(=
26, 26, 26); border-bottom: 1px solid rgb(204, 204, 204); margin: 20px -20p=
x 10px; padding: 3px 0px 3px 10px; }

div.body h1 { margin-top: 0px; font-size: 200%; }

div.body h2 { font-size: 160%; }

div.body h3 { font-size: 140%; }

div.body h4 { font-size: 120%; }

div.body h5 { font-size: 110%; }

div.body h6 { font-size: 100%; }

a.headerlink { color: rgb(170, 170, 170); font-size: 0.8em; padding: 0px 4p=
x; text-decoration: none; }

a.headerlink:hover { background-color: rgb(170, 170, 170); color: white; }

div.body p, div.body dd, div.body li, div.body blockquote { text-align: jus=
tify; line-height: 130%; }

div.admonition p.admonition-title + p { display: inline; }

div.admonition p { margin-bottom: 5px; }

div.admonition pre { margin-bottom: 5px; }

div.admonition ul, div.admonition ol { margin-bottom: 5px; }

div.note { background-color: rgb(238, 238, 238); border: 1px solid rgb(204,=
 204, 204); }

div.seealso { background-color: rgb(255, 255, 204); border: 1px solid rgb(2=
55, 255, 102); }

nav.contents, aside.topic, div.topic { background-color: rgb(238, 238, 238)=
; }

div.warning { background-color: rgb(255, 228, 228); border: 1px solid rgb(2=
55, 102, 102); }

p.admonition-title { display: inline; }

p.admonition-title::after { content: ":"; }

pre { padding: 5px; background-color: rgb(238, 255, 204); color: rgb(51, 51=
, 51); line-height: 120%; border-top: 1px solid rgb(170, 204, 153); border-=
bottom: 1px solid rgb(170, 204, 153); border-image: initial; border-left: n=
one; border-right: none; }

code { background-color: rgb(236, 240, 243); padding: 0px 1px; font-size: 0=
.95em; }

th, dl.field-list > dt { background-color: rgb(238, 221, 238); }

.warning code { background: rgb(239, 194, 194); }

.note code { background: rgb(214, 214, 214); }

.viewcode-back { font-family: -apple-system, BlinkMacSystemFont, "avenir ne=
xt", avenir, "segoe ui", "helvetica neue", helvetica, Cantarell, Ubuntu, ro=
boto, noto, arial, sans-serif; }

div.viewcode-block:target { background-color: rgb(244, 222, 191); border-to=
p: 1px solid rgb(170, 204, 153); border-bottom: 1px solid rgb(170, 204, 153=
); }

div.code-block-caption { color: rgb(239, 239, 239); background-color: rgb(2=
8, 78, 99); }
------MultipartBoundary--2oRdm3qoMV0IuZlLWYQbNx1ZYg7nx2vL5gv1H2XWYp----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/basic.css

@charset "utf-8";

div.clearer { clear: both; }

div.section::after { display: block; content: ""; clear: left; }

div.related { width: 100%; font-size: 90%; }

div.related h3 { display: none; }

div.related ul { margin: 0px; padding: 0px 0px 0px 10px; list-style: none; =
}

div.related li { display: inline; }

div.related li.right { float: right; margin-right: 5px; }

div.sphinxsidebarwrapper { padding: 10px 5px 0px 10px; }

div.sphinxsidebar { float: left; width: 230px; margin-left: -100%; font-siz=
e: 90%; overflow-wrap: break-word; }

div.sphinxsidebar ul { list-style: none; }

div.sphinxsidebar ul ul, div.sphinxsidebar ul.want-points { margin-left: 20=
px; list-style: square; }

div.sphinxsidebar ul ul { margin-top: 0px; margin-bottom: 0px; }

div.sphinxsidebar form { margin-top: 10px; }

div.sphinxsidebar input { border: 1px solid rgb(152, 219, 204); font-family=
: sans-serif; font-size: 1em; }

div.sphinxsidebar #searchbox form.search { overflow: hidden; }

div.sphinxsidebar #searchbox input[type=3D"text"] { float: left; width: 80%=
; padding: 0.25em; box-sizing: border-box; }

div.sphinxsidebar #searchbox input[type=3D"submit"] { float: left; width: 2=
0%; border-left: none; padding: 0.25em; box-sizing: border-box; }

img { border: 0px; max-width: 100%; }

ul.search { margin: 10px 0px 0px 20px; padding: 0px; }

ul.search li { padding: 5px 0px 5px 20px; background-image: url("file.png")=
; background-repeat: no-repeat; background-position: 0px 7px; }

ul.search li a { font-weight: bold; }

ul.search li p.context { color: rgb(136, 136, 136); margin: 2px 0px 0px 30p=
x; text-align: left; }

ul.keywordmatches li.goodmatch a { font-weight: bold; }

table.contentstable { width: 90%; margin-left: auto; margin-right: auto; }

table.contentstable p.biglink { line-height: 150%; }

a.biglink { font-size: 1.3em; }

span.linkdescr { font-style: italic; padding-top: 5px; font-size: 90%; }

table.indextable { width: 100%; }

table.indextable td { text-align: left; vertical-align: top; }

table.indextable ul { margin-top: 0px; margin-bottom: 0px; list-style-type:=
 none; }

table.indextable > tbody > tr > td > ul { padding-left: 0em; }

table.indextable tr.pcap { height: 10px; }

table.indextable tr.cap { margin-top: 10px; background-color: rgb(242, 242,=
 242); }

img.toggler { margin-right: 3px; margin-top: 3px; cursor: pointer; }

div.modindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

div.genindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

table.modindextable td { padding: 2px; border-collapse: collapse; }

div.body { min-width: 360px; max-width: 800px; }

div.body p, div.body dd, div.body li, div.body blockquote { hyphens: auto; =
}

a.headerlink { visibility: hidden; }

a:visited { color: rgb(85, 26, 139); }

h1:hover > a.headerlink, h2:hover > a.headerlink, h3:hover > a.headerlink, =
h4:hover > a.headerlink, h5:hover > a.headerlink, h6:hover > a.headerlink, =
dt:hover > a.headerlink, caption:hover > a.headerlink, p.caption:hover > a.=
headerlink, div.code-block-caption:hover > a.headerlink { visibility: visib=
le; }

div.body p.caption { text-align: inherit; }

div.body td { text-align: left; }

.first { margin-top: 0px !important; }

p.rubric { margin-top: 30px; font-weight: bold; }

img.align-left, figure.align-left, .figure.align-left, object.align-left { =
clear: left; float: left; margin-right: 1em; }

img.align-right, figure.align-right, .figure.align-right, object.align-righ=
t { clear: right; float: right; margin-left: 1em; }

img.align-center, figure.align-center, .figure.align-center, object.align-c=
enter { display: block; margin-left: auto; margin-right: auto; }

img.align-default, figure.align-default, .figure.align-default { display: b=
lock; margin-left: auto; margin-right: auto; }

.align-left { text-align: left; }

.align-center { text-align: center; }

.align-default { text-align: center; }

.align-right { text-align: right; }

div.sidebar, aside.sidebar { margin: 0px 0px 0.5em 1em; border: 1px solid r=
gb(221, 221, 187); padding: 7px; background-color: rgb(255, 255, 238); widt=
h: 40%; float: right; clear: right; overflow-x: auto; }

p.sidebar-title { font-weight: bold; }

nav.contents, aside.topic, div.admonition, div.topic, blockquote { clear: l=
eft; }

nav.contents, aside.topic, div.topic { border: 1px solid rgb(204, 204, 204)=
; padding: 7px; margin: 10px 0px; }

p.topic-title { font-size: 1.1em; font-weight: bold; margin-top: 10px; }

div.admonition { margin-top: 10px; margin-bottom: 10px; padding: 7px; }

div.admonition dt { font-weight: bold; }

p.admonition-title { margin: 0px 10px 5px 0px; font-weight: bold; }

div.body p.centered { text-align: center; margin-top: 25px; }

div.sidebar > :last-child, aside.sidebar > :last-child, nav.contents > :las=
t-child, aside.topic > :last-child, div.topic > :last-child, div.admonition=
 > :last-child { margin-bottom: 0px; }

div.sidebar::after, aside.sidebar::after, nav.contents::after, aside.topic:=
:after, div.topic::after, div.admonition::after, blockquote::after { displa=
y: block; content: ""; clear: both; }

table.docutils { margin-top: 10px; margin-bottom: 10px; border: 0px; border=
-collapse: collapse; }

table.align-center { margin-left: auto; margin-right: auto; }

table.align-default { margin-left: auto; margin-right: auto; }

table caption span.caption-number { font-style: italic; }

table caption span.caption-text { }

table.docutils td, table.docutils th { padding: 1px 8px 1px 5px; border-wid=
th: 0px 0px 1px; border-top-style: initial; border-top-color: initial; bord=
er-left-style: initial; border-left-color: initial; border-right-style: ini=
tial; border-right-color: initial; border-bottom-style: solid; border-botto=
m-color: rgb(170, 170, 170); }

th { text-align: left; padding-right: 5px; }

table.citation { border-left: 1px solid gray; margin-left: 1px; }

table.citation td { border-bottom: none; }

th > :first-child, td > :first-child { margin-top: 0px; }

th > :last-child, td > :last-child { margin-bottom: 0px; }

div.figure, figure { margin: 0.5em; padding: 0.5em; }

div.figure p.caption, figcaption { padding: 0.3em; }

div.figure p.caption span.caption-number, figcaption span.caption-number { =
font-style: italic; }

div.figure p.caption span.caption-text, figcaption span.caption-text { }

table.field-list td, table.field-list th { border: 0px !important; }

.field-list ul { margin: 0px; padding-left: 1em; }

.field-list p { margin: 0px; }

.field-name { hyphens: manual; }

table.hlist { margin: 1em 0px; }

table.hlist td { vertical-align: top; }

.sig { font-family: Consolas, Menlo, "DejaVu Sans Mono", "Bitstream Vera Sa=
ns Mono", monospace; }

.sig-name, code.descname { background-color: transparent; font-weight: bold=
; }

.sig-name { font-size: 1.1em; }

code.descname { font-size: 1.2em; }

.sig-prename, code.descclassname { background-color: transparent; }

.optional { font-size: 1.3em; }

.sig-paren { font-size: larger; }

.sig-param.n { font-style: italic; }

.sig-inline.c-texpr, .sig-inline.cpp-texpr { font-family: unset; }

.sig.c .k, .sig.c .kt, .sig.cpp .k, .sig.cpp .kt { color: rgb(0, 51, 179); =
}

.sig.c .m, .sig.cpp .m { color: rgb(23, 80, 235); }

.sig.c .s, .sig.c .sc, .sig.cpp .s, .sig.cpp .sc { color: rgb(6, 125, 23); =
}

ol.arabic { list-style: decimal; }

ol.loweralpha { list-style: lower-alpha; }

ol.upperalpha { list-style: upper-alpha; }

ol.lowerroman { list-style: lower-roman; }

ol.upperroman { list-style: upper-roman; }

:not(li) > ol > li:first-child > :first-child, :not(li) > ul > li:first-chi=
ld > :first-child { margin-top: 0px; }

:not(li) > ol > li:last-child > :last-child, :not(li) > ul > li:last-child =
> :last-child { margin-bottom: 0px; }

ol.simple ol p, ol.simple ul p, ul.simple ol p, ul.simple ul p { margin-top=
: 0px; }

ol.simple > li:not(:first-child) > p, ul.simple > li:not(:first-child) > p =
{ margin-top: 0px; }

ol.simple p, ul.simple p { margin-bottom: 0px; }

aside.footnote > span, div.citation > span { float: left; }

aside.footnote > span:last-of-type, div.citation > span:last-of-type { padd=
ing-right: 0.5em; }

aside.footnote > p { margin-left: 2em; }

div.citation > p { margin-left: 4em; }

aside.footnote > p:last-of-type, div.citation > p:last-of-type { margin-bot=
tom: 0em; }

aside.footnote > p:last-of-type::after, div.citation > p:last-of-type::afte=
r { content: ""; clear: both; }

dl.field-list { display: grid; grid-template-columns: fit-content(30%) auto=
; }

dl.field-list > dt { font-weight: bold; word-break: break-word; padding-lef=
t: 0.5em; padding-right: 5px; }

dl.field-list > dd { padding-left: 0.5em; margin-top: 0em; margin-left: 0em=
; margin-bottom: 0em; }

dl { margin-bottom: 15px; }

dd > :first-child { margin-top: 0px; }

dd ul, dd table { margin-bottom: 10px; }

dd { margin-top: 3px; margin-bottom: 10px; margin-left: 30px; }

.sig dd { margin-top: 0px; margin-bottom: 0px; }

.sig dl { margin-top: 0px; margin-bottom: 0px; }

dl > dd:last-child, dl > dd:last-child > :last-child { margin-bottom: 0px; =
}

dt:target, span.highlighted { background-color: rgb(251, 229, 78); }

rect.highlighted { fill: rgb(251, 229, 78); }

dl.glossary dt { font-weight: bold; font-size: 1.1em; }

.versionmodified { font-style: italic; }

.system-message { background-color: rgb(255, 221, 170); padding: 5px; borde=
r: 3px solid red; }

.footnote:target { background-color: rgb(255, 255, 170); }

.line-block { display: block; margin-top: 1em; margin-bottom: 1em; }

.line-block .line-block { margin-top: 0px; margin-bottom: 0px; margin-left:=
 1.5em; }

.guilabel, .menuselection { font-family: sans-serif; }

.accelerator { text-decoration: underline; }

.classifier { font-style: oblique; }

.classifier::before { font-style: normal; margin: 0px 0.5em; content: ":"; =
display: inline-block; }

abbr, acronym { border-bottom: 1px dotted; cursor: help; }

.translated { background-color: rgba(207, 255, 207, 0.2); }

.untranslated { background-color: rgba(255, 207, 207, 0.2); }

pre { overflow: auto hidden; }

pre, div[class*=3D"highlight-"] { clear: both; }

span.pre { hyphens: none; white-space: nowrap; }

div[class*=3D"highlight-"] { margin: 1em 0px; }

td.linenos pre { border: 0px; background-color: transparent; color: rgb(170=
, 170, 170); }

table.highlighttable { display: block; }

table.highlighttable tbody { display: block; }

table.highlighttable tr { display: flex; }

table.highlighttable td { margin: 0px; padding: 0px; }

table.highlighttable td.linenos { padding-right: 0.5em; }

table.highlighttable td.code { flex: 1 1 0%; overflow: hidden; }

.highlight .hll { display: block; }

div.highlight pre, table.highlighttable pre { margin: 0px; }

div.code-block-caption + div { margin-top: 0px; }

div.code-block-caption { margin-top: 1em; padding: 2px 5px; font-size: smal=
l; }

div.code-block-caption code { background-color: transparent; }

table.highlighttable td.linenos, span.linenos, div.highlight span.gp { user=
-select: none; }

div.code-block-caption span.caption-number { padding: 0.1em 0.3em; font-sty=
le: italic; }

div.code-block-caption span.caption-text { }

div.literal-block-wrapper { margin: 1em 0px; }

code.xref, a code { background-color: transparent; font-weight: bold; }

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code { background-color: tr=
ansparent; }

.viewcode-link { float: right; }

.viewcode-back { float: right; font-family: sans-serif; }

div.viewcode-block:target { margin: -1px -10px; padding: 0px 10px; }

img.math { vertical-align: middle; }

div.body div.math p { text-align: center; }

span.eqno { float: right; }

span.eqno a.headerlink { position: absolute; z-index: 1; }

div.math:hover a.headerlink { visibility: visible; }

@media print {
  div.document, div.documentwrapper, div.bodywrapper { width: 100%; margin:=
 0px !important; }
  div.sphinxsidebar, div.related, div.footer, #top-link { display: none; }
}
------MultipartBoundary--2oRdm3qoMV0IuZlLWYQbNx1ZYg7nx2vL5gv1H2XWYp----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/pygments_dark.css?v=b20cc3f5

@charset "utf-8";

pre { line-height: 125%; }

td.linenos .normal { color: inherit; background-color: transparent; padding=
-left: 5px; padding-right: 5px; }

span.linenos { color: inherit; background-color: transparent; padding-left:=
 5px; padding-right: 5px; }

td.linenos .special { color: rgb(0, 0, 0); background-color: rgb(255, 255, =
192); padding-left: 5px; padding-right: 5px; }

span.linenos.special { color: rgb(0, 0, 0); background-color: rgb(255, 255,=
 192); padding-left: 5px; padding-right: 5px; }

.highlight .hll { background-color: rgb(73, 72, 62); }

.highlight { background: rgb(39, 40, 34); color: rgb(248, 248, 242); }

.highlight .c { color: rgb(149, 144, 119); }

.highlight .err { color: rgb(237, 0, 126); background-color: rgb(30, 0, 16)=
; }

.highlight .esc { color: rgb(248, 248, 242); }

.highlight .g { color: rgb(248, 248, 242); }

.highlight .k { color: rgb(102, 217, 239); }

.highlight .l { color: rgb(174, 129, 255); }

.highlight .n { color: rgb(248, 248, 242); }

.highlight .o { color: rgb(255, 70, 137); }

.highlight .x { color: rgb(248, 248, 242); }

.highlight .p { color: rgb(248, 248, 242); }

.highlight .ch { color: rgb(149, 144, 119); }

.highlight .cm { color: rgb(149, 144, 119); }

.highlight .cp { color: rgb(149, 144, 119); }

.highlight .cpf { color: rgb(149, 144, 119); }

.highlight .c1 { color: rgb(149, 144, 119); }

.highlight .cs { color: rgb(149, 144, 119); }

.highlight .gd { color: rgb(255, 70, 137); }

.highlight .ge { color: rgb(248, 248, 242); font-style: italic; }

.highlight .ges { color: rgb(248, 248, 242); font-weight: bold; font-style:=
 italic; }

.highlight .gr { color: rgb(248, 248, 242); }

.highlight .gh { color: rgb(248, 248, 242); }

.highlight .gi { color: rgb(166, 226, 46); }

.highlight .go { color: rgb(102, 217, 239); }

.highlight .gp { color: rgb(255, 70, 137); font-weight: bold; }

.highlight .gs { color: rgb(248, 248, 242); font-weight: bold; }

.highlight .gu { color: rgb(149, 144, 119); }

.highlight .gt { color: rgb(248, 248, 242); }

.highlight .kc { color: rgb(102, 217, 239); }

.highlight .kd { color: rgb(102, 217, 239); }

.highlight .kn { color: rgb(255, 70, 137); }

.highlight .kp { color: rgb(102, 217, 239); }

.highlight .kr { color: rgb(102, 217, 239); }

.highlight .kt { color: rgb(102, 217, 239); }

.highlight .ld { color: rgb(230, 219, 116); }

.highlight .m { color: rgb(174, 129, 255); }

.highlight .s { color: rgb(230, 219, 116); }

.highlight .na { color: rgb(166, 226, 46); }

.highlight .nb { color: rgb(248, 248, 242); }

.highlight .nc { color: rgb(166, 226, 46); }

.highlight .no { color: rgb(102, 217, 239); }

.highlight .nd { color: rgb(166, 226, 46); }

.highlight .ni { color: rgb(248, 248, 242); }

.highlight .ne { color: rgb(166, 226, 46); }

.highlight .nf { color: rgb(166, 226, 46); }

.highlight .nl { color: rgb(248, 248, 242); }

.highlight .nn { color: rgb(248, 248, 242); }

.highlight .nx { color: rgb(166, 226, 46); }

.highlight .py { color: rgb(248, 248, 242); }

.highlight .nt { color: rgb(255, 70, 137); }

.highlight .nv { color: rgb(248, 248, 242); }

.highlight .ow { color: rgb(255, 70, 137); }

.highlight .pm { color: rgb(248, 248, 242); }

.highlight .w { color: rgb(248, 248, 242); }

.highlight .mb { color: rgb(174, 129, 255); }

.highlight .mf { color: rgb(174, 129, 255); }

.highlight .mh { color: rgb(174, 129, 255); }

.highlight .mi { color: rgb(174, 129, 255); }

.highlight .mo { color: rgb(174, 129, 255); }

.highlight .sa { color: rgb(230, 219, 116); }

.highlight .sb { color: rgb(230, 219, 116); }

.highlight .sc { color: rgb(230, 219, 116); }

.highlight .dl { color: rgb(230, 219, 116); }

.highlight .sd { color: rgb(230, 219, 116); }

.highlight .s2 { color: rgb(230, 219, 116); }

.highlight .se { color: rgb(174, 129, 255); }

.highlight .sh { color: rgb(230, 219, 116); }

.highlight .si { color: rgb(230, 219, 116); }

.highlight .sx { color: rgb(230, 219, 116); }

.highlight .sr { color: rgb(230, 219, 116); }

.highlight .s1 { color: rgb(230, 219, 116); }

.highlight .ss { color: rgb(230, 219, 116); }

.highlight .bp { color: rgb(248, 248, 242); }

.highlight .fm { color: rgb(166, 226, 46); }

.highlight .vc { color: rgb(248, 248, 242); }

.highlight .vg { color: rgb(248, 248, 242); }

.highlight .vi { color: rgb(248, 248, 242); }

.highlight .vm { color: rgb(248, 248, 242); }

.highlight .il { color: rgb(174, 129, 255); }
------MultipartBoundary--2oRdm3qoMV0IuZlLWYQbNx1ZYg7nx2vL5gv1H2XWYp----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/pydoctheme_dark.css

@charset "utf-8";

:root { color-scheme: dark; }

html, body { background-color: rgb(34, 34, 34); color: rgba(255, 255, 255, =
0.87); }

div.related { color: rgba(255, 255, 255, 0.7); border-color: rgb(66, 66, 66=
); }

div.sphinxsidebar, .menu-wrapper { background-color: rgb(51, 51, 51); color=
: inherit; }

#sidebarbutton { background-color: rgb(85, 85, 85) !important; color: inher=
it !important; }

div.sidebar, aside.sidebar { background-color: rgb(66, 66, 66); border-colo=
r: rgb(97, 97, 97); }

div.body a { color: rgb(119, 170, 255); }

div.body a:visited { color: rgb(0, 153, 238); }

a.headerlink:hover { background-color: rgb(66, 66, 66); }

div.related a { color: currentcolor; }

div.footer, div.footer a { color: currentcolor; }

dt:target, span.highlighted { background-color: rgb(97, 97, 97); }

.footnote:target { background-color: rgb(44, 62, 80); }

dl.field-list > dt { background-color: rgb(68, 51, 68); }

table.docutils td, table.docutils th { border-color: rgb(97, 97, 97) !impor=
tant; }

table.docutils th { background-color: rgb(66, 66, 66); }

.refcount { color: rgb(170, 255, 170); }

.stableabi { color: rgb(187, 187, 255); }

div.body pre { border-color: rgb(97, 97, 97); }

code { background-color: rgb(66, 66, 66); }

div.body div.seealso { background-color: rgba(255, 255, 0, 0.1); }

div.warning { background-color: rgba(255, 0, 0, 0.2); }

.warning code { background-color: rgba(255, 0, 0, 0.5); }

aside.topic, div.topic, div.note, nav.contents { background-color: rgba(255=
, 255, 255, 0.1); border-color: currentcolor; }

.note code { background-color: rgba(255, 255, 255, 0.1); }

.mobile-nav { box-shadow: rgba(255, 255, 255, 0.25) 0px 0px 2px 0px; }

.nav-content { background-color: black; }

img.invert-in-dark-mode { filter: invert(1) hue-rotate(0.5turn); }

.sig.c .k, .sig.c .kt, .sig.cpp .k, .sig.cpp .kt { color: rgb(82, 131, 255)=
; }

:root { --versionadded: rgb(79 196 100); --versionchanged: rgb(244, 227, 76=
); --deprecated: rgb(244, 76, 78); }
------MultipartBoundary--2oRdm3qoMV0IuZlLWYQbNx1ZYg7nx2vL5gv1H2XWYp----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/py.svg

<svg width=3D"16" height=3D"16" viewBox=3D"0 0 16 16" fill=3D"none" xmlns=
=3D"http://www.w3.org/2000/svg">
<path d=3D"M7.90472 0.00013087C7.24498 0.00316295 6.61493 0.0588153 6.06056=
 0.15584C4.42744 0.441207 4.13093 1.0385 4.13093 2.14002V3.59479H7.99018V4.=
07971H4.13093H2.68259C1.56098 4.07971 0.578874 4.7465 0.271682 6.01495C-0.0=
826595 7.4689 -0.0983765 8.37618 0.271682 9.89434C0.546011 11.0244 1.20115 =
11.8296 2.32275 11.8296H3.64965V10.0856C3.64965 8.82574 4.75178 7.71441 6.0=
6056 7.71441H9.91531C10.9883 7.71441 11.8449 6.84056 11.8449 5.77472V2.1400=
2C11.8449 1.10556 10.9626 0.328486 9.91531 0.15584C9.25235 0.046687 8.56447=
 -0.00290121 7.90472 0.00013087ZM5.81767 1.17017C6.2163 1.17017 6.54184 1.4=
9742 6.54184 1.89978C6.54184 2.30072 6.2163 2.62494 5.81767 2.62494C5.41761=
 2.62494 5.0935 2.30072 5.0935 1.89978C5.0935 1.49742 5.41761 1.17017 5.817=
67 1.17017Z" fill=3D"url(#paint0_linear)"/>
<path d=3D"M12.3262 4.07971V5.77472C12.3262 7.08883 11.1998 8.19488 9.9153 =
8.19488H6.06055C5.00466 8.19488 4.13092 9.0887 4.13092 10.1346V13.7693C4.13=
092 14.8037 5.04038 15.4122 6.06055 15.709C7.28217 16.0642 8.45364 16.1285 =
9.9153 15.709C10.8869 15.4307 11.8449 14.8708 11.8449 13.7693V12.3145H7.990=
17V11.8296H11.8449H13.7746C14.8962 11.8296 15.3141 11.0558 15.7042 9.89434C=
16.1071 8.69865 16.09 7.5488 15.7042 6.01495C15.427 4.91058 14.8976 4.07971=
 13.7746 4.07971H12.3262ZM10.1582 13.2843C10.5583 13.2843 10.8824 13.6086 1=
0.8824 14.0095C10.8824 14.4119 10.5583 14.7391 10.1582 14.7391C9.75955 14.7=
391 9.43402 14.4119 9.43402 14.0095C9.43402 13.6086 9.75955 13.2843 10.1582=
 13.2843Z" fill=3D"url(#paint1_linear)"/>
<defs>
<linearGradient id=3D"paint0_linear" x1=3D"1.25961e-08" y1=3D"1.08223e-08" =
x2=3D"8.81664" y2=3D"7.59597" gradientUnits=3D"userSpaceOnUse">
<stop stop-color=3D"#5A9FD4"/>
<stop offset=3D"1" stop-color=3D"#306998"/>
</linearGradient>
<linearGradient id=3D"paint1_linear" x1=3D"10.0654" y1=3D"13.8872" x2=3D"6.=
91912" y2=3D"9.42957" gradientUnits=3D"userSpaceOnUse">
<stop stop-color=3D"#FFD43B"/>
<stop offset=3D"1" stop-color=3D"#FFE873"/>
</linearGradient>
</defs>
</svg>=0A
------MultipartBoundary--2oRdm3qoMV0IuZlLWYQbNx1ZYg7nx2vL5gv1H2XWYp------
